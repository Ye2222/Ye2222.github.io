<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>FastSpeech</title>
    <url>/2021/10/17/FastSpeech/</url>
    <content><![CDATA[<h3><span id="基本结构">基本结构：</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211017175635542.png" alt="image-20211017175635542"></p>
]]></content>
      <categories>
        <category>论文</category>
        <category>语音</category>
      </categories>
  </entry>
  <entry>
    <title>Git</title>
    <url>/2021/12/29/Git/</url>
    <content><![CDATA[<h2><span id="git是分布式版本控制工具">Git是分布式版本控制工具</span></h2><ul>
<li>集中式版本控制式工具，集中提交到一个中央服务器上进行版本控制</li>
<li>GIt<ul>
<li>分布式版本控制</li>
<li>可以在本机库进行版本控制</li>
</ul>
</li>
</ul>
<h2><span id="git的工作机制">Git的工作机制</span></h2><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202112291118548.png" alt="image-20211229111834496"></p>
<ul>
<li><p>远程库</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202112291118786.png" alt="image-20211229111845742"><br>使用git push 从本地库推送到远程库</p>
</li>
</ul>
<h2><span id="git的常用命令">GIt的常用命令</span></h2><h3><span id="设置用户">设置用户</span></h3><ul>
<li>git config —global user.name + 用户名 <ul>
<li>设置用户签名</li>
</ul>
</li>
<li>git config —global user.email + 邮箱<ul>
<li>设置用户签名</li>
</ul>
</li>
<li>签名的作用是区分不同操作者的身份</li>
<li>与账号无关系</li>
</ul>
<h3><span id="初始化本地库">初始化本地库</span></h3><ul>
<li>git init</li>
</ul>
<h3><span id="查看本地库状态">查看本地库状态</span></h3><ul>
<li>git status<ul>
<li>分支</li>
<li>提交命令</li>
<li>需要提交的文件</li>
</ul>
</li>
</ul>
<h3><span id="添加到暂存区">添加到暂存区</span></h3><ul>
<li>git add + 文件名</li>
<li>添加所有文件：git add .</li>
</ul>
<h3><span id="提交到本地库">提交到本地库</span></h3><ul>
<li>将暂存区的文件提交到本地库</li>
<li>git commit -m + “日志信息” + 文件名</li>
</ul>
<h3><span id="修改文件">修改文件</span></h3><ul>
<li>vim + 文件名<ul>
<li>建立文件</li>
<li>:wq  保存</li>
</ul>
</li>
<li>cat + 文件名<ul>
<li>打开文件</li>
</ul>
</li>
<li>tail -n 1 + 文件名<ul>
<li>查看最后一行</li>
</ul>
</li>
</ul>
<h3><span id="历史版本">历史版本</span></h3><h4><span id="查看历史记录">查看历史记录</span></h4><ul>
<li>git reflog</li>
<li>git log <ul>
<li>详细的</li>
</ul>
</li>
</ul>
<h4><span id="版本穿梭切换版本">版本穿梭（切换版本）</span></h4><ul>
<li>git reset —hard 版本号<ul>
<li>版本穿梭</li>
<li>版本号通过历史记录查看</li>
</ul>
</li>
<li>git的切换版本，底层其实是移动的HEAD指针，指向当前的版本</li>
</ul>
<h3><span id="git分支操作">Git分支操作</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images//1628427574513.png" alt></p>
<h4><span id="分支">分支</span></h4><ul>
<li>在版本控制过程中，同时推进多个任务，为每个任务创建一个单独分支。</li>
<li>使用分支意味着程序员可以把自己的工作从开发主线上分离开来，开发自己分支的时候，不会影响主线分支的进行<br><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images//1628427913356.png" alt></li>
</ul>
<h4><span id="分支的操作">分支的操作</span></h4><h5><span id="查看分支">查看分支</span></h5><ul>
<li>git branch -v</li>
</ul>
<h5><span id="创造分支">创造分支</span></h5><ul>
<li>git branch 分支名</li>
</ul>
<h5><span id="切换分支">切换分支</span></h5><ul>
<li>git checkout 分支名</li>
</ul>
<h5><span id="删除分支">删除分支</span></h5><ul>
<li>删除本地分支：git branch -d + 分支名</li>
<li>删除远程分支：git push origin -d + 分支名</li>
</ul>
<h5><span id="合并分支正常合并">合并分支（正常合并）</span></h5><ul>
<li>git merge + 要合并的分支<ul>
<li>合并到当前分支</li>
</ul>
</li>
</ul>
<h5><span id="合并分支冲突合并">合并分支（冲突合并）</span></h5><ul>
<li>冲突：合并分支时，两个分支在同一个文件的同一个位置有两套完全不同的修改。Git无法替我们决定使用哪一个，必须人为决定新代码内容</li>
<li>进入文件手动修改</li>
<li>修改后提交(commit)不要添加文件名，要先add该文件</li>
</ul>
<h2><span id="团队协作">团队协作</span></h2><h3><span id="团队内协作">团队内协作</span></h3><ul>
<li>push：从本地库推送到远程库</li>
<li>clone：从远程库克隆到本地库</li>
<li>pull：拉取远程库，更新本地库</li>
</ul>
<h4><span id="git-pull">git pull</span></h4><h5><span id="本地和远程出现冲突">本地和远程出现冲突</span></h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">error: Your local changes to the following files would be overwritten by merge:</span><br></pre></td></tr></table></figure>
<ol>
<li>如果你想保留刚才本地修改的代码，并把git服务器上的代码pull到本地（本地刚才修改的代码将会被暂时封存起来）</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git stash</span><br><span class="line">git pull origin master</span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure>
<ol>
<li>如果你想完全地覆盖本地的代码，只保留服务器端代码，则直接回退到上一个版本，再进行pull：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reset --hard</span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure>
<h3><span id="跨团队协作">跨团队协作</span></h3><ul>
<li>fork：将远程库的代码复制到另一个远程库</li>
<li>pull request：拉取请求，经过审核后进行合并</li>
<li>merge：合并</li>
</ul>
<h2><span id="github操作">GitHub操作</span></h2><h3><span id="创建远程库别名">创建远程库别名</span></h3><ul>
<li>git remote -v<ul>
<li>查看当前所有远程地址别名</li>
</ul>
</li>
<li>git remote add + 别名 + 远程地址</li>
</ul>
<h3><span id="推送本地库到远程库">推送本地库到远程库</span></h3><ul>
<li>git push + 别名/链接 + 分支</li>
</ul>
<h3><span id="拉取远程库到本地库">拉取远程库到本地库</span></h3><ul>
<li>git pull + 别名/链接 + 分支</li>
</ul>
<h3><span id="克隆远程库到本地">克隆远程库到本地</span></h3><ul>
<li>git clone + 远程地址</li>
</ul>
<h3><span id="邀请加入团队">邀请加入团队</span></h3><h4><span id="团队内">团队内</span></h4><ul>
<li>可以邀请加入共同编辑一个远程库</li>
<li>然后就可以推送内容到这个远程库中</li>
</ul>
<h4><span id="跨团队">跨团队</span></h4><ul>
<li>点击fork，可以将别人的库复制一份，变成自己的一个库</li>
<li>在自己的库中修改，但原来的库不会变化</li>
<li><p>可以发送pull request，经过同意后可以合并改变原来的库</p>
<h2><span id="ssh免密登录">SSH免密登录</span></h2><ul>
<li>ssh-keygen -t rsa -C + 邮箱<ul>
<li>生成密钥</li>
</ul>
</li>
</ul>
</li>
<li>然后添加到账号里面的ssh列表里</li>
</ul>
<h2><span id="创建ignore文件">创建.ignore文件</span></h2><ul>
<li>忽略与代码无关的编译器文件内容</li>
<li>第一步，创建.ignore文件</li>
</ul>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Complied class file</span></span><br><span class="line">*<span class="string">.class</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Log file</span></span><br><span class="line">*<span class="string">.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># BlueJ files</span></span><br><span class="line">*<span class="string">.ctxt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Moblie Tools for java (J2ME)</span></span><br><span class="line"><span class="string">.mtj.tmp/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Package Files #</span></span><br><span class="line">*<span class="string">.jar</span></span><br><span class="line">*<span class="string">.war</span></span><br><span class="line">*<span class="string">.nar</span></span><br><span class="line">*<span class="string">.ear</span></span><br><span class="line">*<span class="string">.zip</span></span><br><span class="line">*<span class="string">.tar.gz</span></span><br><span class="line">*<span class="string">.rar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml</span></span><br><span class="line">hs_err_pid*</span><br><span class="line"></span><br><span class="line"><span class="string">.classpath</span></span><br><span class="line"><span class="string">.project</span></span><br><span class="line"><span class="string">.settings</span></span><br><span class="line">target</span><br><span class="line"><span class="string">.idea</span></span><br><span class="line">*<span class="string">.iml</span></span><br></pre></td></tr></table></figure>
<ul>
<li>第二步，添加到.gitconfig文件中</li>
</ul>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[user]</span></span><br><span class="line">	<span class="attr">name</span> = Ye22</span><br><span class="line">	<span class="attr">email</span> = <span class="number">12554804</span>@qq.com</span><br><span class="line"><span class="section">[core]</span></span><br><span class="line">	<span class="attr">excludesfile</span> = C:/Users/<span class="number">36382</span>/git.ignore</span><br></pre></td></tr></table></figure>
<h2><span id="idea内git操作">Idea内git操作</span></h2><ul>
<li>创建本地库<ul>
<li>在VSM中点击create git respository</li>
</ul>
</li>
<li>切换版本<ul>
<li>在Log中点击checkout进行切换</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>杂学</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Go1</title>
    <url>/2021/10/04/Go1/</url>
    <content><![CDATA[<h3><span id="命令行参数接收">命令行参数接收</span></h3><ol>
<li><h5><span id="普通方法">普通方法</span></h5></li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s, sep <span class="keyword">string</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(os.Args); i++ &#123;</span><br><span class="line">   s += sep + os.Args[i]</span><br><span class="line">   sep = <span class="string">&quot; &quot;</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(s)</span><br></pre></td></tr></table></figure>
<ol>
<li><h5><span id="使用range">使用range</span></h5></li>
</ol>
<p>range产生一对值：索引以及在该索引处的元素值</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s, sep := <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> _, arg := <span class="keyword">range</span> os.Args[<span class="number">1</span>:] &#123;</span><br><span class="line">   s += sep + arg</span><br><span class="line">   sep = <span class="string">&quot; &quot;</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(s)</span><br></pre></td></tr></table></figure>
<p>Go语言不允许使用无用的局部变量（local variables），因为这会导致编译错误。</p>
<h5><span id="变量声明">变量声明</span></h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">var</span> s <span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">var</span> s <span class="keyword">string</span> = <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>第一种形式: 短变量声明</p>
<ul>
<li>最简洁，但只能用在函数内部，而不能用于包变量。</li>
</ul>
</li>
<li><p>第二种形式</p>
<ul>
<li>依赖于字符串的默认初始化零值机制，被初始化为””</li>
</ul>
</li>
<li>第三种形式<ul>
<li>用得很少，除非同时声明多个变量。</li>
</ul>
</li>
<li>第四种形式<ul>
<li>显式地标明变量的类型，当变量类型与初值类型相同时，类型冗余，</li>
<li>但如果两者类型不同，变量类型就必须了</li>
</ul>
</li>
</ul>
<ol>
<li><h5><span id="简洁高效的方法使用strings">简洁高效的方法，使用strings</span></h5></li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(strings.Join(os.Args[<span class="number">1</span>:], <span class="string">&quot; &quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="查找重复行">查找重复行</span></h3><h4><span id="dup1">Dup1</span></h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Dup1 prints the text of each line that appears more than</span></span><br><span class="line"><span class="comment">// once in the standard input, preceded by its count.</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;bufio&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    counts := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line">    input := bufio.NewScanner(os.Stdin)</span><br><span class="line">    <span class="keyword">for</span> input.Scan() &#123;</span><br><span class="line">        counts[input.Text()]++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> ignoring potential errors from input.Err()</span></span><br><span class="line">    <span class="keyword">for</span> line, n := <span class="keyword">range</span> counts &#123;</span><br><span class="line">        <span class="keyword">if</span> n &gt; <span class="number">1</span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;%d\t%s\n&quot;</span>, n, line)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5><span id="if语句">IF语句</span></h5><ul>
<li><code>if</code>语句条件两边也不加括号，但是主体部分需要加</li>
<li><code>if</code>语句的<code>else</code>部分是可选的，在<code>if</code>的条件为<code>false</code>时执行。</li>
</ul>
<h5><span id="map">map</span></h5><ul>
<li><strong>map</strong>存储了键/值（key/value）的集合，对集合元素，提供常数时间的存、取或测试操作。<ul>
<li>键可以是任意类型，只要其值能用<code>==</code>运算符比较，最常见的例子是字符串</li>
<li>值则可以是任意类型。这个例子中的键是字符串，值是整数</li>
<li>从功能和实现上说，<code>Go</code>的<code>map</code>类似于<code>Java</code>语言中的<code>HashMap</code>，Python语言中的<code>dict</code></li>
</ul>
</li>
<li><code>map</code>的迭代顺序并不确定，从实践来看，该顺序随机，每次运行都会变化。<ul>
<li>这种设计是有意为之的，因为能防止程序依赖特定遍历顺序，而这是无法保证的。</li>
</ul>
</li>
</ul>
<p>每次读取一行输入，该行被当做键存入<code>map</code>，其对应的值递增。</p>
<p><code>counts[input.Text()]++</code>语句等价下面两句：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">line := input.Text()</span><br><span class="line">counts[line] = counts[line] + <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h5><span id="bufio包"><code>bufio</code>包</span></h5><ul>
<li>它使处理输入和输出方便又高效。</li>
<li><code>Scanner</code>类型是该包最有用的特性之一，它读取输入并将其拆成行或单词；<ul>
<li>通常是处理行形式的输入最简单的方法。</li>
<li>每次调用<code>input.Scan()</code>，即读入下一行，并移除行末的换行符</li>
<li>读取的内容可以调用<code>input.Text()</code>得到</li>
<li><code>Scan</code>函数在读到一行时返回<code>true</code>，不再有输入时返回<code>false</code>。</li>
</ul>
</li>
</ul>
<h5><span id="printf"><code>Printf</code></span></h5><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line"><span class="tag">%<span class="selector-tag">d</span></span>          十进制整数</span><br><span class="line"><span class="tag">%<span class="selector-tag">x</span></span>, %o, %b  十六进制，八进制，二进制整数。</span><br><span class="line"><span class="tag">%<span class="selector-tag">f</span></span>, %g, %e  浮点数： 3.141593 3.141592653589793 3.141593e+00</span><br><span class="line"><span class="tag">%<span class="selector-tag">t</span></span>          布尔：true或false</span><br><span class="line"><span class="tag">%<span class="selector-tag">c</span></span>          字符（rune） (Unicode码点)</span><br><span class="line"><span class="tag">%<span class="selector-tag">s</span></span>          字符串</span><br><span class="line"><span class="tag">%<span class="selector-tag">q</span></span>          带双引号的字符串&quot;abc&quot;或带单引号的字符&#x27;c&#x27;</span><br><span class="line"><span class="tag">%<span class="selector-tag">v</span></span>          变量的自然形式（natural format）</span><br><span class="line"><span class="tag">%<span class="selector-tag">T</span></span>          变量的类型</span><br><span class="line"><span class="tag">%</span>%          字面上的百分号标志（无操作数）</span><br></pre></td></tr></table></figure>
<h4><span id="dup2">Dup2</span></h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Dup2 prints the count and text of lines that appear more than once</span></span><br><span class="line"><span class="comment">// in the input.  It reads from stdin or from a list of named files.</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;bufio&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    counts := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line">    files := os.Args[<span class="number">1</span>:]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果命令行参数中没有文件参数，则按输入来进行计数</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(files) == <span class="number">0</span> &#123;</span><br><span class="line">        countLines(os.Stdin, counts)</span><br><span class="line">    &#125; <span class="comment">// 读取文件</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 遍历所有参数</span></span><br><span class="line">        <span class="keyword">for</span> _, arg := <span class="keyword">range</span> files &#123;</span><br><span class="line">            <span class="comment">// 打开文件</span></span><br><span class="line">            f, err := os.Open(arg)</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                fmt.Fprintf(os.Stderr, <span class="string">&quot;dup2: %v\n&quot;</span>, err)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            countLines(f, counts)</span><br><span class="line">            <span class="comment">// 关闭文件</span></span><br><span class="line">            f.Close()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> line, n := <span class="keyword">range</span> counts &#123;</span><br><span class="line">        <span class="keyword">if</span> n &gt; <span class="number">1</span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;%d\t%s\n&quot;</span>, n, line)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">countLines</span><span class="params">(f *os.File, counts <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    input := bufio.NewScanner(f)</span><br><span class="line">    <span class="keyword">for</span> input.Scan() &#123;</span><br><span class="line">        counts[input.Text()]++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> ignoring potential errors from input.Err()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5><span id="osopen函数"><code>os.Open</code>函数</span></h5><ul>
<li>返回两个值<ul>
<li>第一个值是被打开的文件(<code>*os.File</code>）</li>
<li>第二个值是内置<code>error</code>类型的值</li>
</ul>
</li>
</ul>
<h5><span id="注意">注意</span></h5><ul>
<li><code>countLines</code>函数在其声明前被调用。</li>
<li>函数和包级别的变量（package-level entities）可以任意顺序声明，并不影响其被调用</li>
</ul>
<h5><span id="map的变化">map的变化</span></h5><ul>
<li><code>map</code>是一个由<code>make</code>函数创建的数据结构的引用</li>
<li><code>map</code>作为参数传递给某函数时，该函数接收这个引用的一份拷贝（copy，或译为副本）</li>
<li>被调用函数对<code>map</code>底层数据结构的任何修改，调用者函数都可以通过持有的<code>map</code>引用看到</li>
</ul>
<h4><span id="dup3">Dup3</span></h4><p><code>dup</code>的前两个版本以”流”模式读取输入，并根据需要拆分成多个行</p>
<p>可以一口气把全部输入数据读到内存中，一次分割为多行，然后处理它们。</p>
<ul>
<li>引入了<code>ReadFile</code>函数（来自于<code>io/ioutil</code>包），其读取指定文件的全部内容，</li>
<li><code>strings.Split</code>函数把字符串分割成子串的切片</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    counts := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line">    <span class="keyword">for</span> _, filename := <span class="keyword">range</span> os.Args[<span class="number">1</span>:] &#123;</span><br><span class="line">        data, err := ioutil.ReadFile(filename)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Fprintf(os.Stderr, <span class="string">&quot;dup3: %v\n&quot;</span>, err)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> _, line := <span class="keyword">range</span> strings.Split(<span class="keyword">string</span>(data), <span class="string">&quot;\n&quot;</span>) &#123;</span><br><span class="line">            counts[line]++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> line, n := <span class="keyword">range</span> counts &#123;</span><br><span class="line">        <span class="keyword">if</span> n &gt; <span class="number">1</span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;%d\t%s\n&quot;</span>, n, line)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5><span id="readfile函数"><code>ReadFile</code>函数</span></h5><p>返回一个字节切片（byte slice），必须把它转换为<code>string</code>，才能用<code>strings.Split</code>分割。</p>
<h5><span id="注意">注意</span></h5><p><code>bufio.Scanner</code>、<code>ioutil.ReadFile</code>和<code>ioutil.WriteFile</code>都使用<code>*os.File</code>的<code>Read</code>和<code>Write</code>方法</p>
<h4><span id="练习">练习</span></h4><p>出现重复的行打印文件名</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;bufio&quot;</span></span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   counts := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line">   file := os.Args[<span class="number">1</span>:]</span><br><span class="line">   <span class="keyword">if</span> <span class="built_in">len</span>(file) == <span class="number">0</span> &#123;</span><br><span class="line">      countLines1(os.Stdin, counts)</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      countFile := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line">      <span class="keyword">for</span> _, filename := <span class="keyword">range</span> file &#123;</span><br><span class="line">         data, err := os.Open(filename)</span><br><span class="line">         <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;error %v&quot;</span>, err)</span><br><span class="line">         &#125;</span><br><span class="line">         countLines(data, counts, filename, countFile)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> key, value := <span class="keyword">range</span> countFile &#123;</span><br><span class="line">         <span class="keyword">if</span> value &gt;= <span class="number">1</span> &#123;</span><br><span class="line">            fmt.Println(key, value)</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 出现重复的行时打印文件名称</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">countLines1</span><span class="params">(f *os.File, counts <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">   input := bufio.NewScanner(f)</span><br><span class="line">   <span class="keyword">for</span> input.Scan() &#123;</span><br><span class="line">      counts[input.Text()]++</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// <span class="doctag">NOTE:</span> ignoring potential errors from input.Err()</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">countLines</span><span class="params">(f *os.File, counts <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>, filename <span class="keyword">string</span>, countFile <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">   input := bufio.NewScanner(f)</span><br><span class="line">   <span class="keyword">for</span> input.Scan() &#123;</span><br><span class="line">      counts[input.Text()]++</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span> _, value := <span class="keyword">range</span> counts &#123;</span><br><span class="line">      <span class="keyword">if</span> value &gt; <span class="number">1</span> &#123;</span><br><span class="line">         countFile[filename]++</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// <span class="doctag">NOTE:</span> ignoring potential errors from input.Err()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="gif动画image包">GIF动画—image包</span></h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Lissajous generates GIF animations of random Lissajous figures.</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;image&quot;</span></span><br><span class="line">    <span class="string">&quot;image/color&quot;</span></span><br><span class="line">    <span class="string">&quot;image/gif&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;math&quot;</span></span><br><span class="line">    <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> palette = []color.Color&#123;color.White, color.Black&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    whiteIndex = <span class="number">0</span> <span class="comment">// first color in palette</span></span><br><span class="line">    blackIndex = <span class="number">1</span> <span class="comment">// next color in palette</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// The sequence of images is deterministic unless we seed</span></span><br><span class="line">    <span class="comment">// the pseudo-random number generator using the current time.</span></span><br><span class="line">    <span class="comment">// Thanks to Randall McPherson for pointing out the omission.</span></span><br><span class="line">    rand.Seed(time.Now().UTC().UnixNano())</span><br><span class="line">    lissajous(os.Stdout)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lissajous</span><span class="params">(out io.Writer)</span></span> &#123;</span><br><span class="line">    <span class="keyword">const</span> (</span><br><span class="line">        cycles  = <span class="number">5</span>     <span class="comment">// number of complete x oscillator revolutions</span></span><br><span class="line">        res     = <span class="number">0.001</span> <span class="comment">// angular resolution</span></span><br><span class="line">        size    = <span class="number">100</span>   <span class="comment">// image canvas covers [-size..+size]</span></span><br><span class="line">        nframes = <span class="number">64</span>    <span class="comment">// number of animation frames</span></span><br><span class="line">        delay   = <span class="number">8</span>     <span class="comment">// delay between frames in 10ms units</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    freq := rand.Float64() * <span class="number">3.0</span> <span class="comment">// relative frequency of y oscillator</span></span><br><span class="line">    anim := gif.GIF&#123;LoopCount: nframes&#125;</span><br><span class="line">    phase := <span class="number">0.0</span> <span class="comment">// phase difference</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; nframes; i++ &#123;</span><br><span class="line">        rect := image.Rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>*size+<span class="number">1</span>, <span class="number">2</span>*size+<span class="number">1</span>)</span><br><span class="line">        img := image.NewPaletted(rect, palette)</span><br><span class="line">        <span class="keyword">for</span> t := <span class="number">0.0</span>; t &lt; cycles*<span class="number">2</span>*math.Pi; t += res &#123;</span><br><span class="line">            x := math.Sin(t)</span><br><span class="line">            y := math.Sin(t*freq + phase)</span><br><span class="line">            img.SetColorIndex(size+<span class="keyword">int</span>(x*size+<span class="number">0.5</span>), size+<span class="keyword">int</span>(y*size+<span class="number">0.5</span>),</span><br><span class="line">                blackIndex)</span><br><span class="line">        &#125;</span><br><span class="line">        phase += <span class="number">0.1</span></span><br><span class="line">        anim.Delay = <span class="built_in">append</span>(anim.Delay, delay)</span><br><span class="line">        anim.Image = <span class="built_in">append</span>(anim.Image, img)</span><br><span class="line">    &#125;</span><br><span class="line">    gif.EncodeAll(out, &amp;anim) <span class="comment">// <span class="doctag">NOTE:</span> ignoring encoding errors</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>import了一个包路径包含有多个单词的package时，比如image/color（image和color两个单词），通常我们只需要用最后那个单词表示这个包就可以<ul>
<li>当我们写color.White时，这个变量指向的是image/color包里的变量，同理gif.GIF是属于image/gif包里的变量</li>
</ul>
</li>
</ul>
<h4><span id="常量">常量</span></h4><ul>
<li>常量是指在程序编译后运行时始终都不会变化的值，比如圈数、帧数、延迟值</li>
<li>常量声明和变量声明一般都会出现在包级别，所以这些常量在整个包中都是可以共享的，</li>
<li>或者你也可以把常量声明定义在函数体内部，那么这种常量就只能在函数体内用</li>
</ul>
<h4><span id="复合声明">复合声明</span></h4><ul>
<li>[]color.Color{…}和gif.GIF{…}这两个表达式就是我们说的复合声明</li>
<li>前者生成的是一个slice切片，后者生成的是一个struct结构体。<ul>
<li>struct是一组值或者叫字段的集合，不同的类型集合在一个struct可以让我们以一个统一的单元进行处理</li>
<li>anim是一个gif.GIF类型的struct变量。</li>
<li>这种写法会生成一个struct变量，并且其内部变量LoopCount字段会被设置为nframes，其它的字段会被设置为各自类型默认的零值。</li>
<li>struct内部的变量可以以一个点（.）来进行访问</li>
</ul>
</li>
</ul>
<h4><span id="lissajous函数">lissajous函数</span></h4><ul>
<li><p>内部有两层嵌套的for循环</p>
<ul>
<li>外层循环会循环64次，每一次都会生成一个单独的动画帧<ul>
<li>生成了一个包含两种颜色的201*201大小的图片，白色和黑色</li>
<li>所有像素点都会被默认设置为其零值（也就是调色板palette里的第0个值），这里我们设置的是白色。</li>
<li>每次外层循环都会生成一张新图片，并将一些像素设置为黑色。</li>
<li>结果会append到之前结果之后。这里我们用到了append(参考4.2.1)内置函数，将结果append到anim中的帧列表末尾，并设置一个默认的80ms的延迟值</li>
<li>循环结束后所有的延迟值被编码进了GIF图片中，并将结果写入到输出流。</li>
</ul>
</li>
<li>内层循环设置两个偏振值。x轴偏振使用sin函数。y轴偏振也是正弦波，但其相对x轴的偏振是一个0-3的随机值，初始偏振值是一个零值，随着动画的每一帧逐渐增加<ul>
<li>循环会一直跑到x轴完成五次完整的循环。每一步它都会调用SetColorIndex来为(x,y)点来染黑色。</li>
</ul>
</li>
<li>main函数调用lissajous函数，用它来向标准输出流打印信息<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> build gopl.io/ch1/lissajous</span><br><span class="line">lissajous &gt;out.gif</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3><span id="获取urlnet包">获取URL—net包</span></h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Fetch prints the content found at a URL.</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> _, url := <span class="keyword">range</span> os.Args[<span class="number">1</span>:] &#123;</span><br><span class="line">        resp, err := http.Get(url)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Fprintf(os.Stderr, <span class="string">&quot;fetch: %v\n&quot;</span>, err)</span><br><span class="line">            os.Exit(<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        b, err := ioutil.ReadAll(resp.Body)</span><br><span class="line">        resp.Body.Close()</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Fprintf(os.Stderr, <span class="string">&quot;fetch: reading %s: %v\n&quot;</span>, url, err)</span><br><span class="line">            os.Exit(<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%s&quot;</span>, b)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>http.Get函数是创建HTTP请求的函数，如果获取过程没有出错，那么会在resp这个结构体中得到访问的请求结果<ul>
<li>resp的Body字段包括一个可读的服务器响应流</li>
</ul>
</li>
<li>ioutil.ReadAll函数从response中读取到全部内容；将其结果保存在变量b中。</li>
<li>resp.Body.Close关闭resp的Body流，防止资源泄露，Printf函数会将结果b写出到标准输出流中。</li>
</ul>
<h4><span id="练习">练习</span></h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Fetch prints the content found at a URL.</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   <span class="string">&quot;io&quot;</span></span><br><span class="line">   <span class="string">&quot;net/http&quot;</span></span><br><span class="line">   <span class="string">&quot;os&quot;</span></span><br><span class="line">   <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">for</span> _, url := <span class="keyword">range</span> os.Args[<span class="number">1</span>:] &#123;</span><br><span class="line">      <span class="keyword">if</span> !strings.HasPrefix(url,<span class="string">&quot;https://&quot;</span>) &#123;</span><br><span class="line">         url = <span class="string">&quot;https://&quot;</span>+url</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      resp, err := http.Get(url)</span><br><span class="line">      fmt.Println(resp.Status)</span><br><span class="line">      <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">         fmt.Fprintf(os.Stderr, <span class="string">&quot;fetch: %v\n&quot;</span>, err)</span><br><span class="line">         os.Exit(<span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      dst := io.Writer(os.Stdout)</span><br><span class="line">      _, err = io.Copy(dst, resp.Body)</span><br><span class="line">      resp.Body.Close()</span><br><span class="line">      <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">         fmt.Fprintf(os.Stderr, <span class="string">&quot;fetch: reading %s: %v\n&quot;</span>, url, err)</span><br><span class="line">         os.Exit(<span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;%s&quot;</span>, os.Stdout)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="并发获取多个url">并发获取多个URL</span></h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Fetchall fetches URLs in parallel and reports their times and sizes.</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    start := time.Now()</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">    <span class="keyword">for</span> _, url := <span class="keyword">range</span> os.Args[<span class="number">1</span>:] &#123;</span><br><span class="line">        <span class="keyword">go</span> fetch(url, ch) <span class="comment">// start a goroutine</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">range</span> os.Args[<span class="number">1</span>:] &#123;</span><br><span class="line">        fmt.Println(&lt;-ch) <span class="comment">// receive from channel ch</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%.2fs elapsed\n&quot;</span>, time.Since(start).Seconds())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fetch</span><span class="params">(url <span class="keyword">string</span>, ch <span class="keyword">chan</span>&lt;- <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    start := time.Now()</span><br><span class="line">    resp, err := http.Get(url)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        ch &lt;- fmt.Sprint(err) <span class="comment">// send to channel ch</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    nbytes, err := io.Copy(ioutil.Discard, resp.Body)</span><br><span class="line">    resp.Body.Close() <span class="comment">// don&#x27;t leak resources</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        ch &lt;- fmt.Sprintf(<span class="string">&quot;while reading %s: %v&quot;</span>, url, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    secs := time.Since(start).Seconds()</span><br><span class="line">    ch &lt;- fmt.Sprintf(<span class="string">&quot;%.2fs  %7d  %s&quot;</span>, secs, nbytes, url)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>goroutine是一种函数的并发执行方式，而channel是用来在goroutine之间进行参数传递</li>
<li>main函数本身也运行在一个goroutine中，而go function则表示创建一个新的goroutine，并在这个新的goroutine中执行这个函数。</li>
<li>main函数中用make函数创建了一个传递string类型参数的channel</li>
<li>对每一个命令行参数，我们都用go这个关键字来创建一个goroutine，并且让函数在这个goroutine异步执行http.Get方法</li>
<li>io.Copy会把响应的Body内容拷贝到ioutil.Discard输出流中<ul>
<li>可以把这个变量看作一个垃圾桶，可以向里面写一些不需要的数据），因为我们需要这个方法返回的字节数，但是又不想要其内容</li>
</ul>
</li>
<li>每当请求返回内容时，fetch函数都会往ch这个channel里写入一个字符串，由main函数里的第二个for循环来处理并打印channel里的这个字符串。</li>
<li>当一个goroutine尝试在一个channel上做send或者receive操作时，这个goroutine会阻塞在调用处，直到另一个goroutine从这个channel里接收或者写入值，这样两个goroutine才会继续执行channel操作之后的逻辑</li>
</ul>
<h3><span id="web服务器">Web服务器</span></h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Server1 is a minimal &quot;echo&quot; server.</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/&quot;</span>, handler) <span class="comment">// each request calls handler</span></span><br><span class="line">    log.Fatal(http.ListenAndServe(<span class="string">&quot;localhost:8000&quot;</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// handler echoes the Path component of the request URL r.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    fmt.Fprintf(w, <span class="string">&quot;URL.Path = %q\n&quot;</span>, r.URL.Path)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对请求的次数进行计算</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Server2 is a minimal &quot;echo&quot; and counter server.</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mu sync.Mutex</span><br><span class="line"><span class="keyword">var</span> count <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/&quot;</span>, handler)</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/count&quot;</span>, counter)</span><br><span class="line">    log.Fatal(http.ListenAndServe(<span class="string">&quot;localhost:8000&quot;</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// handler echoes the Path component of the requested URL.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    mu.Lock()</span><br><span class="line">    count++</span><br><span class="line">    mu.Unlock()</span><br><span class="line">    fmt.Fprintf(w, <span class="string">&quot;URL.Path = %q\n&quot;</span>, r.URL.Path)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// counter echoes the number of calls so far.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">counter</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    mu.Lock()</span><br><span class="line">    fmt.Fprintf(w, <span class="string">&quot;Count %d\n&quot;</span>, count)</span><br><span class="line">    mu.Unlock()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>handler函数会把请求的http头和请求的form数据都打印出来</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// handler echoes the HTTP request.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    fmt.Fprintf(w, <span class="string">&quot;%s %s %s\n&quot;</span>, r.Method, r.URL, r.Proto)</span><br><span class="line">    <span class="keyword">for</span> k, v := <span class="keyword">range</span> r.Header &#123;</span><br><span class="line">        fmt.Fprintf(w, <span class="string">&quot;Header[%q] = %q\n&quot;</span>, k, v)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Fprintf(w, <span class="string">&quot;Host = %q\n&quot;</span>, r.Host)</span><br><span class="line">    fmt.Fprintf(w, <span class="string">&quot;RemoteAddr = %q\n&quot;</span>, r.RemoteAddr)</span><br><span class="line">    <span class="keyword">if</span> err := r.ParseForm(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Print(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> k, v := <span class="keyword">range</span> r.Form &#123;</span><br><span class="line">        fmt.Fprintf(w, <span class="string">&quot;Form[%q] = %q\n&quot;</span>, k, v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>加入前面的gif</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Server2 is a minimal &quot;echo&quot; and counter server.</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   <span class="string">&quot;image&quot;</span></span><br><span class="line">   <span class="string">&quot;image/color&quot;</span></span><br><span class="line">   <span class="string">&quot;image/gif&quot;</span></span><br><span class="line">   <span class="string">&quot;io&quot;</span></span><br><span class="line">   <span class="string">&quot;log&quot;</span></span><br><span class="line">   <span class="string">&quot;math&quot;</span></span><br><span class="line">   <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">   <span class="string">&quot;net/http&quot;</span></span><br><span class="line">   <span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mu sync.Mutex</span><br><span class="line"><span class="keyword">var</span> count <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   http.HandleFunc(<span class="string">&quot;/&quot;</span>, handler)</span><br><span class="line">   http.HandleFunc(<span class="string">&quot;/image&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">      lissajous(w)</span><br><span class="line">   &#125;)</span><br><span class="line">   http.HandleFunc(<span class="string">&quot;/count&quot;</span>, counter)</span><br><span class="line">   log.Fatal(http.ListenAndServe(<span class="string">&quot;localhost:8000&quot;</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// handler echoes the Path component of the requested URL.</span></span><br><span class="line"><span class="comment">// handler echoes the HTTP request.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">   fmt.Fprintf(w, <span class="string">&quot;%s %s %s\n&quot;</span>, r.Method, r.URL, r.Proto)</span><br><span class="line">   <span class="keyword">for</span> k, v := <span class="keyword">range</span> r.Header &#123;</span><br><span class="line">      fmt.Fprintf(w, <span class="string">&quot;Header[%q] = %q\n&quot;</span>, k, v)</span><br><span class="line">   &#125;</span><br><span class="line">   fmt.Fprintf(w, <span class="string">&quot;Host = %q\n&quot;</span>, r.Host)</span><br><span class="line">   fmt.Fprintf(w, <span class="string">&quot;RemoteAddr = %q\n&quot;</span>, r.RemoteAddr)</span><br><span class="line">   <span class="keyword">if</span> err := r.ParseForm(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">      log.Print(err)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span> k, v := <span class="keyword">range</span> r.Form &#123;</span><br><span class="line">      fmt.Fprintf(w, <span class="string">&quot;Form[%q] = %q\n&quot;</span>, k, v)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// counter echoes the number of calls so far.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">counter</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">   mu.Lock()</span><br><span class="line">   fmt.Fprintf(w, <span class="string">&quot;Count %d\n&quot;</span>, count)</span><br><span class="line">   mu.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Lissajous generates GIF animations of random Lissajous figures.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> palette = []color.Color&#123;color.White, color.Black&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">   whiteIndex = <span class="number">0</span> <span class="comment">// first color in palette</span></span><br><span class="line">   blackIndex = <span class="number">1</span> <span class="comment">// next color in palette</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lissajous</span><span class="params">(out io.Writer)</span></span> &#123;</span><br><span class="line">   <span class="keyword">const</span> (</span><br><span class="line">      cycles  = <span class="number">5</span>     <span class="comment">// number of complete x oscillator revolutions</span></span><br><span class="line">      res     = <span class="number">0.001</span> <span class="comment">// angular resolution</span></span><br><span class="line">      size    = <span class="number">100</span>   <span class="comment">// image canvas covers [-size..+size]</span></span><br><span class="line">      nframes = <span class="number">64</span>    <span class="comment">// number of animation frames</span></span><br><span class="line">      delay   = <span class="number">8</span>     <span class="comment">// delay between frames in 10ms units</span></span><br><span class="line">   )</span><br><span class="line"></span><br><span class="line">   freq := rand.Float64() * <span class="number">3.0</span> <span class="comment">// relative frequency of y oscillator</span></span><br><span class="line">   anim := gif.GIF&#123;LoopCount: nframes&#125;</span><br><span class="line">   phase := <span class="number">0.0</span> <span class="comment">// phase difference</span></span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; nframes; i++ &#123;</span><br><span class="line">      rect := image.Rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>*size+<span class="number">1</span>, <span class="number">2</span>*size+<span class="number">1</span>)</span><br><span class="line">      img := image.NewPaletted(rect, palette)</span><br><span class="line">      <span class="keyword">for</span> t := <span class="number">0.0</span>; t &lt; cycles*<span class="number">2</span>*math.Pi; t += res &#123;</span><br><span class="line">         x := math.Sin(t)</span><br><span class="line">         y := math.Sin(t*freq + phase)</span><br><span class="line">         img.SetColorIndex(size+<span class="keyword">int</span>(x*size+<span class="number">0.5</span>), size+<span class="keyword">int</span>(y*size+<span class="number">0.5</span>),</span><br><span class="line">            blackIndex)</span><br><span class="line">      &#125;</span><br><span class="line">      phase += <span class="number">0.1</span></span><br><span class="line">      anim.Delay = <span class="built_in">append</span>(anim.Delay, delay)</span><br><span class="line">      anim.Image = <span class="built_in">append</span>(anim.Image, img)</span><br><span class="line">   &#125;</span><br><span class="line">   gif.EncodeAll(out, &amp;anim) <span class="comment">// <span class="doctag">NOTE:</span> ignoring encoding errors</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go2</title>
    <url>/2021/10/04/Go2/</url>
    <content><![CDATA[<h2><span id="21-命名">2.1 命名</span></h2><h4><span id="关键字及内建名字">关键字及内建名字</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211221204026832.png" alt="image-20211221204026832"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211221204052484.png" alt="image-20211221204052484"></p>
<h3><span id="变量的作用范围">变量的作用范围</span></h3><h4><span id="函数内部和外部">函数内部和外部</span></h4><ul>
<li>如果一个名字是在函数内部定义，那么它就只在函数内部有效。</li>
<li>如果是在函数外部定义，那么将在当前包的所有文件中都可以访问。</li>
</ul>
<h4><span id="名字的大小写">名字的大小写</span></h4><ul>
<li>名字的开头字母的大小写决定了名字在包外的可见性。<ul>
<li>如果一个名字是大写字母开头的（译注：必须是在函数外部定义的包级名字；包级函数名本身也是包级名字），那么它将是导出的，也就是说可以被外部的包访问<ul>
<li>包本身的名字一般总是用小写字母。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2><span id="22-声明">2.2 声明</span></h2><ul>
<li>声明语句定义了程序的各种实体对象以及部分或全部的属性。</li>
<li><p>Go语言主要有四种类型的声明语句：</p>
<ul>
<li>var 变量</li>
<li>const 常量</li>
<li>type 类型</li>
<li>func 函数实体</li>
</ul>
</li>
<li><p>一个Go语言编写的程序对应一个或多个以.go为文件后缀名的源文件。</p>
<ul>
<li>每个源文件中以<strong>包的声明语句</strong>开始，说明该源文件是属于哪个包</li>
<li>包声明语句之后是import语句<strong>导入依赖的其它包</strong></li>
<li>然后是包一级的<strong>类型、变量、常量、函数的声明语句</strong><ul>
<li>包一级的各种类型的声明语句的顺序无关紧要</li>
<li>函数内部的名字则必须先声明之后才能使用</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4><span id="例子">例子</span></h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Boiling prints the boiling point of water.</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> boilingF = <span class="number">212.0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> f = boilingF</span><br><span class="line">    <span class="keyword">var</span> c = (f - <span class="number">32</span>) * <span class="number">5</span> / <span class="number">9</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;boiling point = %g°F or %g°C\n&quot;</span>, f, c)</span><br><span class="line">    <span class="comment">// Output:</span></span><br><span class="line">    <span class="comment">// boiling point = 212°F or 100°C</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5><span id="变量">变量</span></h5><ul>
<li>常量boilingF是在包一级范围声明语句声明的<ul>
<li>包一级声明语句声明的名字可在整个包对应的每个源文件中访问，而不是仅仅在其声明语句所在的源文件中访问</li>
</ul>
</li>
<li>f和c两个变量是在main函数内部声明的声明语句声明的<ul>
<li>局部声明的名字就只能在函数内部很小的范围被访问。</li>
</ul>
</li>
</ul>
<h5><span id="函数">函数</span></h5><ul>
<li>一个函数的声明由一个函数名字、参数列表（由函数的调用者提供参数变量的具体值）、一个可选的返回值列表和包含函数定义的函数体组成。<ul>
<li>如果函数没有返回值，那么返回值列表是省略的。</li>
<li>执行函数从函数的第一个语句开始，依次顺序执行直到遇到return返回语句，如果没有返回语句则是执行到函数末尾，然后返回到函数调用者。</li>
</ul>
</li>
</ul>
<h2><span id="23-变量">2.3 变量</span></h2><h4><span id="var声明语句">var声明语句</span></h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名字 类型 = 表达式</span><br></pre></td></tr></table></figure>
<ul>
<li><p>var声明语句可以创建一个特定类型的变量</p>
<ul>
<li>给变量附加一个名字，并且设置变量的初始值</li>
<li>其中<strong>“类型”</strong>或<strong>“= 表达式”</strong>两个部分可以省略其中的一个。<ul>
<li>如果省略的是类型信息，那么将根据初始化表达式来推导变量的类型信息。</li>
<li>如果初始化表达式被省略，那么将用零值初始化该变量。<ul>
<li>接口或引用类型（包括slice、指针、map、chan和函数）变量对应的零值是<strong>nil</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>可以在一个声明语句中同时声明一组变量，或用一组初始化表达式声明并初始化一组变量</p>
<ul>
<li>如果省略每个变量的类型，将可以声明多个类型不同的变量</li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i, j, k <span class="keyword">int</span>                 <span class="comment">// int, int, int</span></span><br><span class="line"><span class="keyword">var</span> b, f, s = <span class="literal">true</span>, <span class="number">2.3</span>, <span class="string">&quot;four&quot;</span> <span class="comment">// bool, float64, string</span></span><br></pre></td></tr></table></figure>
<ul>
<li>在<strong>包级别声明的变量</strong>会在main入口函数<strong>执行前</strong>完成<strong>初始化</strong></li>
<li><p><strong>局部变量</strong>将在声明语句被执行到的时候完成初始化。</p>
</li>
<li><p>一组变量也可以通过调用一个函数，由函数返回的多个返回值初始化</p>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f, err = os.Open(name) <span class="comment">// os.Open returns a file and an error</span></span><br></pre></td></tr></table></figure>
<h3><span id="231-简短的变量声明">2.3.1 简短的变量声明</span></h3><ul>
<li><p><strong>“名字 := 表达式”</strong>形式声明变量</p>
</li>
<li><p>变量的类型根据表达式来自动推导</p>
</li>
<li>简短变量声明被广泛用于大部分的<strong>局部变量的声明和初始化</strong></li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">t := <span class="number">0.0</span></span><br></pre></td></tr></table></figure>
<ul>
<li>var形式的声明语句往往是用于需要显式指定变量类型的地方<ul>
<li>或者因为变量稍后会被重新赋值而初始值无关紧要的地方。</li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">i := <span class="number">100</span>                  <span class="comment">// an int</span></span><br><span class="line"><span class="keyword">var</span> boiling <span class="keyword">float64</span> = <span class="number">100</span> <span class="comment">// a float64</span></span><br><span class="line"><span class="keyword">var</span> names []<span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"><span class="keyword">var</span> p Point</span><br></pre></td></tr></table></figure>
<ul>
<li>多变量同时赋值</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">i, j := <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">i, j = j, i <span class="comment">// 交换 i 和 j 的值</span></span><br></pre></td></tr></table></figure>
<h4><span id="注意">注意</span></h4><ul>
<li>“:=”是一个变量声明语句，而“=”是一个变量赋值操作</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">f, err := os.Open(name)</span><br></pre></td></tr></table></figure>
<ul>
<li>简短变量声明语句中必须至少要声明一个新的变量</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">f, err := os.Open(infile)</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">f, err := os.Create(outfile) <span class="comment">// compile error: no new variables</span></span><br></pre></td></tr></table></figure>
<ul>
<li>简短变量声明语句<strong>只有对已经在同级词法域声明过的变量才和赋值操作语句等价</strong><ul>
<li>如果变量是在外部词法域声明的，那么简短变量声明语句将会在当前词法域重新声明一个新的变量。</li>
</ul>
</li>
</ul>
<h3><span id="232-指针">2.3.2. 指针</span></h3><ul>
<li>一个变量对应一个保存了变量对应类型值的内存空间。<ul>
<li>普通变量在声明语句创建时被绑定到一个变量名</li>
</ul>
</li>
<li>一个指针的值是另一个变量的地址。</li>
<li>一个指针对应变量在内存中的存储位置</li>
<li><p>并不是每一个值都会有一个内存地址，但是对于每一个变量必然有对应的内存地址。</p>
</li>
<li><p>如果用“var x int”声明语句声明一个x变量，</p>
<ul>
<li>那么&amp;x表达式（取x变量的内存地址）将产生一个指向该整数变量的指针</li>
<li>指针对应的数据类型是<code>*int</code>，指针被称之为“指向int类型的指针”。</li>
</ul>
</li>
<li><p>如果指针名字为p，那么可以说“p指针指向变量x”，</p>
<ul>
<li>或者说“p指针保存了x变量的内存地址”。</li>
<li><p>同时<code>*p</code>表达式对应p指针指向的变量的值。</p>
</li>
<li><p>一般<code>*p</code>表达式读取指针指向的变量的值，这里为int类型的值，</p>
</li>
<li><p>同时因为<code>*p</code>对应一个变量，所以该表达式也可以出现在赋值语句的左边，表示更新指针所指向的变量的值。</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">x := <span class="number">1</span></span><br><span class="line">p := &amp;x         <span class="comment">// p, of type *int, points to x</span></span><br><span class="line">fmt.Println(*p) <span class="comment">// &quot;1&quot;</span></span><br><span class="line">*p = <span class="number">2</span>          <span class="comment">// equivalent to x = 2</span></span><br><span class="line">fmt.Println(x)  <span class="comment">// &quot;2&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>对于聚合类型每个成员——比如结构体的每个字段、或者是数组的每个元素——也都是对应一个变量，因此可以被取地址。</li>
<li>即使变量由表达式临时生成，那么表达式也必须能接受<code>&amp;</code>取地址操作。</li>
<li><strong>任何类型的指针的零值都是nil。</strong><ul>
<li>如果p指向某个有效变量，那么<code>p != nil</code>测试为真。</li>
</ul>
</li>
<li><strong>指针之间也是可以进行相等测试的</strong>，只有当它们指向同一个变量或全部是nil时才相等。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x, y <span class="keyword">int</span></span><br><span class="line">fmt.Println(&amp;x == &amp;x, &amp;x == &amp;y, &amp;x == <span class="literal">nil</span>) <span class="comment">// &quot;true false false&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>在Go语言中，返回函数中局部变量的地址也是安全的。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = f()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span> *<span class="title">int</span></span> &#123;</span><br><span class="line">    v := <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> &amp;v</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(f() == f()) <span class="comment">// &quot;false&quot;</span></span><br></pre></td></tr></table></figure>
<h4><span id="flag包">flag包</span></h4><p>指针是实现标准库中flag包的关键技术，它使用命令行参数来设置对应变量的值，而这些对应命令行标志参数的变量可能会零散分布在整个程序中。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Echo4 prints its command-line arguments.</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;flag&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> n = flag.Bool(<span class="string">&quot;n&quot;</span>, <span class="literal">false</span>, <span class="string">&quot;omit trailing newline&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> sep = flag.String(<span class="string">&quot;s&quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot;separator&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    flag.Parse()</span><br><span class="line">    fmt.Print(strings.Join(flag.Args(), *sep))</span><br><span class="line">    <span class="keyword">if</span> !*n &#123;</span><br><span class="line">        fmt.Println()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>调用flag.Bool函数会创建一个新的对应布尔型标志参数的变量。有三个属性<ul>
<li>第一个是命令行标志参数的名字“n”，</li>
<li>然后是该标志参数的默认值（这里是false），</li>
<li>最后是该标志参数对应的描述信息。</li>
</ul>
</li>
<li>程序中的<code>sep</code>和<code>n</code>变量分别是指向对应命令行标志参数变量的指针，因此必须用<code>*sep</code>和<code>*n</code>形式的指针语法间接引用它们。</li>
</ul>
<h3><span id="233-new函数">2.3.3. new函数</span></h3><ul>
<li><p>另一个<strong>创建变量的方法</strong>是调用内建的new函数</p>
</li>
<li><p>表达式new(T)将创建一个T类型的匿名变量</p>
<ul>
<li>初始化为T类型的零值，然后<strong>返回变量地址</strong>，返回的指针类型为<code>*T</code>。</li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">p := <span class="built_in">new</span>(<span class="keyword">int</span>)   <span class="comment">// p, *int 类型, 指向匿名的 int 变量</span></span><br><span class="line">fmt.Println(*p) <span class="comment">// &quot;0&quot;</span></span><br><span class="line">*p = <span class="number">2</span>          <span class="comment">// 设置 int 匿名变量的值为 2</span></span><br><span class="line">fmt.Println(*p) <span class="comment">// &quot;2&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>用new创建变量和普通变量声明语句方式创建变量没有什么区别</li>
<li>除了不需要声明一个临时变量的名字外，我们还可以在表达式中使用new(T)</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newInt</span><span class="params">()</span> *<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">new</span>(<span class="keyword">int</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newInt</span><span class="params">()</span> *<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> dummy <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">return</span> &amp;dummy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>每次调用new函数都是返回一个新的变量的地址，因此下面两个地址是不同的</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">p := <span class="built_in">new</span>(<span class="keyword">int</span>)</span><br><span class="line">q := <span class="built_in">new</span>(<span class="keyword">int</span>)</span><br><span class="line">fmt.Println(p == q) <span class="comment">// &quot;false&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>特殊情况：如果两个类型都是空的，也就是说类型的大小是0</p>
<ul>
<li>例如<code>struct&#123;&#125;</code>和<code>[0]int</code>，有可能有相同的地址（依赖具体的语言实现）</li>
</ul>
</li>
<li><p>由于new只是<strong>一个预定义的函数</strong>，它并不是一个关键字，因此我们可以<strong>将new名字重新定义为别的类型</strong>。</p>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">delta</span><span class="params">(old, <span class="built_in">new</span> <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123; <span class="keyword">return</span> <span class="built_in">new</span> - old &#125;</span><br></pre></td></tr></table></figure>
<h3><span id="234-变量的生命周期">2.3.4. 变量的生命周期</span></h3><ul>
<li>变量的生命周期指的是在程序运行期间变量有效存在的时间段。</li>
<li>对于在包一级声明的变量来说，它们的生命周期和整个程序的运行周期是一致的。</li>
<li>而相比之下，局部变量的生命周期则是动态的：<ul>
<li>每次从创建一个新变量的声明语句开始，直到该变量不再被引用为止，然后变量的存储空间可能被回收</li>
</ul>
</li>
<li><p>函数的参数变量和返回值变量都是局部变量。它们在函数每次被调用的时候创建。</p>
</li>
<li><p>Go语言的自动垃圾收集器是如何知道一个变量是何时可以被回收的呢？</p>
<ul>
<li>基本的实现思路是，从每个包级的变量和每个当前运行函数的每一个局部变量开始，通过指针或引用的访问路径遍历，是否可以找到该变量。</li>
<li>如果不存在这样的访问路径，那么说明该变量是不可达的，也就是说它是否存在并不会影响程序后续的计算结果。</li>
</ul>
</li>
<li><p>编译器会自动选择在<strong>栈上还是在堆上分配局部变量</strong>的存储空间，但可能令人惊讶的是，这个选择并不是由用var还是new声明变量的方式决定的</p>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> global *<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> x <span class="keyword">int</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    global = &amp;x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">g</span><span class="params">()</span></span> &#123;</span><br><span class="line">    y := <span class="built_in">new</span>(<span class="keyword">int</span>)</span><br><span class="line">    *y = <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>f函数里的<strong>x变量</strong>必须在<strong>堆</strong>上分配，因为它在函数退出后依然可以通过包一级的global变量找到，虽然它是在函数内部定义的</li>
<li><p><code>*y</code>并没有从函数g中逃逸，编译器可以选择在栈上分配<code>*y</code>的存储空间</p>
</li>
<li><p>其实在任何时候，你并不需为了编写正确的代码而要考虑变量的逃逸行为，要记住的是，逃逸的变量需要额外分配内存，同时对性能的优化可能会产生细微的影响。</p>
</li>
</ul>
<h2><span id="24-赋值">2.4 赋值</span></h2><ul>
<li>使用赋值语句可以更新一个变量的值</li>
<li>最简单的赋值语句是将要被赋值的变量放在=的左边，新值的表达式放在=的右边。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">x = <span class="number">1</span>                       <span class="comment">// 命名变量的赋值</span></span><br><span class="line">*p = <span class="literal">true</span>                   <span class="comment">// 通过指针间接赋值</span></span><br><span class="line">person.name = <span class="string">&quot;bob&quot;</span>         <span class="comment">// 结构体字段赋值</span></span><br><span class="line">count[x] = count[x] * scale <span class="comment">// 数组、slice或map的元素赋值</span></span><br></pre></td></tr></table></figure>
<ul>
<li>特定的二元算术运算符和赋值语句的复合操作有一个简洁形式</li>
<li>数值变量也可以支持<code>++</code>递增和<code>--</code>递减语句</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">count[x] *= scale</span><br><span class="line">v := <span class="number">1</span></span><br><span class="line">v++    <span class="comment">// 等价方式 v = v + 1；v 变成 2</span></span><br><span class="line">v--    <span class="comment">// 等价方式 v = v - 1；v 变成 1</span></span><br></pre></td></tr></table></figure>
<h3><span id="241-元组赋值">2.4.1. 元组赋值</span></h3><ul>
<li>元组赋值是另一种形式的赋值语句，它允许同时更新多个变量的值。<ul>
<li>在赋值之前，赋值语句右边的所有表达式将会先进行求值，然后再统一更新左边对应变量的值</li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">x, y = y, x</span><br><span class="line"></span><br><span class="line">a[i], a[j] = a[j], a[i]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">gcd</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> y != <span class="number">0</span> &#123;</span><br><span class="line">        x, y = y, x%y</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>元组赋值也可以使一系列琐碎赋值更加紧凑</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">i, j, k = <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span></span><br></pre></td></tr></table></figure>
<ul>
<li>但如果<strong>表达式太复杂</strong>的话，应该尽量避免过度使用元组赋值；因为每个变量单独赋值语句的写法可读性会更好。</li>
<li>有些<strong>表达式会产生多个值</strong>，比如调用一个有多个返回值的函数。<ul>
<li>当这样一个函数调用出现在元组赋值右边的表达式中时</li>
<li>（译注：右边不能再有其它表达式），左边变量的数目必须和右边一致。</li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">f, err = os.Open(<span class="string">&quot;foo.txt&quot;</span>) <span class="comment">// function call returns two values</span></span><br></pre></td></tr></table></figure>
<ul>
<li>通常，这类函数会用额外的返回值来表达某种错误类型<ul>
<li>还有一些是用来返回布尔值，通常被称为ok。</li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">v, ok = m[key]             <span class="comment">// map lookup</span></span><br><span class="line">v, ok = x.(T)              <span class="comment">// type assertion</span></span><br><span class="line">v, ok = &lt;-ch               <span class="comment">// channel receive</span></span><br></pre></td></tr></table></figure>
<ul>
<li>和变量声明一样，我们可以用下划线空白标识符<code>_</code>来丢弃不需要的值。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">_, err = io.Copy(dst, src) <span class="comment">// 丢弃字节数</span></span><br><span class="line">_, ok = x.(T)              <span class="comment">// 只检测类型，忽略具体值</span></span><br></pre></td></tr></table></figure>
<h3><span id="242-可赋值性">2.4.2. 可赋值性</span></h3><ul>
<li>赋值语句是显式的赋值形式</li>
<li>但是程序中还有很多地方会发生隐式的赋值行为：<ul>
<li>函数调用会隐式地将调用参数的值赋值给函数的参数变量，</li>
<li>一个返回语句会隐式地将返回操作的值赋值给结果变量，</li>
<li>一个复合类型的字面量（§4.2）也会产生赋值行为。</li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">medals := []<span class="keyword">string</span>&#123;<span class="string">&quot;gold&quot;</span>, <span class="string">&quot;silver&quot;</span>, <span class="string">&quot;bronze&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>隐式地对slice的每个元素进行赋值操作，类似这样写的行为</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">medals[<span class="number">0</span>] = <span class="string">&quot;gold&quot;</span></span><br><span class="line">medals[<span class="number">1</span>] = <span class="string">&quot;silver&quot;</span></span><br><span class="line">medals[<span class="number">2</span>] = <span class="string">&quot;bronze&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>map和chan的元素，虽然不是普通的变量，但是也有类似的隐式赋值行为。</li>
<li>不管是隐式还是显式地赋值，在赋值语句左边的变量和右边最终的求到的值必须有相同的数据类型。</li>
<li><p>更直白地说，只有右边的值对于左边的变量是可赋值的，赋值语句才是允许的。</p>
</li>
<li><p>nil可以赋值给任何指针或引用类型的变量</p>
</li>
</ul>
<h2><span id="25-类型">2.5. 类型</span></h2><ul>
<li><p>变量或表达式的类型定义了对应存储值的属性特征</p>
<ul>
<li>数值在内存的存储大小（或者是元素的bit个数）</li>
<li>它们在内部是如何表达的，是否支持一些操作符</li>
<li>以及它们自己关联的方法集等</li>
</ul>
</li>
<li><p>在任何程序中都会存在一些变量有着相同的内部结构，但是却表示完全不同的概念。</p>
</li>
<li><p><strong>一个类型声明语句创建了一个新的类型名称</strong>，和现有类型具有相同的底层结构。</p>
<ul>
<li>新命名的类型提供了一个方法，用来分隔不同概念的类型，这样即使它们底层类型相同也是不兼容的</li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> 类型名字 底层类型</span><br></pre></td></tr></table></figure>
<ul>
<li>类型声明语句一般出现在<strong>包一级</strong>，因此如果<strong>新创建的类型名字的首字符大写，则在包外部也可以使用。</strong></li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Package tempconv performs Celsius and Fahrenheit temperature computations.</span></span><br><span class="line"><span class="keyword">package</span> tempconv</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Celsius <span class="keyword">float64</span>    <span class="comment">// 摄氏温度</span></span><br><span class="line"><span class="keyword">type</span> Fahrenheit <span class="keyword">float64</span> <span class="comment">// 华氏温度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    AbsoluteZeroC Celsius = <span class="number">-273.15</span> <span class="comment">// 绝对零度</span></span><br><span class="line">    FreezingC     Celsius = <span class="number">0</span>       <span class="comment">// 结冰点温度</span></span><br><span class="line">    BoilingC      Celsius = <span class="number">100</span>     <span class="comment">// 沸水温度</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CToF</span><span class="params">(c Celsius)</span> <span class="title">Fahrenheit</span></span> &#123; <span class="keyword">return</span> Fahrenheit(c*<span class="number">9</span>/<span class="number">5</span> + <span class="number">32</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FToC</span><span class="params">(f Fahrenheit)</span> <span class="title">Celsius</span></span> &#123; <span class="keyword">return</span> Celsius((f - <span class="number">32</span>) * <span class="number">5</span> / <span class="number">9</span>) &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>在这个包声明了两种类型：Celsius和Fahrenheit分别对应不同的温度单位。</li>
<li>它们虽然有着相同的底层类型float64，但是它们是不同的数据类型，因此它们不可以被相互比较或混在一个表达式运算。</li>
</ul>
<h4><span id="类型转换">类型转换</span></h4><ul>
<li><p>Celsius(t)和Fahrenheit(t)是<strong>类型转换操作，它们并不是函数调用</strong>。</p>
<ul>
<li><strong>类型转换不会改变值本身</strong>，但是会使它们的语义发生变化。</li>
</ul>
</li>
<li><p>对于每一个类型T，都有一个对应的类型转换操作T(x)，用于将x转为T类型</p>
<ul>
<li>如果T是指针类型，可能会需要用小括弧包装T，比如<code>(*int)(0)</code></li>
<li>只有<strong>当两个类型的底层基础类型相同时，才允许这种转型操作</strong>，或者是<strong>两者都是指向相同底层结构的指针类型</strong>，<strong>这些转换只改变类型而不会影响值本身</strong></li>
</ul>
</li>
<li><strong>数值类型之间的转型也是允许的</strong>，并且在字符串和一些特定类型的slice之间也是可以转换的<ul>
<li>将一个浮点数转为整数将丢弃小数部分，将一个字符串转为<code>[]byte</code>类型的slice将拷贝一个字符串数据的副本</li>
</ul>
</li>
</ul>
<h4><span id="比较">比较</span></h4><ul>
<li><p>比较运算符<code>==</code>和<code>&lt;</code>也可以用来比较一个命名类型的变量和另一个有相同类型的变量，或有着相同底层类型的未命名类型的值之间做比较。</p>
</li>
<li><p>如果两个值有着不同的类型，则不能直接进行比较：</p>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> c Celsius</span><br><span class="line"><span class="keyword">var</span> f Fahrenheit</span><br><span class="line">fmt.Println(c == <span class="number">0</span>)          <span class="comment">// &quot;true&quot;</span></span><br><span class="line">fmt.Println(f &gt;= <span class="number">0</span>)          <span class="comment">// &quot;true&quot;</span></span><br><span class="line">fmt.Println(c == f)          <span class="comment">// compile error: type mismatch</span></span><br><span class="line">fmt.Println(c == Celsius(f)) <span class="comment">// &quot;true&quot;!</span></span><br></pre></td></tr></table></figure>
<ul>
<li>注意最后那个语句。尽管看起来像函数调用，但是Celsius(f)是类型转换操作，它并不会改变值，仅仅是改变值的类型而已</li>
<li><p>测试为真的原因是因为c和g都是零值。</p>
</li>
<li><p>下面的声明语句，Celsius类型的参数c出现在了函数名的前面，表示声明的是Celsius类型的一个名叫String的方法，该方法返回该类型对象c带着°C温度单位的字符串</p>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Celsius)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123; <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%g°C&quot;</span>, c) &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>许多类型都会定义一个String方法</strong>，因为当使用fmt包的打印方法时，将会优先使用该类型对应的String方法返回的结果打印</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">c := FToC(<span class="number">212.0</span>)</span><br><span class="line">fmt.Println(c.String()) <span class="comment">// &quot;100°C&quot;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, c)   <span class="comment">// &quot;100°C&quot;; no need to call String explicitly</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, c)   <span class="comment">// &quot;100°C&quot;</span></span><br><span class="line">fmt.Println(c)          <span class="comment">// &quot;100°C&quot;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%g\n&quot;</span>, c)   <span class="comment">// &quot;100&quot;; does not call String</span></span><br><span class="line">fmt.Println(<span class="keyword">float64</span>(c)) <span class="comment">// &quot;100&quot;; does not call String</span></span><br></pre></td></tr></table></figure>
<h2><span id="26-包和文件">2.6. 包和文件</span></h2><ul>
<li>Go语言中的包和其他语言的库或模块的概念类似，目的都是为了支持模块化、封装、单独编译和代码重用</li>
<li>一个包的源代码保存在一个或多个以.go为文件后缀名的源文件中，通常一个包所在目录路径的后缀是包的导入路径<ul>
<li>例如包gopl.io/ch1/helloworld对应的目录路径是$GOPATH/src/gopl.io/ch1/helloworld。</li>
</ul>
</li>
<li>每个包都对应一个独立的名字空间。<ul>
<li>例如，在image包中的Decode函数和在unicode/utf16包中的 Decode函数是不同的。</li>
<li>要在外部引用该函数，必须显式使用image.Decode或utf16.Decode形式访问。</li>
</ul>
</li>
<li>包还可以让我们通过控制哪些名字是外部可见的来隐藏内部实现信息。</li>
<li>在Go语言中，一个简单的规则是：如果一个名字是大写字母开头的，那么该名字是导出的</li>
</ul>
<h4><span id="例子">例子</span></h4><p>把变量的声明、对应的常量，还有方法都放到tempconv.go源文件中：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Package tempconv performs Celsius and Fahrenheit conversions.</span></span><br><span class="line"><span class="keyword">package</span> tempconv</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Celsius <span class="keyword">float64</span></span><br><span class="line"><span class="keyword">type</span> Fahrenheit <span class="keyword">float64</span></span><br><span class="line"><span class="keyword">type</span> Kelvin <span class="keyword">float64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    AbsoluteZeroC Celsius = <span class="number">-273.15</span></span><br><span class="line">    FreezingC     Celsius = <span class="number">0</span></span><br><span class="line">    BoilingC      Celsius = <span class="number">100</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Celsius)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span>    &#123; <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%g°C&quot;</span>, c) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f Fahrenheit)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123; <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%g°F&quot;</span>, f) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Kelvin)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123; <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%g K&quot;</span>, k) &#125;</span><br></pre></td></tr></table></figure>
<p>转换函数则放在另一个conv.go源文件中</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tempconv</span><br><span class="line"></span><br><span class="line"><span class="comment">// CToF converts a Celsius temperature to Fahrenheit.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CToF</span><span class="params">(c Celsius)</span> <span class="title">Fahrenheit</span></span> &#123; <span class="keyword">return</span> Fahrenheit(c*<span class="number">9</span>/<span class="number">5</span> + <span class="number">32</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// FToC converts a Fahrenheit temperature to Celsius.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FToC</span><span class="params">(f Fahrenheit)</span> <span class="title">Celsius</span></span> &#123; <span class="keyword">return</span> Celsius((f - <span class="number">32</span>) * <span class="number">5</span> / <span class="number">9</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CToK</span><span class="params">(c Celsius)</span> <span class="title">Kelvin</span></span> &#123; <span class="keyword">return</span> Kelvin(c - <span class="number">273.15</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">KToC</span><span class="params">(k Kelvin)</span> <span class="title">Celsius</span></span> &#123; <span class="keyword">return</span> Celsius(k + <span class="number">273.15</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FToK</span><span class="params">(f Fahrenheit)</span> <span class="title">Kelvin</span></span> &#123;<span class="keyword">return</span> CToK(FToC(f)) &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">KToF</span><span class="params">(k Kelvin)</span> <span class="title">Fahrenheit</span></span> &#123;<span class="keyword">return</span> CToF(KToC(k))&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>每个源文件都是以包的声明语句开始，用来指明包的名字。</li>
<li>当包被导入的时候，包内的成员将通过类似tempconv.CToF的形式访问。</li>
<li>而包级别的名字，例如在一个文件声明的类型和常量，在同一个包的其他源文件也是可以直接访问的，就好像所有代码都在一个文件一样。</li>
<li>要注意的是tempconv.go源文件导入了fmt包，但是conv.go源文件并没有，因为这个源文件中的代码并没有用到fmt包。</li>
</ul>
<p><strong>包级别的常量名</strong>都是以<strong>大写字母开头</strong>，它们可以像tempconv.AbsoluteZeroC这样被外部代码访问：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Printf(<span class="string">&quot;Brrrr! %v\n&quot;</span>, tempconv.AbsoluteZeroC) <span class="comment">// &quot;Brrrr! -273.15°C&quot;</span></span><br></pre></td></tr></table></figure>
<p>要将摄氏温度转换为华氏温度，需要先用<strong>import语句导入gopl.io/ch2/tempconv包</strong>，然后就可以使用下面的代码进行转换了：</p>
<p>要将摄氏温度转换为华氏温度，需要先用import语句导入gopl.io/ch2/tempconv包，然后就可以使用下面的代码进行转换了</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Println(tempconv.CToF(tempconv.BoilingC)) <span class="comment">// &quot;212°F&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>在每个源文件的包声明前紧跟着的注释是包注释</li>
<li>通常，包注释的第一句应该先是包的功能概要说明。一个包通常只有一个源文件有包注释<ul>
<li>（如果有多个包注释，目前的文档工具会根据源文件名的先后顺序将它们链接为一个包注释）。</li>
</ul>
</li>
<li>如果包注释很大，通常会放到一个独立的doc.go文件中。</li>
</ul>
<h3><span id="261-导入包">2.6.1. 导入包</span></h3><ul>
<li>在Go语言程序中，每个包都有一个全局唯一的导入路径</li>
<li><p>除了包的导入路径，每个包还有一个包名，包名一般是短小的名字（并不要求包名是唯一的），包名在包的声明处指定。</p>
</li>
<li><p>导入语句将导入的包绑定到一个短小的名字，然后通过该短小的名字就可以引用包中导出的全部内容。</p>
</li>
<li><p>如果导入了一个包，但是又没有使用该包将被当作一个编译错误处理</p>
<ul>
<li>在这种情况下，我们需要将不必要的导入删除或注释掉</li>
</ul>
</li>
<li><p>可以使用golang.org/x/tools/cmd/goimports导入工具，它可以根据需要自动添加或删除导入的包</p>
<ul>
<li>许多编辑器都可以集成goimports工具，然后在保存文件的时候自动运行。</li>
<li>类似的还有gofmt工具，可以用来格式化Go源文件</li>
</ul>
</li>
</ul>
<h3><span id="262-包的初始化">2.6.2. 包的初始化</span></h3><ul>
<li>包的初始化首先是<strong>解决包级变量的依赖顺序</strong>，然后按照包级变量声明出现的顺序依次初始化</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = b + c <span class="comment">// a 第三个初始化, 为 3</span></span><br><span class="line"><span class="keyword">var</span> b = f()   <span class="comment">// b 第二个初始化, 为 2, 通过调用 f (依赖c)</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">1</span>     <span class="comment">// c 第一个初始化, 为 1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span> <span class="title">int</span></span> &#123; <span class="keyword">return</span> c + <span class="number">1</span> &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>如果包中含有多个.go源文件，它们将按照发给编译器的顺序进行初始化</li>
<li>Go语言的构建工具首先会将.go文件根据文件名排序，然后依次调用编译器编译。</li>
<li><p>对于在包级别声明的变量，如果有初始化表达式则用表达式初始化，还有一些没有初始化表达式的</p>
<ul>
<li>例如某些表格数据初始化并不是一个简单的赋值过程。</li>
</ul>
</li>
<li><p>在这种情况下，我们可以用一个<strong>特殊的init初始化函数</strong>来简化初始化工作。每个文件都可以包含多个init初始化函数</p>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>这样的init初始化函数除了不能被调用或引用外，其他行为和普通函数类似。</li>
<li><p>在每个文件中的init初始化函数，在程序开始执行时按照它们声明的顺序被自动调用。</p>
</li>
<li><p>每个包在解决依赖的前提下，以导入声明的顺序初始化，每个包只会被初始化一次。</p>
<ul>
<li>因此，如果一个p包导入了q包，那么在p包初始化的时候可以认为q包必然已经初始化过了。</li>
<li>初始化工作是自下而上进行的，main包最后被初始化。</li>
<li>以这种方式，可以确保在main函数执行之前，所有依赖的包都已经完成初始化工作了。</li>
</ul>
</li>
</ul>
<h2><span id="27-作用域">2.7. 作用域</span></h2><ul>
<li>一个声明语句将程序中的实体和一个名字关联，比如一个函数或一个变量。</li>
<li>声明语句的作用域是指源代码中可以有效使用这个名字的范围。</li>
</ul>
<h4><span id="作用域和声明周期的区别">作用域和声明周期的区别</span></h4><ul>
<li>声明语句的作用域对应的是一个源代码的文本区域；它是一个编译时的属性。</li>
<li>一个变量的生命周期是指程序运行时变量存在的有效时间段，在此时间区域内它可以被程序的其他部分引用；是一个运行时的概念。</li>
</ul>
<h4><span id="词法块">词法块</span></h4><ul>
<li>句法块是由花括弧所包含的一系列语句，就像函数体或循环体花括弧包裹的内容一样。</li>
<li><p>句法块内部声明的名字是无法被外部块访问的。这个块决定了内部声明的名字的作用域范围</p>
</li>
<li><p>对全局的源代码来说，存在一个整体的词法块，称为全局词法块；</p>
</li>
<li>对于每个包；每个for、if和switch语句，也都有对应词法块；</li>
<li>每个switch或select的分支也有独立的词法块；</li>
<li>当然也包括显式书写的词法块（花括弧包含的语句）。</li>
</ul>
<h4><span id="作用域大小">作用域大小</span></h4><ul>
<li>声明语句对应的词法域决定了作用域范围的大小。</li>
<li>对于内置的类型、函数和常量，比如int、len和true等是在全局作用域的，因此可以在整个程序中直接使用。</li>
<li>任何在函数外部（也就是包级语法域）声明的名字可以在同一个包的任何源文件中访问的</li>
<li><p>一个程序可能包含多个同名的声明，只要它们在不同的词法域就没有关系。</p>
</li>
<li><p>当编译器遇到一个名字引用时，它会对其定义进行查找，查找过程从最内层的词法域向全局的作用域进行。</p>
<ul>
<li>如果查找失败，则报告“未声明的名字”这样的错误。</li>
<li>如果该名字在内部和外部的块分别声明过，则内部块的声明首先被找到。</li>
<li>在这种情况下，内部声明屏蔽了外部同名的声明，让外部的声明的名字无法被访问</li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g = <span class="string">&quot;g&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f := <span class="string">&quot;f&quot;</span></span><br><span class="line">    fmt.Println(f) <span class="comment">// &quot;f&quot;; local var f shadows package-level func f</span></span><br><span class="line">    fmt.Println(g) <span class="comment">// &quot;g&quot;; package-level var</span></span><br><span class="line">    fmt.Println(h) <span class="comment">// compile error: undefined: h</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>特别注意短变量声明语句的作用域范围</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cwd <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    cwd, err := os.Getwd() <span class="comment">// compile error: unused: cwd</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">&quot;os.Getwd failed: %v&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>虽然cwd在外部已经声明过，但是<code>:=</code>语句还是将cwd和err重新声明为新的局部变量。</li>
<li>因为内部声明的cwd将屏蔽外部的声明，因此上面的代码并不会正确更新包级声明的cwd变量。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cwd <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    cwd, err := os.Getwd() <span class="comment">// <span class="doctag">NOTE:</span> wrong!</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">&quot;os.Getwd failed: %v&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    log.Printf(<span class="string">&quot;Working directory = %s&quot;</span>, cwd)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>全局的cwd变量依然是没有被正确初始化的，而且看似正常的日志输出更是让这个BUG更加隐晦。</p>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go4</title>
    <url>/2021/10/04/Go4/</url>
    <content><![CDATA[<h2><span id="41-数组">4.1. 数组</span></h2><ul>
<li>数组是一个由固定长度的特定类型元素组成的序列，一个数组可以由零个或多个元素组成。</li>
<li>Go语言中很少直接使用数组，因为数组的长度是固定的</li>
<li><p>和数组对应的类型是<strong>Slice（切片）</strong>，它是<strong>可以增长和收缩的动态序列</strong>，slice功能也更灵活，</p>
<ul>
<li>但是要理解slice工作原理的话需要先理解数组</li>
</ul>
</li>
<li><p>创建数组和切片的直接区别：定义了长度</p>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x []<span class="keyword">int</span> <span class="comment">// 切片</span></span><br><span class="line">x = <span class="built_in">append</span>(x, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">var</span> y = [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; <span class="comment">// 数组</span></span><br></pre></td></tr></table></figure>
<h4><span id="数组">数组</span></h4><ul>
<li>数组的每个元素可以通过索引下标来访问，索引下标的范围是从0开始到数组长度减1的位置。</li>
<li>内置的len函数将返回数组中元素的个数。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a [<span class="number">3</span>]<span class="keyword">int</span>             <span class="comment">// array of 3 integers</span></span><br><span class="line">fmt.Println(a[<span class="number">0</span>])        <span class="comment">// print the first element</span></span><br><span class="line">fmt.Println(a[<span class="built_in">len</span>(a)<span class="number">-1</span>]) <span class="comment">// print the last element, a[2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Print the indices and elements.</span></span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> a &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%d %d\n&quot;</span>, i, v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Print the elements only.</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> a &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%d\n&quot;</span>, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4><span id="数组的初始化">数组的初始化</span></h4><ul>
<li>默认情况下，数组的每个元素都被初始化为元素类型对应的零值，对于数字类型来说就是0。</li>
<li>可以使用数组字面值语法用一组值来初始化数组</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> q [<span class="number">3</span>]<span class="keyword">int</span> = [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">var</span> r [<span class="number">3</span>]<span class="keyword">int</span> = [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">fmt.Println(r[<span class="number">2</span>]) <span class="comment">// &quot;0&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>在数组字面值中，如果在数组的长度位置出现的是<strong>“…”省略号</strong>，则表示数组的长度是根据初始化值的个数来计算</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">q := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, q) <span class="comment">// &quot;[3]int&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>可以指定一个索引和对应值列表的方式初始化</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Currency <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    USD Currency = <span class="literal">iota</span> <span class="comment">// 美元</span></span><br><span class="line">    EUR                 <span class="comment">// 欧元</span></span><br><span class="line">    GBP                 <span class="comment">// 英镑</span></span><br><span class="line">    RMB                 <span class="comment">// 人民币</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">symbol := [...]<span class="keyword">string</span>&#123;USD: <span class="string">&quot;$&quot;</span>, EUR: <span class="string">&quot;€&quot;</span>, GBP: <span class="string">&quot;￡&quot;</span>, RMB: <span class="string">&quot;￥&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(RMB, symbol[RMB]) <span class="comment">// &quot;3 ￥&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>未指定初始值的元素将用零值初始化</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">r := [...]<span class="keyword">int</span>&#123;<span class="number">99</span>: <span class="number">-1</span>&#125;</span><br></pre></td></tr></table></figure>
<p>定义了一个含有100个元素的数组r，最后一个元素被初始化为-1，其它元素都是用0初始化。</p>
<h4><span id="数组的长度">数组的长度</span></h4><ul>
<li>数组的长度是数组类型的一个组成部分，因此[3]int和[4]int是两种不同的数组类型</li>
<li>数组的长度必须是常量表达式，因为数组的长度需要在编译阶段确定。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">q := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">q = [<span class="number">4</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125; <span class="comment">// compile error: cannot assign [4]int to [3]int</span></span><br></pre></td></tr></table></figure>
<h4><span id="数组的比较">数组的比较</span></h4><ul>
<li>如果一个数组的元素类型是可以相互比较的，那么数组类型也是可以相互比较的</li>
<li>这时候我们可以直接通过==比较运算符来比较两个数组，只有当两个数组的所有元素都是相等的时候数组才是相等的</li>
<li>不相等比较运算符!=遵循同样的规则</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a := [<span class="number">2</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">b := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">c := [<span class="number">2</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">3</span>&#125;</span><br><span class="line">fmt.Println(a == b, a == c, b == c) <span class="comment">// &quot;true false false&quot;</span></span><br><span class="line">d := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">fmt.Println(a == d) <span class="comment">// compile error: cannot compare [2]int == [3]int</span></span><br></pre></td></tr></table></figure>
<h5><span id="例子">例子</span></h5><p>crypto/sha256包的Sum256函数对一个任意的字节slice类型的数据生成一个对应的消息摘要。消息摘要有256bit大小，因此对应[32]byte数组类型</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;crypto/sha256&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c1 := sha256.Sum256([]<span class="keyword">byte</span>(<span class="string">&quot;x&quot;</span>))</span><br><span class="line">    c2 := sha256.Sum256([]<span class="keyword">byte</span>(<span class="string">&quot;X&quot;</span>))</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%x\n%x\n%t\n%T\n&quot;</span>, c1, c2, c1 == c2, c1)</span><br><span class="line">    <span class="comment">// Output:</span></span><br><span class="line">    <span class="comment">// 2d711642b726b04401627ca9fbac32f5c8530fb1903cc4db02258717921a4881</span></span><br><span class="line">    <span class="comment">// 4b68ab3847feda7d6c62c1fbcbeebfa35eab7351ed5e78f4ddadea5df64b8015</span></span><br><span class="line">    <span class="comment">// false</span></span><br><span class="line">    <span class="comment">// [32]uint8</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以显式地传入一个数组指针，那样的话函数通过指针对数组的任何修改都可以直接反馈到调用者。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">zero</span><span class="params">(ptr *[32]<span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> ptr &#123;</span><br><span class="line">        ptr[i] = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">zero</span><span class="params">(ptr *[32]<span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line">    *ptr = [<span class="number">32</span>]<span class="keyword">byte</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="42-slice">4.2. Slice</span></h2><ul>
<li>Slice（切片）代表变长的序列，序列中每个元素都有相同的类型</li>
<li>一个slice类型一般写作[]T，其中T代表slice中元素的类型；</li>
<li>slice的语法和数组很像，只是没有固定长度而已</li>
<li>一个slice是一个轻量级的数据结构，提供了访问数组子序列（或者全部）元素的功能，而且slice的底层确实引用一个数组对象</li>
</ul>
<h4><span id="slice的构成">slice的构成</span></h4><ul>
<li>一个slice由三个部分构成：指针、长度和容量。</li>
<li>指针指向第一个slice元素对应的底层数组元素的地址，要注意的是slice的第一个元素并不一定就是数组的第一个元素。</li>
<li>长度对应slice中元素的数目；长度不能超过容量，</li>
<li>容量一般是从slice的开始位置到底层数据的结尾位置。</li>
<li>内置的len和cap函数分别返回slice的长度和容量</li>
</ul>
<p>多个slice之间可以共享底层的数据，并且引用的数组部分区间可能重叠。</p>
<h4><span id="切片">切片</span></h4><ul>
<li>slice的切片操作s[i:j]，其中0 ≤ i≤ j≤ cap(s)，用于创建一个新的slice，引用s的从第i个元素开始到第j-1个元素的子序列。</li>
<li>新的slice将只有j-i个元素。</li>
<li><p>如果i位置的索引被省略的话将使用0代替，如果j位置的索引被省略的话将使用len(s)代替</p>
</li>
<li><p>如果切片操作超出cap(s)的上限将导致一个panic异常，但是超出len(s)则是意味着扩展了slice，因为新slice的长度会变大</p>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">months := [...]<span class="keyword">string</span>&#123;<span class="number">1</span>: <span class="string">&quot;January&quot;</span>, <span class="comment">/* ... */</span>, <span class="number">12</span>: <span class="string">&quot;December&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">Q2 := months[<span class="number">4</span>:<span class="number">7</span>]</span><br><span class="line">summer := months[<span class="number">6</span>:<span class="number">9</span>]</span><br><span class="line">fmt.Println(Q2)     <span class="comment">// [&quot;April&quot; &quot;May&quot; &quot;June&quot;]</span></span><br><span class="line">fmt.Println(summer) <span class="comment">// [&quot;June&quot; &quot;July&quot; &quot;August&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, s := <span class="keyword">range</span> summer &#123;</span><br><span class="line">    <span class="keyword">for</span> _, q := <span class="keyword">range</span> Q2 &#123;</span><br><span class="line">        <span class="keyword">if</span> s == q &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;%s appears in both\n&quot;</span>, s)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(summer[:<span class="number">20</span>]) <span class="comment">// panic: out of range</span></span><br><span class="line"></span><br><span class="line">endlessSummer := summer[:<span class="number">5</span>] <span class="comment">// extend a slice (within capacity)</span></span><br><span class="line">fmt.Println(endlessSummer)  <span class="comment">// &quot;[June July August September October]&quot;</span></span><br></pre></td></tr></table></figure>
<h4><span id="字符串和byte的切片">字符串和[]byte的切片</span></h4><ul>
<li>字符串的切片操作和[]byte字节类型切片的切片操作是类似的。</li>
<li>都写作x[m:n]</li>
<li>并且都是返回一个原始字节序列的子序列，底层都是共享之前的底层数组，因此这种操作都是常量时间复杂度</li>
<li><p>x[m:n]切片操作对于字符串则生成一个新字符串，如果x是[]byte的话则生成一个新的[]byte</p>
</li>
<li><p>换句话说，复制一个slice只是对底层的数组创建了一个新的slice别名</p>
</li>
</ul>
<h4><span id="例子">例子</span></h4><p>reverse函数在原内存空间将[]int类型的slice反转，而且它可以用于任意长度的slice</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// reverse reverses a slice of ints in place.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverse</span><span class="params">(s []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i, j := <span class="number">0</span>, <span class="built_in">len</span>(s)<span class="number">-1</span>; i &lt; j; i, j = i+<span class="number">1</span>, j<span class="number">-1</span> &#123;</span><br><span class="line">        s[i], s[j] = s[j], s[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a := [...]<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">reverse(a[:])</span><br><span class="line">fmt.Println(a) <span class="comment">// &quot;[5 4 3 2 1 0]&quot;</span></span><br></pre></td></tr></table></figure>
<p>一种将slice元素循环向左旋转n个元素的方法是三次调用reverse反转函数，第一次是反转开头的n个元素，然后是反转剩下的元素，最后是反转整个slice的元素。（如果是向右循环旋转，则将第三个函数调用移到第一个调用位置就可以了。）</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="comment">// Rotate s left by two positions.</span></span><br><span class="line">reverse(s[:<span class="number">2</span>])</span><br><span class="line">reverse(s[<span class="number">2</span>:])</span><br><span class="line">reverse(s)</span><br><span class="line">fmt.Println(s) <span class="comment">// &quot;[2 3 4 5 0 1]&quot;</span></span><br></pre></td></tr></table></figure>
<h4><span id="切片的初始化">切片的初始化</span></h4><ul>
<li>slice和数组的字面值语法很类似，它们都是用花括弧包含一系列的初始化元素，</li>
<li>但是对于slice并没有指明序列的长度。</li>
<li>这会隐式地创建一个合适大小的数组，然后slice的指针指向底层的数组。</li>
<li>slice的字面值也可以按顺序指定初始化值序列，或者是通过索引和元素值指定，或者用两种风格的混合语法初始化</li>
</ul>
<h4><span id="切片的比较">切片的比较</span></h4><ul>
<li><strong>slice之间不能比较</strong>，因此我们不能使用==操作符来判断两个slice是否含有全部相等元素</li>
<li>标准库<strong>提供</strong>了高度优化的<strong>bytes.Equal函数来判断两个字节型slice是否相等</strong>（[]byte），但是对于其他类型的slice，我们必须自己展开每个元素进行比较</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">equal</span><span class="params">(x, y []<span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(x) != <span class="built_in">len</span>(y) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> x &#123;</span><br><span class="line">        <span class="keyword">if</span> x[i] != y[i] &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为何slice不直接支持比较运算符呢</p>
<ul>
<li><p>第一个原因，一个slice的元素是间接引用的，一个slice甚至可以包含自身，虽然有很多办法处理这种情形，但是没有一个是简单有效的。</p>
<ul>
<li>当slice声明为[]interface{}时，slice的元素可以是自身</li>
</ul>
</li>
<li><p>第二个原因，因为slice的元素是间接引用的，一个固定的slice值（注：指slice本身的值，不是元素的值）在不同的时刻可能包含不同的元素，因为底层数组的元素可能会被修改</p>
<ul>
<li>例如Go语言中map的key只做简单的浅拷贝，它要求key在整个生命周期内保持不变性<ul>
<li>例如slice扩容，就会导致其本身的值/地址变化</li>
</ul>
</li>
<li>而用深度相等判断的话，显然在map的key这种场合不合适。对于像指针或chan之类的引用类型，==相等测试可以判断两个是否是引用相同的对象</li>
<li>一个针对slice的浅相等测试的==操作符可能是有一定用处的，也能临时解决map类型的key问题</li>
<li>但是slice和数组不同的相等测试行为会让人困惑。因此，安全的做法是直接禁止slice之间的比较操作</li>
</ul>
</li>
</ul>
<h5><span id="slice唯一合法的比较操作是和nil比较">slice唯一合法的比较操作是和nil比较</span></h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> summer == <span class="literal">nil</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>一个零值的slice等于nil。</li>
<li>一个nil值的slice并没有底层数组。</li>
<li>一个nil值的slice的长度和容量都是0，但是也有非nil值的slice的长度和容量也是0的，例如[]int{}或make([]int, 3)[3:]。</li>
<li>与任意类型的nil值一样，我们可以用[]int(nil)类型转换表达式来生成一个对应类型slice的nil值。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s []<span class="keyword">int</span>    <span class="comment">// len(s) == 0, s == nil</span></span><br><span class="line">s = <span class="literal">nil</span>        <span class="comment">// len(s) == 0, s == nil</span></span><br><span class="line">s = []<span class="keyword">int</span>(<span class="literal">nil</span>) <span class="comment">// len(s) == 0, s == nil</span></span><br><span class="line">s = []<span class="keyword">int</span>&#123;&#125;    <span class="comment">// len(s) == 0, s != nil</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>如果你需要测试一个slice是否是空的，使用len(s) == 0来判断</strong>，而不应该用s == nil来判断。</li>
<li>除了和nil相等比较外，一个nil值的slice的行为和其它任意0长度的slice一样</li>
<li>除了文档已经明确说明的地方，所有的Go语言函数应该以相同的方式对待nil值的slice和0长度的slice。</li>
</ul>
<h4><span id="make函数创建slice">make函数创建slice</span></h4><ul>
<li>内置的make函数创建一个指定元素类型、长度和容量的slice</li>
<li>容量部分可以省略，在这种情况下，容量将等于长度。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="built_in">make</span>([]T, <span class="built_in">len</span>)</span><br><span class="line"><span class="built_in">make</span>([]T, <span class="built_in">len</span>, <span class="built_in">cap</span>) <span class="comment">// same as make([]T, cap)[:len]</span></span><br></pre></td></tr></table></figure>
<ul>
<li>在底层，make创建了一个匿名的数组变量，然后返回一个slice；只有通过返回的slice才能引用底层匿名的数组变量。</li>
<li>在第一种语句中，slice是整个数组的view。</li>
<li>在第二个语句中，slice只引用了底层数组的前len个元素，但是容量将包含整个的数组。额外的元素是留给未来的增长用的。</li>
</ul>
<h4><span id="slice的索引">slice的索引</span></h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//demo_8.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	sli := [] <span class="keyword">int</span> &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;sli[0:3] ==&quot;</span>, sli[<span class="number">0</span>:<span class="number">3</span>])</span><br><span class="line">	fmt.Printf(<span class="string">&quot;len=%d cap=%d slice=%v\n&quot;</span>,<span class="built_in">len</span>(sli[<span class="number">0</span>:<span class="number">3</span>]),<span class="built_in">cap</span>(sli[<span class="number">0</span>:<span class="number">3</span>]),sli[<span class="number">0</span>:<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;sli[0:3:4] ==&quot;</span>, sli[<span class="number">0</span>:<span class="number">3</span>:<span class="number">4</span>])</span><br><span class="line">	fmt.Printf(<span class="string">&quot;len=%d cap=%d slice=%v\n&quot;</span>,<span class="built_in">len</span>(sli[<span class="number">0</span>:<span class="number">3</span>:<span class="number">4</span>]),<span class="built_in">cap</span>(sli[<span class="number">0</span>:<span class="number">3</span>:<span class="number">4</span>]),sli[<span class="number">0</span>:<span class="number">3</span>:<span class="number">4</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sli[0:3] == [1 2 3]</span></span><br><span class="line"><span class="comment">// len=3 cap=6 slice=[1 2 3]</span></span><br><span class="line"><span class="comment">// sli[0:3:5] == [1 2 3]</span></span><br><span class="line"><span class="comment">// len=3 cap=4 slice=[1 2 3]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>上述切片方式中</p>
<ul>
<li>第一种：s[i:j]：从i截取到j</li>
<li>第二种：s[i:j:k]：从i截取到j，容量为k</li>
</ul>
<h3><span id="421-append函数">4.2.1. append函数</span></h3><p>内置的append函数用于向slice追加元素</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> runes []<span class="keyword">rune</span></span><br><span class="line"><span class="keyword">for</span> _, r := <span class="keyword">range</span> <span class="string">&quot;Hello, 世界&quot;</span> &#123;</span><br><span class="line">    runes = <span class="built_in">append</span>(runes, r)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%q\n&quot;</span>, runes) <span class="comment">// &quot;[&#x27;H&#x27; &#x27;e&#x27; &#x27;l&#x27; &#x27;l&#x27; &#x27;o&#x27; &#x27;,&#x27; &#x27; &#x27; &#x27;世&#x27; &#x27;界&#x27;]&quot;</span></span><br></pre></td></tr></table></figure>
<p>对应这个特殊的问题我们可以通过Go语言内置的[]rune(“Hello, 世界”)转换操作完成。</p>
<p>append函数对于理解slice底层是如何工作的非常重要，所以让我们仔细查看究竟是发生了什么</p>
<h4><span id="实现appendint函数">实现appendInt函数</span></h4><p>专门用于处理[]int类型的slice</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">appendInt</span><span class="params">(x []<span class="keyword">int</span>, y <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> z []<span class="keyword">int</span></span><br><span class="line">    zlen := <span class="built_in">len</span>(x) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> zlen &lt;= <span class="built_in">cap</span>(x) &#123;</span><br><span class="line">        <span class="comment">// There is room to grow.  Extend the slice.</span></span><br><span class="line">        z = x[:zlen]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// There is insufficient space.  Allocate a new array.</span></span><br><span class="line">        <span class="comment">// Grow by doubling, for amortized linear complexity.</span></span><br><span class="line">        zcap := zlen</span><br><span class="line">        <span class="keyword">if</span> zcap &lt; <span class="number">2</span>*<span class="built_in">len</span>(x) &#123;</span><br><span class="line">            zcap = <span class="number">2</span> * <span class="built_in">len</span>(x)</span><br><span class="line">        &#125;</span><br><span class="line">        z = <span class="built_in">make</span>([]<span class="keyword">int</span>, zlen, zcap)</span><br><span class="line">        <span class="built_in">copy</span>(z, x) <span class="comment">// a built-in function; see text</span></span><br><span class="line">    &#125;</span><br><span class="line">    z[<span class="built_in">len</span>(x)] = y</span><br><span class="line">    <span class="keyword">return</span> z</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>每次调用appendInt函数，必须先检测slice底层数组是否有足够的容量来保存新添加的元素。</li>
<li><p>如果有足够空间的话，直接扩展slice（依然在原有的底层数组之上），将新添加的y元素复制到新扩展的空间，并返回slice。因此，输入的x和输出的z共享相同的底层数组。<strong>（line 4~6）</strong></p>
</li>
<li><p>如果没有足够的增长空间的话，appendInt函数则会先分配一个足够大的slice用于保存新的结果，先将输入的x复制到新的空间，然后添加y元素。结果z和输入的x引用的将是不同的底层数组。<strong>（line10~15）</strong></p>
</li>
<li><p>内置的copy函数可以方便地将一个slice复制另一个相同类型的slice。</p>
<ul>
<li>copy函数的第一个参数是要复制的目标slice</li>
<li>第二个参数是源slice</li>
<li>目标和源的位置顺序和<code>dst = src</code>赋值语句是一致的。</li>
<li>两个slice可以共享同一个底层数组，甚至有重叠也没有问题。</li>
<li>copy函数将返回成功复制的元素的个数（我们这里没有用到），等于两个slice中较小的长度，所以我们不用担心覆盖会超出目标slice的范围。</li>
</ul>
</li>
<li><p>为了提高内存使用效率，新分配的数组一般略大于保存x和y所需要的最低大小。</p>
<ul>
<li>通过在每次扩展数组时直接将长度翻倍从而避免了多次内存分配，也确保了添加单个元素操的平均时间是一个常数时间</li>
</ul>
</li>
</ul>
<h5><span id="通常是将append返回的结果直接赋值给输入的slice变量的原因">通常是将append返回的结果直接赋值给输入的slice变量的原因</span></h5><ul>
<li>内置的append函数可能使用比appendInt更复杂的内存扩展策略。</li>
<li>因此，通常我们并不知道append调用是否导致了内存的重新分配</li>
<li>因此我们也不能确认新的slice和原始的slice是否引用的是相同的底层数组空间。</li>
<li>同样，我们不能确认在原先的slice上的操作是否会影响到新的slice。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">runes = <span class="built_in">append</span>(runes, r)</span><br></pre></td></tr></table></figure>
<ul>
<li><p>要正确地使用slice，需要记住<strong>尽管底层数组的元素是间接访问的，但是slice对应结构体本身的指针、长度和容量部分是直接访问的</strong>。</p>
</li>
<li><p>要更新这些信息需要像上面例子那样一个显式的赋值操作。</p>
</li>
<li>从这个角度看，slice并不是一个纯粹的引用类型，它实际上是一个类似下面结构体的聚合类型：</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> IntSlice <span class="keyword">struct</span> &#123;</span><br><span class="line">    ptr      *<span class="keyword">int</span></span><br><span class="line">    <span class="built_in">len</span>, <span class="built_in">cap</span> <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4><span id="改进appendint函数追加多个数">改进appendint函数—追加多个数</span></h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">appendInt</span><span class="params">(x []<span class="keyword">int</span>, y ...<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> z []<span class="keyword">int</span></span><br><span class="line">    zlen := <span class="built_in">len</span>(x) + <span class="built_in">len</span>(y)</span><br><span class="line">    <span class="comment">// ...expand z to at least zlen...</span></span><br><span class="line">    <span class="built_in">copy</span>(z[<span class="built_in">len</span>(x):], y)</span><br><span class="line">    <span class="keyword">return</span> z</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="422-slice内存技巧">4.2.2. Slice内存技巧</span></h3><p>下面的nonempty函数将在原有slice内存空间之上返回不包含空字符串的列表</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Nonempty is an example of an in-place slice algorithm.</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// nonempty returns a slice holding only the non-empty strings.</span></span><br><span class="line"><span class="comment">// The underlying array is modified during the call.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">nonempty</span><span class="params">(strings []<span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">    i := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _, s := <span class="keyword">range</span> strings &#123;</span><br><span class="line">        <span class="keyword">if</span> s != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">            strings[i] = s</span><br><span class="line">            i++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> strings[:i]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>比较微妙的地方是，输入的slice和输出的slice共享一个底层数组。</p>
<p>这可以避免分配另一个数组，不过原来的数据将可能会被覆盖，正如下面两个打印语句看到的那样：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">data := []<span class="keyword">string</span>&#123;<span class="string">&quot;one&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;three&quot;</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%q\n&quot;</span>, nonempty(data)) <span class="comment">// `[&quot;one&quot; &quot;three&quot;]`</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%q\n&quot;</span>, data)           <span class="comment">// `[&quot;one&quot; &quot;three&quot; &quot;three&quot;]`</span></span><br></pre></td></tr></table></figure>
<p>nonempty函数也可以使用append函数实现</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">nonempty2</span><span class="params">(strings []<span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">    out := strings[:<span class="number">0</span>] <span class="comment">// zero-length slice of original</span></span><br><span class="line">    <span class="keyword">for</span> _, s := <span class="keyword">range</span> strings &#123;</span><br><span class="line">        <span class="keyword">if</span> s != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">            out = <span class="built_in">append</span>(out, s)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>无论如何实现，以这种方式重用一个slice一般都要求最多为每个输入值产生一个输出值，事实上很多这类算法都是用来过滤或合并序列中相邻的元素。</li>
<li>这种slice用法是比较复杂的技巧，虽然使用到了slice的一些技巧，但是对于某些场合是比较清晰和有效的。</li>
</ul>
<h4><span id="用slice模拟stack">用slice模拟stack</span></h4><p>一个slice可以用来模拟一个stack。</p>
<p>最初给定的空slice对应一个空的stack，然后可以使用append函数将新的值压入stack</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">stack = <span class="built_in">append</span>(stack, v) <span class="comment">// push v</span></span><br></pre></td></tr></table></figure>
<p>stack的顶部位置对应slice的最后一个元素：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">top := stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>] <span class="comment">// top of stack</span></span><br></pre></td></tr></table></figure>
<p>通过收缩stack可以弹出栈顶的元素</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">stack = stack[:<span class="built_in">len</span>(stack)<span class="number">-1</span>] <span class="comment">// pop</span></span><br></pre></td></tr></table></figure>
<h4><span id="删除slice中的元素">删除slice中的元素</span></h4><p>要删除slice中间的某个元素并保存原有的元素顺序，可以通过内置的copy函数将后面的子slice向前依次移动一位完成：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">(slice []<span class="keyword">int</span>, i <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="built_in">copy</span>(slice[i:], slice[i+<span class="number">1</span>:])</span><br><span class="line">    <span class="keyword">return</span> slice[:<span class="built_in">len</span>(slice)<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s := []<span class="keyword">int</span>&#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line">    fmt.Println(remove(s, <span class="number">2</span>)) <span class="comment">// &quot;[5 6 8 9]&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果删除元素后不用保持原来顺序的话，我们可以简单的用最后一个元素覆盖被删除的元素：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">(slice []<span class="keyword">int</span>, i <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    slice[i] = slice[<span class="built_in">len</span>(slice)<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> slice[:<span class="built_in">len</span>(slice)<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s := []<span class="keyword">int</span>&#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line">    fmt.Println(remove(s, <span class="number">2</span>)) <span class="comment">// &quot;[5 6 9 8]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4><span id="练习">练习</span></h4><p><strong>练习 4.3：</strong> 重写reverse函数，使用数组指针代替slice。</p>
<p><strong>练习 4.4：</strong> 编写一个rotate函数，通过一次循环完成旋转。</p>
<p><strong>练习 4.5：</strong> 写一个函数在原地完成消除[]string中相邻重复的字符串的操作。</p>
<p><strong>练习 4.6：</strong> 编写一个函数，原地将一个UTF-8编码的[]byte类型的slice中相邻的空格（参考unicode.IsSpace）替换成一个空格返回</p>
<p><strong>练习 4.7：</strong> 修改reverse函数用于原地反转UTF-8编码的[]byte。是否可以不用分配额外的内存？</p>
<h2><span id="43-map">4.3. Map</span></h2><ul>
<li>哈希表是一种巧妙并且实用的数据结构。</li>
<li>它是一个<strong>无序的key/value对的集合</strong>，其中所有的key都是不同的，然后通过给定的key可以在常数时间复杂度内检索、更新或删除对应的value。</li>
<li>在Go语言中，一个map就是一个哈希表的引用，map类型可以写为map[K]V，其中K和V分别对应key和value</li>
<li>map中<strong>所有的key都有相同的类型，所有的value也有着相同的类型</strong>，但是key和value之间可以是不同的数据类型<ul>
<li>key必须是支持==比较运算符的数据类型、</li>
</ul>
</li>
</ul>
<h4><span id="创建一个map">创建一个Map</span></h4><h5><span id="使用make函数">使用make函数</span></h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ages := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>) <span class="comment">// mapping from strings to ints</span></span><br></pre></td></tr></table></figure>
<h5><span id="使用map字面量可指定一些最初的keyvalue">使用map字面量，可指定一些最初的key/value</span></h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ages := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;</span><br><span class="line">    <span class="string">&quot;alice&quot;</span>:   <span class="number">31</span>,</span><br><span class="line">    <span class="string">&quot;charlie&quot;</span>: <span class="number">34</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line">ages := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line">ages[<span class="string">&quot;alice&quot;</span>] = <span class="number">31</span></span><br><span class="line">ages[<span class="string">&quot;charlie&quot;</span>] = <span class="number">34</span></span><br></pre></td></tr></table></figure>
<h5><span id="另外一种创建方法">另外一种创建方法</span></h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<h4><span id="map元素">Map元素</span></h4><h5><span id="访问">访问</span></h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ages[<span class="string">&quot;alice&quot;</span>] = <span class="number">32</span></span><br><span class="line">fmt.Println(ages[<span class="string">&quot;alice&quot;</span>]) <span class="comment">// &quot;32&quot;</span></span><br></pre></td></tr></table></figure>
<h5><span id="删除">删除</span></h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ages[<span class="string">&quot;alice&quot;</span>] = <span class="number">32</span></span><br><span class="line">fmt.Println(ages[<span class="string">&quot;alice&quot;</span>]) <span class="comment">// &quot;32&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>所有这些操作是安全的，即使<strong>这些元素不在map中也没有关系</strong></li>
<li><p>如果一个查找失败将返回value类型对应的零值</p>
</li>
<li><p><code>x += y</code>和<code>x++</code>等简短赋值语法也可以用在map上</p>
</li>
<li>map中的元素并不是一个变量，因此我们不能对map的元素进行取址操作</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">_ = &amp;ages[<span class="string">&quot;bob&quot;</span>] <span class="comment">// compile error: cannot take address of map element</span></span><br></pre></td></tr></table></figure>
<h4><span id="遍历map中所有元素">遍历map中所有元素</span></h4><h5><span id="可以使用range风格的for循环无序">可以使用range风格的for循环（无序）</span></h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> name, age := <span class="keyword">range</span> ages &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%s\t%d\n&quot;</span>, name, age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Map的迭代顺序是不确定的，并且不同的哈希函数实现可能导致不同的遍历顺序。</li>
<li>在实践中，遍历的顺序是随机的，每一次遍历的顺序都不相同。这是故意的，每次都使用随机的遍历顺序可以强制要求程序不会依赖具体的哈希函数实现。</li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go3</title>
    <url>/2021/10/04/Go3/</url>
    <content><![CDATA[<blockquote>
<p>第三章讲解了整数、浮点数、复数、布尔类型、字符串以及常量</p>
</blockquote>
<span id="more"></span>
<h2><span id="31-整型">3.1 整型</span></h2><h4><span id="有符号整数类型">有符号整数类型</span></h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">int</th>
<th style="text-align:center">int8</th>
<th style="text-align:center">int16</th>
<th style="text-align:center">int32</th>
<th style="text-align:center">int64</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">32bits/64bits</td>
<td style="text-align:center">8bits</td>
<td style="text-align:center">16bits</td>
<td style="text-align:center">32bits</td>
<td style="text-align:center">64bits</td>
</tr>
</tbody>
</table>
</div>
<h4><span id="无符号整数类型">无符号整数类型</span></h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">uint</th>
<th style="text-align:center">uint8</th>
<th style="text-align:center">uint16</th>
<th style="text-align:center">uint32</th>
<th style="text-align:center">uint64</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">32bits/64bits</td>
<td style="text-align:center">8bits</td>
<td style="text-align:center">16bits</td>
<td style="text-align:center">32bits</td>
<td style="text-align:center">64bits</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>其中<strong>int和int32也是不同的类型</strong>，即使int的大小也是32bit，在需要将int当作int32类型的地方需要一个显式的类型转换操作，反之亦然</li>
<li>Unicode字符<strong>rune类型</strong>是和int32等价的类型，通常用于表示一个Unicode码点。<ul>
<li>这两个名称可以互换使用。</li>
</ul>
</li>
<li><p><strong>byte</strong>是uint8类型的等价类型</p>
<ul>
<li>byte类型一般用于强调数值是一个原始的数据而不是一个小的整数。</li>
</ul>
</li>
<li><p>无符号的整数类型<strong>uintptr</strong>，没有指定具体的bit大小但是足以容纳指针</p>
<ul>
<li>uintptr类型只有在底层编程时才需要，特别是Go语言和C语言函数库或操作系统接口相交互的地方。</li>
<li>不管它们的具体大小，int、uint和uintptr是不同类型的兄弟类型。</li>
</ul>
</li>
</ul>
<h4><span id="二进制表示">二进制表示</span></h4><ul>
<li><p>有符号整数采用2的补码形式表示，也就是最高bit位用来表示符号位</p>
<ul>
<li>一个n-bit的有符号数的值域是从$-2^{n-1}$到$2^{n-1}-1$</li>
</ul>
</li>
<li><p>无符号整数的所有bit位都用于表示非负数</p>
<ul>
<li>值域是0到$2^n-1$</li>
</ul>
</li>
<li>例如，int8类型整数的值域是从-128到127，而uint8类型整数的值域是从0到255。</li>
</ul>
<h4><span id="算术运算-逻辑运算和比较运算的二元运算符">算术运算、逻辑运算和比较运算的二元运算符</span></h4><p>按照优先级递减的顺序排列</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211227103240466.png" alt="image-20211227103240466"></p>
<ul>
<li>二元运算符有五种优先级。</li>
<li>在同一个优先级，使用左优先结合规则</li>
<li>但是使用括号可以明确优先顺序，使用括号也可以用于提升优先级</li>
</ul>
<h4><span id="取模号和除号的特殊处">取模号和除号的特殊处</span></h4><ul>
<li>在Go语言中，%取模运算符的符号和被取模数的符号总是一致的<ul>
<li>因此<code>-5%3</code>和<code>-5%-3</code>结果都是-2。</li>
</ul>
</li>
<li>除法运算符<code>/</code>的行为则依赖于操作数是否全为整数<ul>
<li>比如<code>5.0/4.0</code>的结果是1.25，但是5/4的结果是1，因为整数除法会向着0方向截断余数。</li>
</ul>
</li>
</ul>
<h4><span id="比较表达式">比较表达式</span></h4><p>比较表达式的结果是布尔类型。</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="section">==    等于</span></span><br><span class="line">!=    不等于</span><br><span class="line">&lt;     小于</span><br><span class="line">&lt;=    小于等于</span><br><span class="line">&gt;     大于</span><br><span class="line">&gt;=    大于等于</span><br></pre></td></tr></table></figure>
<h4><span id="bit位操作运算符">bit位操作运算符</span></h4><p>前面4个操作运算符并不区分是有符号还是无符号数</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="meta">&amp;      位运算 AND</span></span><br><span class="line"><span class="string">|      位运算 OR</span></span><br><span class="line">^      位运算 XOR</span><br><span class="line"><span class="meta">&amp;^     位清空（AND NOT）</span></span><br><span class="line">&lt;&lt;     左移</span><br><span class="line">&gt;&gt;     右移</span><br></pre></td></tr></table></figure>
<ul>
<li><p>位操作运算符<code>^</code>作为二元运算符时是按位异或（XOR），当<strong>用作一元运算符时表示按位取反</strong>，也就是返回一个每个bit位都取反的数</p>
</li>
<li><p>位操作运算符<code>&amp;^</code>用于按位置零（AND NOT）</p>
<ul>
<li>如果对应y中bit位为1的话，表达式<code>z = x &amp;^ y</code>结果z的对应的bit位为0，否则z对应的bit位等于x相应的bit位的值。</li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x <span class="keyword">uint8</span> = <span class="number">1</span>&lt;&lt;<span class="number">1</span> | <span class="number">1</span>&lt;&lt;<span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> y <span class="keyword">uint8</span> = <span class="number">1</span>&lt;&lt;<span class="number">1</span> | <span class="number">1</span>&lt;&lt;<span class="number">2</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%08b\n&quot;</span>, x) <span class="comment">// &quot;00100010&quot;, the set &#123;1, 5&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%08b\n&quot;</span>, y) <span class="comment">// &quot;00000110&quot;, the set &#123;1, 2&#125;</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%08b\n&quot;</span>, x&amp;y)  <span class="comment">// &quot;00000010&quot;, the intersection &#123;1&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%08b\n&quot;</span>, x|y)  <span class="comment">// &quot;00100110&quot;, the union &#123;1, 2, 5&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%08b\n&quot;</span>, x^y)  <span class="comment">// &quot;00100100&quot;, the symmetric difference &#123;2, 5&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%08b\n&quot;</span>, x&amp;^y) <span class="comment">// &quot;00100000&quot;, the difference &#123;5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">uint</span>(<span class="number">0</span>); i &lt; <span class="number">8</span>; i++ &#123;</span><br><span class="line">    <span class="keyword">if</span> x&amp;(<span class="number">1</span>&lt;&lt;i) != <span class="number">0</span> &#123; <span class="comment">// membership test</span></span><br><span class="line">        fmt.Println(i) <span class="comment">// &quot;1&quot;, &quot;5&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%08b\n&quot;</span>, x&lt;&lt;<span class="number">1</span>) <span class="comment">// &quot;01000100&quot;, the set &#123;2, 6&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%08b\n&quot;</span>, x&gt;&gt;<span class="number">1</span>) <span class="comment">// &quot;00010001&quot;, the set &#123;0, 4&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>在<code>x&lt;&lt;n</code>和<code>x&gt;&gt;n</code>移位运算中，决定了移位操作的bit数部分必须是无符号数；被操作的x可以是有符号数或无符号数</li>
<li><p>算术上，一个<code>x&lt;&lt;n</code>左移运算等价于乘以$2^n$，一个<code>x&gt;&gt;n</code>右移运算等价于除以$2^n$。</p>
</li>
<li><p>左移运算用零填充右边空缺的bit位，无符号数的右移运算也是用0填充左边空缺的bit位，</p>
</li>
<li>但是有符号数的右移运算会用符号位的值填充左边空缺的bit位。</li>
<li>因为这个原因，最好用无符号运算，这样你可以将整数完全当作一个bit位模式处理。</li>
</ul>
<h4><span id="类型转换操作">类型转换操作</span></h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> apples <span class="keyword">int32</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> oranges <span class="keyword">int16</span> = <span class="number">2</span></span><br><span class="line"><span class="keyword">var</span> compote <span class="keyword">int</span> = apples + oranges <span class="comment">// compile error</span></span><br></pre></td></tr></table></figure>
<p>当尝试编译这三个语句时，将产生一个错误信息：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">invalid operation: apples + oranges (mismatched types <span class="built_in">int</span>32 <span class="keyword">and</span> <span class="built_in">int</span>16)</span><br></pre></td></tr></table></figure>
<p>常见方法</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> compote = <span class="keyword">int</span>(apples) + <span class="keyword">int</span>(oranges)</span><br></pre></td></tr></table></figure>
<ul>
<li>如果转换允许的话，类型转换操作T(x)将x转换为T类型。</li>
<li>许多整数之间的相互转换并不会改变数值；它们只是告诉编译器如何解释这个值。</li>
<li>但是对于将一个大尺寸的整数类型转为一个小尺寸的整数类型，或者是将一个浮点数转为整数，可能会改变数值或丢失精度</li>
</ul>
<h4><span id="八进制或十六进制">八进制或十六进制</span></h4><ul>
<li>任何大小的整数字面值都可以用以0开始的八进制格式书写，例如0666；</li>
<li>或用以0x或0X开头的十六进制格式书写，例如0xdeadbeef<ul>
<li>十六进制数字可以用大写或小写字母。</li>
</ul>
</li>
<li>如今八进制数据通常用于POSIX操作系统上的文件访问权限标志，十六进制数字则更强调数字值的bit位模式。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">o := <span class="number">0666</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%d %[1]o %#[1]o\n&quot;</span>, o) <span class="comment">// &quot;438 666 0666&quot;</span></span><br><span class="line">x := <span class="keyword">int64</span>(<span class="number">0xdeadbeef</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d %[1]x %#[1]x %#[1]X\n&quot;</span>, x)</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// 3735928559 deadbeef 0xdeadbeef 0XDEADBEEF</span></span><br></pre></td></tr></table></figure>
<ul>
<li>fmt的两个使用技巧<ul>
<li>通常Printf格式化字符串包含多个%参数时将会包含对应相同数量的额外操作数，但是%之后的<code>[1]</code>副词告诉Printf函数再次使用第一个操作数</li>
<li>第二，%后的<code>#</code>副词告诉Printf在用%o、%x或%X输出时生成0、0x或0X前缀。</li>
</ul>
</li>
</ul>
<p>字符使用<code>%c</code>参数打印，或者是用<code>%q</code>参数打印带单引号的字符</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ascii := <span class="string">&#x27;a&#x27;</span></span><br><span class="line">unicode := <span class="string">&#x27;国&#x27;</span></span><br><span class="line">newline := <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%d %[1]c %[1]q\n&quot;</span>, ascii)   <span class="comment">// &quot;97 a &#x27;a&#x27;&quot;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%d %[1]c %[1]q\n&quot;</span>, unicode) <span class="comment">// &quot;22269 国 &#x27;国&#x27;&quot;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%d %[1]q\n&quot;</span>, newline)       <span class="comment">// &quot;10 &#x27;\n&#x27;&quot;</span></span><br></pre></td></tr></table></figure>
<h2><span id="32-浮点数">3.2. 浮点数</span></h2><ul>
<li>Go语言提供了两种精度的浮点数<ul>
<li>float32和float64</li>
</ul>
</li>
</ul>
<h4><span id="浮点数的极值">浮点数的极值</span></h4><ul>
<li>浮点数的范围极限值可以在math包找到<ul>
<li>常量math.MaxFloat32表示float32能表示的最大数值，大约是 3.4e38</li>
<li>对应的math.MaxFloat64常量大约是1.8e308。</li>
<li>它们分别能表示的最小值近似为1.4e-45和4.9e-324。</li>
</ul>
</li>
</ul>
<h4><span id="浮点数的精度">浮点数的精度</span></h4><ul>
<li>一个float32类型的浮点数可以提供大约6个十进制数的精度，而float64则可以提供约15个十进制数的精度</li>
<li>通常应该优先使用float64类型<ul>
<li>因为float32类型的累计计算误差很容易扩散，并且float32能精确表示的正整数并不是很大</li>
<li>因为float32的有效bit位只有23个，其它的bit位用于指数和符号；当整数大于23bit能表达的范围时，float32的表示将出现误差</li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f <span class="keyword">float32</span> = <span class="number">16777216</span> <span class="comment">// 1 &lt;&lt; 24</span></span><br><span class="line">fmt.Println(f == f+<span class="number">1</span>)    <span class="comment">// &quot;true&quot;!</span></span><br></pre></td></tr></table></figure>
<h4><span id="小数">小数</span></h4><ul>
<li>浮点数的字面值可以直接写小数部分</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> e = <span class="number">2.71828</span> <span class="comment">// (approximately)</span></span><br></pre></td></tr></table></figure>
<ul>
<li>小数点前面或后面的数字都可能被省略（例如.707或1.）<ul>
<li>很小或很大的数最好用科学计数法书写，通过e或E来指定指数部分</li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Avogadro = <span class="number">6.02214129e23</span>  <span class="comment">// 阿伏伽德罗常数</span></span><br><span class="line"><span class="keyword">const</span> Planck   = <span class="number">6.62606957e-34</span> <span class="comment">// 普朗克常数</span></span><br></pre></td></tr></table></figure>
<h4><span id="打印">打印</span></h4><ul>
<li>用Printf函数的<strong>%g参数打印浮点数</strong>，将采用更紧凑的表示形式打印，并提供足够的精度</li>
<li>对应表格的数据，使用<strong>%e（带指数）</strong>或<strong>%f</strong>的形式打印可能更合适</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> x := <span class="number">0</span>; x &lt; <span class="number">8</span>; x++ &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;x = %d e^x = %8.3f\n&quot;</span>, x, math.Exp(<span class="keyword">float64</span>(x)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">x</span> = <span class="number">0</span>       e^x =    <span class="number">1</span>.<span class="number">000</span></span><br><span class="line"><span class="attribute">x</span> = <span class="number">1</span>       e^x =    <span class="number">2</span>.<span class="number">718</span></span><br><span class="line"><span class="attribute">x</span> = <span class="number">2</span>       e^x =    <span class="number">7</span>.<span class="number">389</span></span><br><span class="line"><span class="attribute">x</span> = <span class="number">3</span>       e^x =   <span class="number">20</span>.<span class="number">086</span></span><br><span class="line"><span class="attribute">x</span> = <span class="number">4</span>       e^x =   <span class="number">54</span>.<span class="number">598</span></span><br><span class="line"><span class="attribute">x</span> = <span class="number">5</span>       e^x =  <span class="number">148</span>.<span class="number">413</span></span><br><span class="line"><span class="attribute">x</span> = <span class="number">6</span>       e^x =  <span class="number">403</span>.<span class="number">429</span></span><br><span class="line"><span class="attribute">x</span> = <span class="number">7</span>       e^x = <span class="number">1096</span>.<span class="number">633</span></span><br></pre></td></tr></table></figure>
<h4><span id="正无穷大和负无穷大">正无穷大和负无穷大</span></h4><ul>
<li>正无穷大和负无穷大，分别用于表示太大溢出的数字和除零的结果；</li>
<li><p>还有NaN非数，一般用于表示无效的除法操作结果0/0或Sqrt(-1).</p>
</li>
<li><p>函数math.IsNaN用于测试一个数是否是非数NaN，math.NaN则返回非数对应的值。</p>
<ul>
<li>虽然可以用math.NaN来表示一个非法的结果，但是测试一个结果是否是非数NaN则是充满风险的，因为<strong>NaN和任何数都是不相等的</strong></li>
<li><strong>在浮点数中，NaN、正无穷大和负无穷大都不是唯一的，每个都有非常多种的bit模式表示</strong></li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">nan := math.NaN()</span><br><span class="line">fmt.Println(nan == nan, nan &lt; nan, nan &gt; nan) <span class="comment">// &quot;false false false&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>如果一个函数返回的浮点数结果可能失败，最好的做法是用单独的标志报告失败</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">compute</span><span class="params">()</span> <span class="params">(value <span class="keyword">float64</span>, ok <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">if</span> failed &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result, <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="33-复数">3.3. 复数</span></h2><ul>
<li>Go语言提供了两种精度的复数类型：<ul>
<li>complex64和complex128</li>
<li>分别对应float32和float64两种浮点数精度</li>
</ul>
</li>
</ul>
<h4><span id="构建复数">构建复数</span></h4><ul>
<li>内置的complex函数用于构建复数，内建的real和imag函数分别返回复数的实部和虚部</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x <span class="keyword">complex128</span> = <span class="built_in">complex</span>(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// 1+2i</span></span><br><span class="line"><span class="keyword">var</span> y <span class="keyword">complex128</span> = <span class="built_in">complex</span>(<span class="number">3</span>, <span class="number">4</span>) <span class="comment">// 3+4i</span></span><br><span class="line">fmt.Println(x*y)                 <span class="comment">// &quot;(-5+10i)&quot;</span></span><br><span class="line">fmt.Println(<span class="built_in">real</span>(x*y))           <span class="comment">// &quot;-5&quot;</span></span><br><span class="line">fmt.Println(<span class="built_in">imag</span>(x*y))           <span class="comment">// &quot;10&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>如果一个浮点数面值或一个十进制整数面值后面跟着一个i，它将构成一个复数的虚部，复数的实部是0<ul>
<li>例如3.141592i或2i</li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Println(<span class="number">1i</span> * <span class="number">1i</span>) <span class="comment">// &quot;(-1+0i)&quot;, i^2 = -1</span></span><br></pre></td></tr></table></figure>
<ul>
<li>x和y的声明语句还可以简化（用自然方法书写）</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">x := <span class="number">1</span> + <span class="number">2i</span></span><br><span class="line">y := <span class="number">3</span> + <span class="number">4i</span></span><br></pre></td></tr></table></figure>
<h4><span id="复数的比较">复数的比较</span></h4><ul>
<li>复数也可以用==和!=进行相等比较。<ul>
<li>只有两个复数的实部和虚部都相等的时候它们才是相等的</li>
</ul>
</li>
</ul>
<h4><span id="复数的处理方法">复数的处理方法</span></h4><ul>
<li>math/cmplx包提供了复数处理的许多函数，例如求复数的平方根函数和求幂函数。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Println(cmplx.Sqrt(<span class="number">-1</span>)) <span class="comment">// &quot;(0+1i)&quot;</span></span><br></pre></td></tr></table></figure>
<h2><span id="34-布尔型">3.4. 布尔型</span></h2><ul>
<li><p>一个布尔类型的值只有两种：true和false。</p>
</li>
<li><p>if和for语句的条件部分都是布尔类型的值，并且==和&lt;等比较操作也会产生布尔型的值。</p>
</li>
<li>一元操作符<code>!</code>对应逻辑非操作，因此<code>!true</code>的值为<code>false</code></li>
</ul>
<h4><span id="和-或">和、或</span></h4><ul>
<li>布尔值可以和&amp;&amp;（AND）和||（OR）操作符结合<ul>
<li>并且有短路行为：如果运算符左边值已经可以确定整个布尔表达式的值，那么运算符右边的值将不再被求值</li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s != <span class="string">&quot;&quot;</span> &amp;&amp; s[<span class="number">0</span>] == <span class="string">&#x27;x&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p><code>&amp;&amp;</code>的优先级比<code>||</code>高</p>
</li>
<li><p><strong>布尔值并不会隐式转换为数字值0或1</strong>，<strong>反之亦然</strong>。必须使用一个显式的if语句辅助转换</p>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">i := <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> b &#123;</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>包装成一个函数</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// btoi returns 1 if b is true and 0 if false.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">btoi</span><span class="params">(b <span class="keyword">bool</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> b &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>数字到布尔型的逆转换</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// itob reports whether i is non-zero.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">itob</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> i != <span class="number">0</span> &#125;</span><br></pre></td></tr></table></figure>
<h2><span id="35-字符串">3.5. 字符串</span></h2><ul>
<li><p>一个字符串是一个<strong>不可改变的字节序列</strong>。</p>
</li>
<li><p>字符串可以包含任意的数据，包括byte值0，但是通常是用来包含人类可读的文本。</p>
</li>
<li>文本字符串通常被解释为采用UTF8编码的Unicode码点（rune）序列</li>
</ul>
<h4><span id="字符串长度和索引">字符串长度和索引</span></h4><ul>
<li>内置的len函数可以返回一个字符串中的字节数目（不是rune字符数目）</li>
<li>索引操作s[i]返回第i个字节的字节值，i必须满足0 ≤ i&lt; len(s)条件约束。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := <span class="string">&quot;hello, world&quot;</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s))     <span class="comment">// &quot;12&quot;</span></span><br><span class="line">fmt.Println(s[<span class="number">0</span>], s[<span class="number">7</span>]) <span class="comment">// &quot;104 119&quot; (&#x27;h&#x27; and &#x27;w&#x27;)</span></span><br></pre></td></tr></table></figure>
<ul>
<li>试图访问超出字符串索引范围的字节将会导致panic异常</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">c := s[<span class="built_in">len</span>(s)] <span class="comment">// panic: index out of range</span></span><br></pre></td></tr></table></figure>
<h4><span id="字节和字符">字节和字符</span></h4><ul>
<li><strong>第i个字节并不一定是字符串的第i个字符</strong><ul>
<li>因为对于非ASCII字符的UTF8编码会要两个或多个字节</li>
</ul>
</li>
<li><strong>子字符串操作s[i:j]</strong>基于原始的s字符串的<strong>第i个字节开始到第j个字节</strong>（并不包含j本身）生成一个新字符串<ul>
<li>生成的新字符串将包含j-i个字节</li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Println(s[<span class="number">0</span>:<span class="number">5</span>]) <span class="comment">// &quot;hello&quot;</span></span><br></pre></td></tr></table></figure>
<h4><span id="索引起始和终结">索引起始和终结</span></h4><p>不管i还是j都可能被忽略，当它们被忽略时将采用0作为开始位置，采用len(s)作为结束的位置。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Println(s[:<span class="number">5</span>]) <span class="comment">// &quot;hello&quot;</span></span><br><span class="line">fmt.Println(s[<span class="number">7</span>:]) <span class="comment">// &quot;world&quot;</span></span><br><span class="line">fmt.Println(s[:])  <span class="comment">// &quot;hello, world&quot;</span></span><br></pre></td></tr></table></figure>
<h4><span id="拼接-比较字符串">拼接、比较字符串</span></h4><ul>
<li>+操作符将两个字符串连接构造一个新字符串</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Println(<span class="string">&quot;goodbye&quot;</span> + s[<span class="number">5</span>:]) <span class="comment">// &quot;goodbye, world&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>字符串可以用==和&lt;进行比较；比较通过逐个字节比较完成的，因此比较的结果是字符串自然编码的顺序。</li>
</ul>
<h4><span id="字符串的不变形">字符串的不变形</span></h4><p>字符串的值是不可变的：一个字符串包含的字节序列永远不会被改变，当然我们也可以给一个字符串变量分配一个新字符串值</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := <span class="string">&quot;left foot&quot;</span></span><br><span class="line">t := s</span><br><span class="line">s += <span class="string">&quot;, right foot&quot;</span></span><br></pre></td></tr></table></figure>
<p>这并不会导致原始的字符串值被改变，但是变量s将因为+=语句持有一个新的字符串值，但是t依然是包含原先的字符串值。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Println(s) <span class="comment">// &quot;left foot, right foot&quot;</span></span><br><span class="line">fmt.Println(t) <span class="comment">// &quot;left foot&quot;</span></span><br></pre></td></tr></table></figure>
<p>因为字符串是不可修改的，因此<strong>尝试修改字符串内部数据的操作也是被禁止的</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s[<span class="number">0</span>] = <span class="string">&#x27;L&#x27;</span> <span class="comment">// compile error: cannot assign to s[0]</span></span><br></pre></td></tr></table></figure>
<p>不变性意味着如果两个字符串共享相同的底层数据的话也是安全的，这使得复制任何长度的字符串代价是低廉的。</p>
<h3><span id="351-字符串面值">3.5.1. 字符串面值</span></h3><ul>
<li>字符串值也可以用字符串面值方式编写，只要将一系列字节序列包含在双引号内即可</li>
<li>因为<strong>Go语言源文件总是用UTF8编码</strong>，并且<strong>Go语言的文本字符串也以UTF8编码的方式处理</strong>，因此我们可以将Unicode码点也写到字符串面值中。</li>
</ul>
<h4><span id="转义字符">转义字符</span></h4><p>在一个双引号包含的字符串面值中，可以用以反斜杠<code>\</code>开头的转义序列插入任意的数据。</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="string">\a</span>      响铃</span><br><span class="line"><span class="string">\b</span>      退格</span><br><span class="line"><span class="string">\f</span>      换页</span><br><span class="line"><span class="string">\n</span>      换行</span><br><span class="line"><span class="string">\r</span>      回车</span><br><span class="line"><span class="string">\t</span>      制表符</span><br><span class="line"><span class="string">\v</span>      垂直制表符</span><br><span class="line"><span class="string">\&#x27;</span>      单引号（只用在 <span class="string">&#x27;\&#x27;&#x27;</span> 形式的rune符号面值中）</span><br><span class="line"><span class="string">\&quot;</span>      双引号（只用在 <span class="string">&quot;...&quot;</span> 形式的字符串面值中）</span><br><span class="line"><span class="string">\\</span>      反斜杠</span><br></pre></td></tr></table></figure>
<ul>
<li>通过十六进制或八进制转义在字符串面值中包含任意的字节。<ul>
<li>一个十六进制的转义形式是<code>\xhh</code>，其中两个h表示十六进制数字（大写或小写都可以）。</li>
<li>一个八进制转义形式是<code>\ooo</code>，包含三个八进制的o数字（0到7），但是不能超过<code>\377</code><ul>
<li>对应一个字节的范围，十进制为255</li>
</ul>
</li>
<li>每一个单一的字节表达一个特定的值。</li>
</ul>
</li>
</ul>
<h4><span id="原生的字符串">原生的字符串</span></h4><ul>
<li>一个原生的字符串面值形式是<img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202112281500837.png" alt="image-20211228150041644">，使用反引号代替双引号。</li>
<li>在原生的字符串面值中，没有转义操作</li>
<li>全部的内容都是字面的意思，包含退格和换行,因此一个程序中的原生字符串面值可能跨越多行<ul>
<li>在原生字符串面值内部是无法直接写`字符的，可以用八进制或十六进制转义或+”`”连接字符串常量完成</li>
</ul>
</li>
<li>唯一的特殊处理是会删除回车以保证在所有平台上的值都是一样的，包括那些把回车也放入文本文件的系统<ul>
<li>Windows系统会把回车和换行一起放入文本文件中</li>
</ul>
</li>
<li>原生字符串面值用于编写正则表达式会很方便，因为正则表达式往往会包含很多反斜杠</li>
<li>原生字符串面值同时被广泛应用于HTML模板、JSON面值、命令行提示信息以及那些需要扩展到多行的场景。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> GoUsage = <span class="string">`Go is a tool for managing Go source code.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Usage:</span></span><br><span class="line"><span class="string">    go command [arguments]</span></span><br><span class="line"><span class="string">...`</span></span><br></pre></td></tr></table></figure>
<h3><span id="352-unicode">3.5.2. Unicode</span></h3><h4><span id="ascii字符集美国信息交换标准代码">ASCII字符集：美国信息交换标准代码。</span></h4><ul>
<li>ASCII，更准确地说是美国的ASCII</li>
<li>使用7bit来表示128个字符：包含英文字母的大小写、数字、各种标点符号和设备控制符。</li>
</ul>
<h4><span id="unicode">Unicode</span></h4><ul>
<li>收集了这个世界上所有的符号系统，<ul>
<li>包括重音符号和其它变音符号，制表符和回车符</li>
<li>还有很多神秘的符号</li>
</ul>
</li>
<li>每个符号都分配一个唯一的Unicode码点</li>
<li><p>Unicode码点对应Go语言中的rune整数类型（rune是int32等价类型）</p>
</li>
<li><p>通用的表示一个Unicode码点的数据类型是int32，也就是Go语言中rune对应的类型</p>
</li>
<li><p>将一个符文序列表示为一个int32序列。</p>
<ul>
<li>这种编码方式叫UTF-32或UCS-4，每个Unicode码点都使用同样大小的32bit来表示</li>
<li><strong>这种方式比较简单统一，但是它会浪费很多存储空间</strong><ul>
<li>因为大多数计算机可读的文本是ASCII字符，本来每个ASCII字符只需要8bit或1字节就能表示</li>
<li>而且即使是常用的字符也远少于65,536个，也就是说用16bit编码方式就能表达常用字符。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3><span id="353-utf-8">3.5.3. UTF-8</span></h3><ul>
<li>UTF8是一个将Unicode码点编码为字节序列的<strong>变长编码</strong>。</li>
<li>UTF8编码使用1到4个字节来表示每个Unicode码点<ul>
<li>ASCII部分字符只使用1个字节</li>
<li>常用字符部分使用2或3个字节表示。</li>
</ul>
</li>
<li>每个符号编码后第一个字节的高端bit位用于表示编码总共有多少个字节。<ul>
<li>如果第一个字节的高端bit为0，则表示对应7bit的ASCII字符，ASCII字符每个字符依然是一个字节，和传统的ASCII编码兼容</li>
<li>如果第一个字节的高端bit是110，则说明需要2个字节；后续的每个高端bit都以10开头。</li>
<li>更大的Unicode码点也是采用类似的策略处理。</li>
</ul>
</li>
</ul>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">0xxxxxxx</span>                             runes <span class="number">0</span>-<span class="number">127</span>    (ASCII)</span><br><span class="line"><span class="attribute">110xxxxx</span> <span class="number">10</span>xxxxxx                    <span class="number">128</span>-<span class="number">2047</span>       (values &lt;<span class="number">128</span> unused)</span><br><span class="line"><span class="attribute">1110xxxx</span> <span class="number">10</span>xxxxxx <span class="number">10</span>xxxxxx           <span class="number">2048</span>-<span class="number">65535</span>     (values &lt;<span class="number">2048</span> unused)</span><br><span class="line"><span class="attribute">11110xxx</span> <span class="number">10</span>xxxxxx <span class="number">10</span>xxxxxx <span class="number">10</span>xxxxxx  <span class="number">65536</span>-<span class="number">0</span>x<span class="number">10</span>ffff (other values unused)</span><br></pre></td></tr></table></figure>
<h4><span id="优点">优点</span></h4><ul>
<li>变长的编码无法直接通过索引来访问第n个字符，但是UTF8编码获得了很多额外的优点。<ol>
<li>UTF8编码比较紧凑，完全兼容ASCII码，并且可以自动同步<ul>
<li>可以通过<strong>向前回朔最多3个字节</strong>就能确定当前字符编码的开始字节的位置</li>
</ul>
</li>
<li>也是一个<strong>前缀编码</strong>，所以当从左向右解码时不会有任何歧义也并不需要向前查看<ul>
<li>像GBK之类的编码，如果不知道起点位置则可能会出现歧义</li>
</ul>
</li>
<li>没有任何字符的编码是其它字符编码的子串，或是其它编码序列的字串<ul>
<li>搜索一个字符时只要搜索它的字节编码序列即可，不用担心前后的上下文会对搜索结果产生干扰</li>
</ul>
</li>
<li>UTF8编码的顺序和Unicode码点的顺序一致<ul>
<li>可以直接排序UTF8编码序列</li>
</ul>
</li>
<li>没有嵌入的NUL(0)字节<ul>
<li>很好地兼容那些使用NUL作为字符串结尾的编程语言。</li>
</ul>
</li>
</ol>
</li>
</ul>
<h4><span id="go语言中的utf8">Go语言中的UTF8</span></h4><ul>
<li>Go语言的源文件采用UTF8编码，并且Go语言处理UTF8编码的文本也很出色<ul>
<li>unicode包提供了诸多处理rune字符相关功能的函数（比如区分字母和数字，或者是字母的大写和小写转换等）</li>
<li>unicode/utf8包则提供了用于rune字符序列的UTF8编码和解码的功能</li>
</ul>
</li>
</ul>
<p>有很多Unicode字符很难直接从键盘输入，并且还有很多字符有着相似的结构；有一些甚至是不可见的字符</p>
<ul>
<li>Go语言字符串面值中的Unicode转义字符让我们可以通过Unicode码点输入特殊的字符。有两种形式<ul>
<li><code>\uhhhh</code>对应16bit的码点值</li>
<li><code>\Uhhhhhhhh</code>对应32bit的码点值<ul>
<li>其中h是一个十六进制数字</li>
<li>一般很少需要使用32bit的形式。</li>
<li>每一个对应码点的UTF8编码。</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">&quot;世界&quot;</span><br><span class="line">&quot;<span class="symbol">\x</span>e4<span class="symbol">\x</span>b8<span class="symbol">\x</span>96<span class="symbol">\x</span>e7<span class="symbol">\x</span>95<span class="symbol">\x</span>8c&quot;</span><br><span class="line">&quot;<span class="symbol">\u</span>4e16<span class="symbol">\u</span>754c&quot;</span><br><span class="line">&quot;<span class="symbol">\U</span>00004e16<span class="symbol">\U</span>0000754c&quot;</span><br></pre></td></tr></table></figure>
<p>上面三个转义序列都为第一个字符串提供替代写法，但是它们的值都是相同的。</p>
<p>Unicode转义也可以<strong>使用在rune字符</strong>中。下面三个字符是等价的：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">&#x27;世&#x27; &#x27;\u4e16&#x27; &#x27;\U<span class="number">0000</span>4e16&#x27;</span><br></pre></td></tr></table></figure>
<ul>
<li>对于小于256的码点值可以写在一个十六进制转义字节中<ul>
<li>例如<code>\x41</code>对应字符’A’</li>
</ul>
</li>
<li><p>但是对于更大的码点则必须使用<code>\u</code>或<code>\U</code>转义形式</p>
</li>
<li><p>因此，<code>\xe4\xb8\x96</code>并不是一个合法的rune字符，虽然这三个字节对应一个有效的UTF8编码的码点</p>
</li>
<li><p>得益于UTF8编码优良的设计，诸多字符串操作都不需要解码操作</p>
</li>
</ul>
<h4><span id="例子查看字节数">例子：查看字节数</span></h4><p>字符串包含13个字节，以UTF8形式编码，但是只对应9个Unicode字符</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;unicode/utf8&quot;</span></span><br><span class="line"></span><br><span class="line">s := <span class="string">&quot;Hello, 世界&quot;</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s))                    <span class="comment">// &quot;13&quot;</span></span><br><span class="line">fmt.Println(utf8.RuneCountInString(s)) <span class="comment">// &quot;9&quot;</span></span><br></pre></td></tr></table></figure>
<p>为了处理这些真实的字符，我们需要一个UTF8解码器。unicode/utf8包提供了该功能，我们可以这样使用：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); &#123;</span><br><span class="line">    r, size := utf8.DecodeRuneInString(s[i:])</span><br><span class="line">    i += size</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%d\t%c\n&quot;</span>, i, r)</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1</span>	H</span><br><span class="line"><span class="number">2</span>	e</span><br><span class="line"><span class="number">3</span>	l</span><br><span class="line"><span class="number">4</span>	l</span><br><span class="line"><span class="number">5</span>	o</span><br><span class="line"><span class="number">6</span>	,</span><br><span class="line"><span class="number">7</span>	 </span><br><span class="line"><span class="number">10</span>	世</span><br><span class="line"><span class="number">13</span>	界</span><br></pre></td></tr></table></figure>
<ul>
<li>每一次调用DecodeRuneInString函数都返回一个r和长度，r对应字符本身，长度对应r采用UTF8编码后的编码字节数目。</li>
<li>长度可以用于更新第i个字符在字符串中的字节索引位置。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202112281558742.png" alt="image-20211228155852586"></p>
<p>简洁写法</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i, r := <span class="keyword">range</span> <span class="string">&quot;Hello, 世界&quot;</span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%d\t%q\t%d\n&quot;</span>, i, r, r)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">0</span>	<span class="string">&#x27;H&#x27;</span>	<span class="number">72</span></span><br><span class="line"><span class="number">1</span>	<span class="string">&#x27;e&#x27;</span>	<span class="number">101</span></span><br><span class="line"><span class="number">2</span>	<span class="string">&#x27;l&#x27;</span>	<span class="number">108</span></span><br><span class="line"><span class="number">3</span>	<span class="string">&#x27;l&#x27;</span>	<span class="number">108</span></span><br><span class="line"><span class="number">4</span>	<span class="string">&#x27;o&#x27;</span>	<span class="number">111</span></span><br><span class="line"><span class="number">5</span>	<span class="string">&#x27;,&#x27;</span>	<span class="number">44</span></span><br><span class="line"><span class="number">6</span>	<span class="string">&#x27; &#x27;</span>	<span class="number">32</span></span><br><span class="line"><span class="number">7</span>	<span class="string">&#x27;世&#x27;</span>	<span class="number">19990</span></span><br><span class="line"><span class="number">10</span>	<span class="string">&#x27;界&#x27;</span>	<span class="number">30028</span></span><br></pre></td></tr></table></figure>
<p>统计字符数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">n := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _, _ = <span class="keyword">range</span> s &#123;</span><br><span class="line">    n++</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">range</span> s &#123;</span><br><span class="line">    n++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>每一个UTF8字符解码，不管是显式地调用utf8.DecodeRuneInString解码或是在range循环中隐式地解码，</p>
</li>
<li><p>如果遇到一个错误的UTF8编码输入，将生成一个特别的Unicode字符<code>\uFFFD</code></p>
<ul>
<li><p>在印刷中这个符号通常是一个黑色六角或钻石形状，里面包含一个白色的问号”?”。<img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202112281611951.png" alt="image-20211228161106796"></p>
</li>
<li><p>当程序遇到这样的一个字符，通常是一个危险信号，说明输入并不是一个完美没有错误的UTF8字符串</p>
</li>
</ul>
</li>
<li><p>UTF8字符串作为交换格式是非常方便的，但是在程序内部采用rune序列可能更方便，因为rune大小一致，支持数组索引和方便切割。</p>
</li>
<li><p>将[]rune类型转换应用到UTF8编码的字符串，将返回字符串编码的Unicode码点序列</p>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &quot;program&quot; in Japanese katakana</span></span><br><span class="line">s := <span class="string">&quot;プログラム&quot;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;% x\n&quot;</span>, s) <span class="comment">// &quot;e3 83 97 e3 83 ad e3 82 b0 e3 83 a9 e3 83 a0&quot;</span></span><br><span class="line">r := []<span class="keyword">rune</span>(s)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%x\n&quot;</span>, r)  <span class="comment">// &quot;[30d7 30ed 30b0 30e9 30e0]&quot;</span></span><br></pre></td></tr></table></figure>
<p>在第一个Printf中的<code>% x</code>参数用于在每个十六进制数字前插入一个空格。</p>
<ul>
<li>如果是将一个[]rune类型的Unicode字符slice或数组转为string，则对它们进行UTF8编码：</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Println(<span class="keyword">string</span>(r)) <span class="comment">// &quot;プログラム&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>将一个整数转型为字符串意思是生成以只包含对应Unicode码点字符的UTF8字符串</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Println(<span class="keyword">string</span>(<span class="number">65</span>))     <span class="comment">// &quot;A&quot;, not &quot;65&quot;</span></span><br><span class="line">fmt.Println(<span class="keyword">string</span>(<span class="number">0x4eac</span>)) <span class="comment">// &quot;京&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>如果对应码点的字符是无效的，则用<code>\uFFFD</code>无效字符作为替换</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Println(<span class="keyword">string</span>(<span class="number">1234567</span>)) <span class="comment">// &quot;?&quot;</span></span><br></pre></td></tr></table></figure>
<h3><span id="354-字符串和byte切片">3.5.4. 字符串和Byte切片</span></h3><p>标准库中有四个包对字符串处理尤为重要</p>
<ul>
<li>bytes</li>
<li>strings</li>
<li>strconv</li>
<li>unicode</li>
</ul>
<h4><span id="4个包的功能">4个包的功能</span></h4><ul>
<li><p>strings包提供了许多如字符串的查询、替换、比较、截断、拆分和合并等功能。</p>
<ul>
<li>ToUpper和ToLower，将原始字符串的每个字符都做相应的转换，然后返回新的字符串。</li>
</ul>
</li>
<li><p>bytes包也提供了很多类似功能的函数，但是针对和字符串有着相同结构的[]byte类型</p>
<ul>
<li>因为字符串是只读的，因此逐步构建字符串会导致很多分配和复制</li>
<li>这种情况下，使用bytes.Buffer类型将会更有效</li>
</ul>
</li>
<li>strconv包提供了布尔型、整型数、浮点数和对应字符串的相互转换，还提供了双引号转义相关的转换。</li>
<li>unicode包提供了IsDigit、IsLetter、IsUpper和IsLower等类似功能，它们用于给字符分类<ul>
<li>每个函数有一个单一的rune类型的参数，然后返回一个布尔值。</li>
<li>像ToUpper和ToLower之类的转换函数将用于rune字符的大小写转换。</li>
<li>所有的这些函数都是遵循Unicode标准定义的字母、数字等分类规范。</li>
</ul>
</li>
</ul>
<h4><span id="实现basename">实现basename</span></h4><p>basename(s)将看起来像是系统路径的前缀删除，同时将看似文件类型的后缀名部分删除</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Println(basename(<span class="string">&quot;a/b/c.go&quot;</span>)) <span class="comment">// &quot;c&quot;</span></span><br><span class="line">fmt.Println(basename(<span class="string">&quot;c.d.go&quot;</span>))   <span class="comment">// &quot;c.d&quot;</span></span><br><span class="line">fmt.Println(basename(<span class="string">&quot;abc&quot;</span>))      <span class="comment">// &quot;abc&quot;</span></span><br></pre></td></tr></table></figure>
<h5><span id="手工实现">手工实现</span></h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// e.g., a =&gt; a, a.go =&gt; a, a/b/c.go =&gt; c, a/b.c.go =&gt; b.c</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">basename</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="comment">// Discard last &#x27;/&#x27; and everything before.</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="built_in">len</span>(s) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">        <span class="keyword">if</span> s[i] == <span class="string">&#x27;/&#x27;</span> &#123;</span><br><span class="line">            s = s[i+<span class="number">1</span>:]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Preserve everything before last &#x27;.&#x27;.</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="built_in">len</span>(s) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">        <span class="keyword">if</span> s[i] == <span class="string">&#x27;.&#x27;</span> &#123;</span><br><span class="line">            s = s[:i]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5><span id="使用stringslastindex库函数">使用strings.LastIndex库函数</span></h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">basename</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    slash := strings.LastIndex(s, <span class="string">&quot;/&quot;</span>) <span class="comment">// -1 if &quot;/&quot; not found</span></span><br><span class="line">    s = s[slash+<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">if</span> dot := strings.LastIndex(s, <span class="string">&quot;.&quot;</span>); dot &gt;= <span class="number">0</span> &#123;</span><br><span class="line">        s = s[:dot]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4><span id="实现数字分隔">实现数字分隔</span></h4><p>函数的功能是将一个表示整数值的字符串，每隔三个字符插入一个逗号分隔符，例如“12345”处理后成为“12,345”。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// comma inserts commas in a non-negative decimal integer string.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">comma</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(s)</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">3</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> comma(s[:n<span class="number">-3</span>]) + <span class="string">&quot;,&quot;</span> + s[n<span class="number">-3</span>:]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>输入comma函数的参数是一个字符串。如果输入字符串的长度小于或等于3的话，则不需要插入逗号分隔符。</li>
<li>否则，comma函数将在最后三个字符前的位置将字符串切割为两个子串并插入逗号分隔符，然后通过递归调用自身来得出前面的子串。</li>
</ul>
<h4><span id="字符串和字节slice">字符串和字节slice</span></h4><ul>
<li>一个字符串是包含只读字节的数组，一旦创建，是不可变的。</li>
<li>相比之下，一个字节slice的元素则可以自由地修改。</li>
</ul>
<p>字符串和字节slice之间可以相互转换</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := <span class="string">&quot;abc&quot;</span></span><br><span class="line">b := []<span class="keyword">byte</span>(s)</span><br><span class="line">s2 := <span class="keyword">string</span>(b)</span><br></pre></td></tr></table></figure>
<ul>
<li>从概念上讲，一个[]byte(s)转换是分配了一个新的字节数组用于保存字符串数据的拷贝，然后引用这个底层的字节数组</li>
<li>编译器的优化可以避免在一些场景下分配和复制字符串数据，但总的来说需要确保在变量b被修改的情况下，原始的s字符串也不会改变</li>
<li>将一个字节slice转换到字符串的string(b)操作则是构造一个字符串拷贝，以确保s2字符串是只读的。</li>
</ul>
<p>为了避免转换中不必要的内存分配，bytes包和strings同时提供了许多实用函数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// strings包</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Contains</span><span class="params">(s, substr <span class="keyword">string</span>)</span> <span class="title">bool</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Count</span><span class="params">(s, sep <span class="keyword">string</span>)</span> <span class="title">int</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fields</span><span class="params">(s <span class="keyword">string</span>)</span> []<span class="title">string</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HasPrefix</span><span class="params">(s, prefix <span class="keyword">string</span>)</span> <span class="title">bool</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Index</span><span class="params">(s, sep <span class="keyword">string</span>)</span> <span class="title">int</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Join</span><span class="params">(a []<span class="keyword">string</span>, sep <span class="keyword">string</span>)</span> <span class="title">string</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bytes包</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Contains</span><span class="params">(b, subslice []<span class="keyword">byte</span>)</span> <span class="title">bool</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Count</span><span class="params">(s, sep []<span class="keyword">byte</span>)</span> <span class="title">int</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fields</span><span class="params">(s []<span class="keyword">byte</span>)</span> [][]<span class="title">byte</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HasPrefix</span><span class="params">(s, prefix []<span class="keyword">byte</span>)</span> <span class="title">bool</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Index</span><span class="params">(s, sep []<span class="keyword">byte</span>)</span> <span class="title">int</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Join</span><span class="params">(s [][]<span class="keyword">byte</span>, sep []<span class="keyword">byte</span>)</span> []<span class="title">byte</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>bytes包还提供了Buffer类型用于字节slice的缓存<ul>
<li>一个Buffer开始是空的，但是随着string、byte或[]byte等类型数据的写入可以动态增长</li>
<li>一个bytes.Buffer变量并不需要初始化，因为零值也是有效的：</li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// intsToString is like fmt.Sprint(values) but adds commas.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">intsToString</span><span class="params">(values []<span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> buf bytes.Buffer</span><br><span class="line">    buf.WriteByte(<span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i, v := <span class="keyword">range</span> values &#123;</span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="number">0</span> &#123;</span><br><span class="line">            buf.WriteString(<span class="string">&quot;, &quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Fprintf(&amp;buf, <span class="string">&quot;%d&quot;</span>, v)</span><br><span class="line">    &#125;</span><br><span class="line">    buf.WriteByte(<span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> buf.String()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(intsToString([]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;)) <span class="comment">// &quot;[1, 2, 3]&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当向bytes.Buffer添加任意字符的UTF8编码时，最好使用bytes.Buffer的WriteRune方法，但是WriteByte方法对于写入类似’[‘和’]’等ASCII字符则会更加有效。</p>
<p><strong>练习 3.10：</strong> 编写一个非递归版本的comma函数，使用bytes.Buffer代替字符串链接操作。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">comma</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">   <span class="keyword">if</span> <span class="built_in">len</span>(s) &lt;= <span class="number">3</span> &#123;</span><br><span class="line">      fmt.Println(s)</span><br><span class="line">      <span class="keyword">return</span> s</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">var</span> res bytes.Buffer</span><br><span class="line">   <span class="keyword">var</span> n <span class="keyword">uint8</span> = <span class="number">0</span></span><br><span class="line">   <span class="keyword">for</span> i := <span class="built_in">len</span>(s) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">      res.WriteByte(s[i])</span><br><span class="line">      n++</span><br><span class="line">      <span class="keyword">if</span> n == <span class="number">3</span> &amp;&amp; i != <span class="number">0</span>&#123;</span><br><span class="line">         res.WriteString(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">         n = <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   r := res.String()</span><br><span class="line">   <span class="keyword">var</span> ans bytes.Buffer</span><br><span class="line">   <span class="keyword">for</span> i := <span class="built_in">len</span>(r) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">      ans.WriteByte(r[i])</span><br><span class="line">   &#125;</span><br><span class="line">   fmt.Println(ans.String())</span><br><span class="line">   <span class="keyword">return</span> ans.String()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>练习 3.11：</strong> 完善comma函数，以支持浮点数处理和一个可选的正负号的处理。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// comma inserts commas in a non-negative decimal integer string.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">comma</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> flag <span class="keyword">bool</span></span><br><span class="line">   <span class="keyword">if</span> s[<span class="number">0</span>] == <span class="string">&#x27;+&#x27;</span> || s[<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span> &#123;</span><br><span class="line">      flag = <span class="literal">true</span></span><br><span class="line">   &#125;</span><br><span class="line">   n := <span class="built_in">len</span>(s)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">      <span class="keyword">if</span> s[i] == <span class="string">&#x27;.&#x27;</span> &amp;&amp; flag &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">string</span>(s[<span class="number">0</span>]) + comma(s[<span class="number">1</span>:i]) + s[i:]</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> s[i] == <span class="string">&#x27;.&#x27;</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> comma(s[:i]) + s[i:]</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> n &lt;= <span class="number">3</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> s</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> comma(s[:n<span class="number">-3</span>]) + <span class="string">&quot;,&quot;</span> + s[n<span class="number">-3</span>:]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>练习 3.12：</strong> 编写一个函数，判断两个字符串是否是相互打乱的，也就是说它们有着相同的字符，但是对应不同的顺序。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isSame</span><span class="params">(s1, s2 <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">   <span class="keyword">if</span> <span class="built_in">len</span>(s1) != <span class="built_in">len</span>(s2) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   r1 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">byte</span>]<span class="keyword">int</span>)</span><br><span class="line">   r2 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">byte</span>]<span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s1); i++ &#123;</span><br><span class="line">      r1[s1[i]]++</span><br><span class="line">      r2[s2[i]]++</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> c, i := <span class="keyword">range</span> r1 &#123;</span><br><span class="line">      <span class="keyword">if</span> r2[c] != i &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="355-字符串和数字的转换">3.5.5. 字符串和数字的转换</span></h3><ul>
<li>由strconv包提供这类转换功能。</li>
</ul>
<h4><span id="整数转为字符串">整数转为字符串</span></h4><ul>
<li>将一个整数转为字符串，<ul>
<li>一种方法是用fmt.Sprintf返回一个格式化的字符串；</li>
<li>另一个方法是用strconv.Itoa(“整数到ASCII”)</li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">x := <span class="number">123</span></span><br><span class="line">y := fmt.Sprintf(<span class="string">&quot;%d&quot;</span>, x)</span><br><span class="line">fmt.Println(y, strconv.Itoa(x)) <span class="comment">// &quot;123 123&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>FormatInt和FormatUint函数可以用不同的进制来格式化数字</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Println(strconv.FormatInt(<span class="keyword">int64</span>(x), <span class="number">2</span>)) <span class="comment">// &quot;1111011&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>fmt.Printf函数的<strong>%b、%d、%o和%x</strong>等参数提供功能往往比strconv包的Format函数方便很多，特别是在需要包含有附加额外信息的时候</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := fmt.Sprintf(<span class="string">&quot;x=%b&quot;</span>, x) <span class="comment">// &quot;x=1111011&quot;</span></span><br></pre></td></tr></table></figure>
<h4><span id="字符串转为整数">字符串转为整数</span></h4><p>可以使用strconv包的Atoi或ParseInt函数，还有用于解析无符号整数的ParseUint函数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">x, err := strconv.Atoi(<span class="string">&quot;123&quot;</span>)             <span class="comment">// x is an int</span></span><br><span class="line">y, err := strconv.ParseInt(<span class="string">&quot;123&quot;</span>, <span class="number">10</span>, <span class="number">64</span>) <span class="comment">// base 10, up to 64 bit</span></span><br></pre></td></tr></table></figure>
<ul>
<li>ParseInt函数的第三个参数是用于指定整型数的大小；例如16表示int16，0则表示int。</li>
<li><p>在任何情况下，返回的结果y总是int64类型，你可以通过强制类型转换将它转为更小的整数类型。</p>
</li>
<li><p>有时候也会使用fmt.Scanf来解析输入的字符串和数字，特别是当字符串和数字混合在一行的时候，它可以灵活处理不完整或不规则的输入。</p>
</li>
</ul>
<h2><span id="36-常量">3.6. 常量</span></h2><ul>
<li><p>常量表达式的值在<strong>编译期计算</strong>，而不是在运行期。</p>
</li>
<li><p>每种常量的潜在类型都是基础类型：boolean、string或数字。</p>
</li>
</ul>
<p>一个常量的声明语句定义了常量的名字，和变量的声明语法类似，常量的值不可修改，这样可以防止在运行期被意外或恶意的修改</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pi = <span class="number">3.14159</span> <span class="comment">// approximately; math.Pi is a better approximation</span></span><br></pre></td></tr></table></figure>
<h4><span id="批量声明">批量声明</span></h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    e  = <span class="number">2.71828182845904523536028747135266249775724709369995957496696763</span></span><br><span class="line">    pi = <span class="number">3.14159265358979323846264338327950288419716939937510582097494459</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>所有常量的运算都可以在编译期完成</strong>，这样可以减少运行时的工作，也方便其他编译优化。</li>
<li><p>当操作数是常量时，一些运行时的错误也可以在编译时被发现，例如整数除零、字符串索引越界、任何导致无效浮点数的操作等。</p>
</li>
<li><p>常量间的所有算术运算、逻辑运算和比较运算的结果也是常量</p>
</li>
<li>对常量的类型转换操作或以下函数调用都是返回常量结果：<ul>
<li>len、cap、real、imag、complex和unsafe.Sizeof</li>
</ul>
</li>
<li>因为它们的值是在编译期就确定的，因此常量可以是构成类型的一部分</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> IPv4Len = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// parseIPv4 parses an IPv4 address (d.d.d.d).</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">parseIPv4</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">IP</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> p [IPv4Len]<span class="keyword">byte</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>一个常量的声明也可以包含一个类型和一个值，但是如果没有显式指明类型，那么将从右边的表达式推断类型</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> noDelay time.Duration = <span class="number">0</span></span><br><span class="line"><span class="keyword">const</span> timeout = <span class="number">5</span> * time.Minute</span><br><span class="line">fmt.Printf(<span class="string">&quot;%T %[1]v\n&quot;</span>, noDelay)     <span class="comment">// &quot;time.Duration 0&quot;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T %[1]v\n&quot;</span>, timeout)     <span class="comment">// &quot;time.Duration 5m0s&quot;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T %[1]v\n&quot;</span>, time.Minute) <span class="comment">// &quot;time.Duration 1m0s&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>如果是批量声明的常量，<strong>除了第一个外其它的常量</strong>右边的初始化表达式都可以省略</li>
<li>如果省略初始化表达式则表示<strong>使用前面常量的初始化表达式写法</strong>，对应的常量类型也一样的</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    b</span><br><span class="line">    c = <span class="number">2</span></span><br><span class="line">    d</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">fmt.Println(a, b, c, d) <span class="comment">// &quot;1 1 2 2&quot;</span></span><br></pre></td></tr></table></figure>
<h3><span id="361-iota-常量生成器">3.6.1. iota 常量生成器</span></h3><ul>
<li>常量声明可以使用iota常量生成器初始化</li>
<li><p>它用于生成一组以相似规则初始化的常量，但是不用每行都写一遍初始化表达式</p>
</li>
<li><p>在一个const声明语句中，在第一个声明的常量所在的行，iota将会被置为0，然后在每一个有常量声明的行加一。</p>
</li>
<li><p>类似于枚举类型</p>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Weekday <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    Sunday Weekday = <span class="literal">iota</span></span><br><span class="line">    Monday</span><br><span class="line">    Tuesday</span><br><span class="line">    Wednesday</span><br><span class="line">    Thursday</span><br><span class="line">    Friday</span><br><span class="line">    Saturday</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 周日将对应0，周一为1，如此等等。</span></span><br></pre></td></tr></table></figure>
<p>也可以在复杂的常量表达式中使用iota</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Flags <span class="keyword">uint</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    FlagUp Flags = <span class="number">1</span> &lt;&lt; <span class="literal">iota</span> <span class="comment">// is up</span></span><br><span class="line">    FlagBroadcast            <span class="comment">// supports broadcast access capability</span></span><br><span class="line">    FlagLoopback             <span class="comment">// is a loopback interface</span></span><br><span class="line">    FlagPointToPoint         <span class="comment">// belongs to a point-to-point link</span></span><br><span class="line">    FlagMulticast            <span class="comment">// supports multicast access capability</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsUp</span><span class="params">(v Flags)</span> <span class="title">bool</span></span>     &#123; <span class="keyword">return</span> v&amp;FlagUp == FlagUp &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TurnDown</span><span class="params">(v *Flags)</span></span>     &#123; *v &amp;^= FlagUp &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetBroadcast</span><span class="params">(v *Flags)</span></span> &#123; *v |= FlagBroadcast &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsCast</span><span class="params">(v Flags)</span> <span class="title">bool</span></span>   &#123; <span class="keyword">return</span> v&amp;(FlagBroadcast|FlagMulticast) != <span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> v Flags = FlagMulticast | FlagUp</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%b %t\n&quot;</span>, v, IsUp(v)) <span class="comment">// &quot;10001 true&quot;</span></span><br><span class="line">    TurnDown(&amp;v)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%b %t\n&quot;</span>, v, IsUp(v)) <span class="comment">// &quot;10000 false&quot;</span></span><br><span class="line">    SetBroadcast(&amp;v)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%b %t\n&quot;</span>, v, IsUp(v))   <span class="comment">// &quot;10010 false&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%b %t\n&quot;</span>, v, IsCast(v)) <span class="comment">// &quot;10010 true&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    _ = <span class="number">1</span> &lt;&lt; (<span class="number">10</span> * <span class="literal">iota</span>)</span><br><span class="line">    KiB <span class="comment">// 1024</span></span><br><span class="line">    MiB <span class="comment">// 1048576</span></span><br><span class="line">    GiB <span class="comment">// 1073741824</span></span><br><span class="line">    TiB <span class="comment">// 1099511627776             (exceeds 1 &lt;&lt; 32)</span></span><br><span class="line">    PiB <span class="comment">// 1125899906842624</span></span><br><span class="line">    EiB <span class="comment">// 1152921504606846976</span></span><br><span class="line">    ZiB <span class="comment">// 1180591620717411303424    (exceeds 1 &lt;&lt; 64)</span></span><br><span class="line">    YiB <span class="comment">// 1208925819614629174706176</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>不过iota常量生成规则也有其局限性。例如，它并不能用于产生1000的幂（KB、MB等），因为Go语言并没有计算幂的运算符</p>
<p><strong>练习 3.13：</strong> 编写KB、MB的常量声明，然后扩展到YB。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">   B = <span class="number">1</span> &lt;&lt; (<span class="number">3</span> + <span class="number">10</span> * <span class="literal">iota</span>)</span><br><span class="line">   KB</span><br><span class="line">   MB</span><br><span class="line">   GB</span><br><span class="line">   TB</span><br><span class="line">   PB</span><br><span class="line">   EB</span><br><span class="line">   ZB</span><br><span class="line">   YB</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3><span id="362-无类型常量">3.6.2. 无类型常量</span></h3><ul>
<li><p>Go语言的常量有个不同寻常之处</p>
<ul>
<li>虽然一个常量可以有任意一个确定的基础类型，例如int或float64，或者是类似time.Duration这样命名的基础类型</li>
<li>但是许多常量并没有一个明确的基础类型。</li>
<li>编译器为这些没有明确基础类型的数字常量提供比基础类型更高精度的算术运算；<ul>
<li>你可以认为至少有256bit的运算精度。</li>
</ul>
</li>
<li>这里有六种未明确类型的常量类型，分别是<ul>
<li>无类型的布尔型</li>
<li>无类型的整数</li>
<li>无类型的字符</li>
<li>无类型的浮点数</li>
<li>无类型的复数</li>
<li>无类型的字符串</li>
</ul>
</li>
</ul>
</li>
<li><p>通过延迟明确常量的具体类型</p>
<ul>
<li>无类型的常量不仅可以提供更高的运算精度</li>
<li>而且可以直接用于更多的表达式而不需要显式的类型转换</li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Println(YiB/ZiB) <span class="comment">// &quot;1024&quot;</span></span><br></pre></td></tr></table></figure>
<p>一个例子，math.Pi无类型的浮点数常量，可以直接用于任意需要浮点数或复数的地方</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x <span class="keyword">float32</span> = math.Pi</span><br><span class="line"><span class="keyword">var</span> y <span class="keyword">float64</span> = math.Pi</span><br><span class="line"><span class="keyword">var</span> z <span class="keyword">complex128</span> = math.Pi</span><br></pre></td></tr></table></figure>
<p>如果math.Pi被确定为特定类型，比如float64，那么结果精度可能会不一样，同时对于需要float32或complex128类型值的地方则会强制需要一个明确的类型转换</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Pi64 <span class="keyword">float64</span> = math.Pi</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x <span class="keyword">float32</span> = <span class="keyword">float32</span>(Pi64)</span><br><span class="line"><span class="keyword">var</span> y <span class="keyword">float64</span> = Pi64</span><br><span class="line"><span class="keyword">var</span> z <span class="keyword">complex128</span> = <span class="keyword">complex128</span>(Pi64)</span><br></pre></td></tr></table></figure>
<p>除法运算符/会根据操作数的类型生成对应类型的结果。因此，不同写法的常量除法表达式可能对应不同的结果</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f <span class="keyword">float64</span> = <span class="number">212</span></span><br><span class="line">fmt.Println((f - <span class="number">32</span>) * <span class="number">5</span> / <span class="number">9</span>)     <span class="comment">// &quot;100&quot;; (f - 32) * 5 is a float64</span></span><br><span class="line">fmt.Println(<span class="number">5</span> / <span class="number">9</span> * (f - <span class="number">32</span>))     <span class="comment">// &quot;0&quot;;   5/9 is an untyped integer, 0</span></span><br><span class="line">fmt.Println(<span class="number">5.0</span> / <span class="number">9.0</span> * (f - <span class="number">32</span>)) <span class="comment">// &quot;100&quot;; 5.0/9.0 is an untyped float</span></span><br></pre></td></tr></table></figure>
<ul>
<li>只有常量可以是无类型的。<ul>
<li>当一个无类型的常量被赋值给一个变量的时候，就像下面的第一行语句，</li>
<li>或者出现在有明确类型的变量声明的右边，如下面的其余三行语句，</li>
<li>无类型的常量将会被隐式转换为对应的类型，如果转换合法的话</li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f <span class="keyword">float64</span> = <span class="number">3</span> + <span class="number">0i</span> <span class="comment">// untyped complex -&gt; float64</span></span><br><span class="line">f = <span class="number">2</span>                  <span class="comment">// untyped integer -&gt; float64</span></span><br><span class="line">f = <span class="number">1e123</span>              <span class="comment">// untyped floating-point -&gt; float64</span></span><br><span class="line">f = <span class="string">&#x27;a&#x27;</span>                <span class="comment">// untyped rune -&gt; float64</span></span><br></pre></td></tr></table></figure>
<p>上面的语句相当于:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f <span class="keyword">float64</span> = <span class="keyword">float64</span>(<span class="number">3</span> + <span class="number">0i</span>)</span><br><span class="line">f = <span class="keyword">float64</span>(<span class="number">2</span>)</span><br><span class="line">f = <span class="keyword">float64</span>(<span class="number">1e123</span>)</span><br><span class="line">f = <span class="keyword">float64</span>(<span class="string">&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>无论是隐式或显式转换，将一种类型转换为另一种类型都要求目标可以表示原始值。</li>
<li>对于浮点数和复数，可能会有舍入处理</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    deadbeef = <span class="number">0xdeadbeef</span> <span class="comment">// untyped int with value 3735928559</span></span><br><span class="line">    a = <span class="keyword">uint32</span>(deadbeef)  <span class="comment">// uint32 with value 3735928559</span></span><br><span class="line">    b = <span class="keyword">float32</span>(deadbeef) <span class="comment">// float32 with value 3735928576 (rounded up)</span></span><br><span class="line">    c = <span class="keyword">float64</span>(deadbeef) <span class="comment">// float64 with value 3735928559 (exact)</span></span><br><span class="line">    d = <span class="keyword">int32</span>(deadbeef)   <span class="comment">// compile error: constant overflows int32</span></span><br><span class="line">    e = <span class="keyword">float64</span>(<span class="number">1e309</span>)    <span class="comment">// compile error: constant overflows float64</span></span><br><span class="line">    f = <span class="keyword">uint</span>(<span class="number">-1</span>)          <span class="comment">// compile error: constant underflows uint</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<ul>
<li>对于一个没有显式类型的变量声明（包括简短变量声明），常量的形式将隐式决定变量的默认类型，就像下面的例子</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">i := <span class="number">0</span>      <span class="comment">// untyped integer;        implicit int(0)</span></span><br><span class="line">r := <span class="string">&#x27;\000&#x27;</span> <span class="comment">// untyped rune;           implicit rune(&#x27;\000&#x27;)</span></span><br><span class="line">f := <span class="number">0.0</span>    <span class="comment">// untyped floating-point; implicit float64(0.0)</span></span><br><span class="line">c := <span class="number">0i</span>     <span class="comment">// untyped complex;        implicit complex128(0i)</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>注意有一点不同：无类型整数常量转换为int，它的内存大小是不确定的，但是无类型浮点数和复数常量则转换为内存大小明确的float64和complex128</p>
</li>
<li><p>如果不知道浮点数类型的内存大小是很难写出正确的数值算法的，因此Go语言不存在整型类似的不确定内存大小的浮点数和复数类型</p>
</li>
</ul>
<p>如果要给变量一个不同的类型，我们必须显式地将无类型的常量转化为所需的类型，或给声明的变量指定明确的类型</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="keyword">int8</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int8</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>当尝试将这些无类型的常量转为一个接口值时，这些默认类型将显得尤为重要，因为要靠它们明确接口对应的动态类型。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, <span class="number">0</span>)      <span class="comment">// &quot;int&quot;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, <span class="number">0.0</span>)    <span class="comment">// &quot;float64&quot;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, <span class="number">0i</span>)     <span class="comment">// &quot;complex128&quot;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, <span class="string">&#x27;\000&#x27;</span>) <span class="comment">// &quot;int32&quot; (rune)</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go依赖管理</title>
    <url>/2021/10/04/Go%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux1</title>
    <url>/2022/06/14/Linux1/</url>
    <content><![CDATA[<h2><span id="linux操作系统">Linux操作系统</span></h2><h3><span id="组成">组成</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220614213156792.png" alt="image-20220614213156792"></p>
<ul>
<li>系统调用子系统</li>
<li>进程管理子系统</li>
<li>内存管理子系统</li>
<li>文件子系统</li>
<li>设备子系统</li>
<li>网络子系统</li>
</ul>
<h3><span id="总览">总览</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1628913191445.png" style="zoom:80%;"></p>
<h2><span id="几个命令">几个命令</span></h2><h3><span id="总览">总览</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1629130675191.jpg" alt></p>
<h3><span id="设置密码">设置密码</span></h3><p>命令：<strong>passwd</strong></p>
<h3><span id="创建新用户">创建新用户</span></h3><p>命令：<strong>useradd + 用户名</strong></p>
<ul>
<li>为新建用户设置密码：passed + 用户名</li>
<li>/etc/passwd：查看用户</li>
<li>/etc/group：查看组</li>
</ul>
<h3><span id="浏览文件">浏览文件</span></h3><ul>
<li><strong>ls</strong>：列出当前目录下的文件<ul>
<li>window的是dir</li>
<li>window的cd ..表示切换到上一级目录 </li>
</ul>
</li>
<li><strong>ls -l</strong>：用列表的方式列出文件<ul>
<li>其中第一个字段的第一个字符是文件类型。如果是“-”，表示普通文件；如果是 d，就表示目录。</li>
<li>第一个字段剩下的 9 个字符是模式，其实就是<strong>权限位（access permission bits）</strong>。</li>
<li>3 个一组，每一组 rwx 表示“读（read）”“写（write）”“执行（execute）”。<ul>
<li>如果是字母，就说明有这个权限；如果是横线，就是没有这个权限。</li>
<li>这三组分别表示文件所属的用户权限、文件所属的组权限以及其他用户的权限。</li>
<li>例子：-rw-r–r— 就可以翻译为，这是一个普通文件，对于所属用户，可读可写不能执行；对于所属的组，仅仅可读；对于其他用户，也是仅仅可读。如果想改变权限，可以使用命令 chmod 711 hosts。</li>
</ul>
</li>
<li>第二个字段是硬链接（hard link）数目</li>
<li>第三个字段是所属用户，第四个字段是所属组。第五个字段是文件的大小，第六个字段是文件被修改的日期，最后是文件名。</li>
<li>可以通过命令chown改变所属用户，chgrp改变所属组。</li>
</ul>
</li>
</ul>
<h3><span id="管理和安装软件">管理和安装软件</span></h3><ul>
<li><p>Linux常用的有两大体系</p>
<ul>
<li><p>CentOS体系</p>
</li>
<li><p>Ubuntu体系</p>
</li>
</ul>
</li>
<li><p>软件格式：前者使用rpm，后者使用deb</p>
</li>
</ul>
<h4><span id="centos">CentOS</span></h4><h5><span id="rpm-程序管理redhat-package-manager">rpm — 程序管理(Redhat Package Manager)</span></h5><ul>
<li>本地安装rpm文件：rpm -i + rpm文件（安装一个下载到本地的软件包）</li>
<li>查看安装的软件列表：rpm -qa</li>
<li>将列出来的所有软件形成一个输出：rpm -qa | grep jdk<ul>
<li>| 是管道，用于连接两个程序</li>
<li>前面 rpm -qa 的输出就放进管道里面，然后作为 grep 的输入，grep 将在里面进行搜索带关键词 jdk 的行，并且输出出来。</li>
<li>grep 支持正则表达式，因此搜索的时候很灵活，再加上管道，这是一个很常用的模式。</li>
</ul>
</li>
<li>列出所有软件：rpm -qa | more  或者 rpm -qa | less<ul>
<li>more 是分页后只能往后翻页，翻到最后一页自动结束返回命令行，less 是往前往后都能翻页，需要输入 q 返回命令行，q 就是 quit。</li>
</ul>
</li>
<li>删除：rpm -e (只是删除安装的文件)</li>
</ul>
<h5><span id="yum-软件管家">yum — 软件管家</span></h5><ul>
<li>下载：yum install + 软件名</li>
<li>搜索：yum search + 关键字</li>
<li><p>卸载：yum erase + 软件名</p>
</li>
<li><p>下载地址配置文件：/etc/yum.repos.d/CentOS-Base.repo</p>
</li>
</ul>
<h4><span id="ubuntu">Ubuntu</span></h4><h5><span id="dpkg-程序管理debian-package">dpkg — 程序管理(Debian package)</span></h5><ul>
<li>本地安装deb文件：dpkg -i + deb文件（安装一个下载到本地的软件包）</li>
<li>查看安装的软件列表：dpkg -l</li>
<li>将列出来的所有软件形成一个输出：dpkg -l | grep jdk</li>
<li>删除：dpkg -r(只是删除安装的文件)</li>
</ul>
<h5><span id="apt-软件管家">apt — 软件管家</span></h5><ul>
<li>下载：apt-get install + 软件名</li>
<li>搜索：apt-cache search + 关键字</li>
<li><p>卸载：apt-get purge + 软件名</p>
</li>
<li><p>下载地址配置文件：/etc/apt/sources.list</p>
</li>
</ul>
<h4><span id="下载">下载</span></h4><ul>
<li>其实无论是先下载再安装，还是通过软件管家进行安装，都是下载一些文件，然后将这些文件放在某个路径下，然后在相应的配置文件中配置一下。</li>
<li>还有一种简单粗暴的方法，就是将安装好的路径直接下载下来，然后解压缩成为一个整的路径。<ul>
<li>在 JDK 的安装目录中，Windows 有 jdk-XXX_Windows-x64_bin.zip，这是 Windows 下常用的压缩模式。</li>
<li>Linux 有 jdk-XXX_linux-x64_bin.tar.gz，这是 Linux 下常用的压缩模式。</li>
<li>Linux 上面有一个工具 wget，后面加上链接，就能从网上下载</li>
</ul>
</li>
</ul>
<h4><span id="解压缩">解压缩</span></h4><ul>
<li>Linux 下面默认会有 tar 程序。如果是解压缩 zip 包，就需要另行安装。</li>
<li>tar.ge格式的，通过 tar xvzf jdk-XXX_linux-x64_bin.tar.gz 就可以解压缩。</li>
</ul>
<h4><span id="配置环境变量">配置环境变量</span></h4><ul>
<li><p>通过 tar 解压缩之后，也需要配置环境变量，可以通过 export 命令来配置。</p>
<ul>
<li><pre><code class="lang-shell">export JAVA_HOME=/root/jdk-XXX_linux-x64
export PATH=$JAVA_HOME/bin:$PATH
</code></pre>
</li>
<li><p>export 命令仅在当前命令行的会话中管用，一旦退出重新登录进来，就不管用了</p>
</li>
</ul>
</li>
<li><p>在当前用户的默认工作目录，例如 /root 或者 /home/cliu8 下面，有一个.bashrc 文件</p>
<ul>
<li>这个文件是以点开头的，这个文件默认看不到，需要 ls -la 才能看到，a 就是 all</li>
<li>每次登录的时候，这个文件都会运行，因而把它放在这里。</li>
<li>这样登录进来就会自动执行。当然也可以通过 source .bashrc 手动执行。</li>
</ul>
</li>
<li><p>编辑.bashrc文件，可以使用文本编辑器 vi，也可以使用更加友好的 vim。</p>
<ul>
<li>如果默认没有安装，可以通过 yum install vim 及 apt-get install vim 进行安装。</li>
</ul>
</li>
</ul>
<h4><span id="vim的使用">vim的使用</span></h4><ul>
<li>打开文件：vim + 文件名(路径)<ul>
<li>如果没有这个文件，就创建一个</li>
</ul>
</li>
<li>输入i：进入编辑模式</li>
<li>退出编辑模式：esc</li>
<li>输入:<ul>
<li>后面是输入命令的</li>
<li>输入命令w：write<ul>
<li>可以保存文本</li>
</ul>
</li>
<li>输入q：退出</li>
<li>冒号!：是强制</li>
</ul>
</li>
</ul>
<h4><span id="运行程序">运行程序</span></h4><ul>
<li>Linux 执行程序最常用的一种方式，通过 shell 在交互命令行里面运行。<ul>
<li>只要文件有 x 执行权限，都能到文件所在的目录下，通过./filename运行这个程序。</li>
<li>当然，如果放在 PATH 里设置的路径下面，就不用./ 了，直接输入文件名就可以运行了，Linux 会帮你找。</li>
<li>缺点：一旦退出交互命令行，程序就停止运行了</li>
</ul>
</li>
<li>Linux 运行程序的第二种方式，后台运行<ul>
<li>nohup命令：当前交互命令行退出的时候，程序还要在</li>
<li>这个时候，程序不能霸占交互命令行，而是应该在后台运行。最后加一个 &amp;，就表示后台运行。</li>
<li>另外一个要处理的就是输出，后台运行时，输出到文件中。</li>
<li>最终命令的一般形式：<strong>nohup command &gt;out.file 2&gt;&amp;1 &amp;</strong><ul>
<li>“1”表示文件描述符 1</li>
<li>“2”表示文件描述符 2，意思是标准错误输出</li>
<li>“2&gt;&amp;1”表示标准输出和错误输出合并了。合并到 out.file 里。</li>
</ul>
</li>
<li>关闭进程<ul>
<li>启动的程序包含某个关键字，那就可以使用下面的命令<ul>
<li><strong>ps -ef |grep 关键字  |awk ‘{print $2}’|xargs kill -9</strong></li>
</ul>
</li>
<li>ps -ef<ul>
<li>可以单独运行，列出所有正在运行的程序</li>
</ul>
</li>
<li>awk工具<ul>
<li>可以很灵活地对文本进行处理</li>
<li>awk ‘{print $2}’是指第二列的内容，是运行的程序 ID。</li>
<li>可以通过 xargs 传递给 kill -9，也就是发给这个运行的程序一个信号，让它关闭</li>
</ul>
</li>
<li>如果你已经知道运行的程序 ID，可以直接使用 kill 关闭运行的程序。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4><span id="服务systemd">服务(systemd)</span></h4><ul>
<li>Linux中的服务是程序运行的第三种方式，以服务的方式运行。<ul>
<li>例如常用的数据库 MySQL，就可以使用这种方式运行。</li>
</ul>
</li>
<li>Ubuntu <ul>
<li>安装MySQL：apt-get install mysql-server</li>
<li>启动MySQL：systemctl start mysql</li>
<li>设置开机启动：systemctl enable mysql<ul>
<li>之所以成为服务并且能够开机启动，是因为在 /lib/systemd/system 目录下会创建一个 XXX.service 的配置文件，里面定义了如何启动、如何关闭。</li>
</ul>
</li>
</ul>
</li>
<li>CentOS<ul>
<li>安装MySQL：yum install mariadb-server mariadb</li>
<li>启动MySQL：systemctl start mariadb</li>
<li>设置开机启动：systemctl enable mariadb<ul>
<li>同理，会在 /usr/lib/systemd/system 目录下，创建一个 XXX.service 的配置文件，从而成为一个服务。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4><span id="重启关机">重启关机</span></h4><ul>
<li>关机：shutdown -h now</li>
<li>重启：reboot</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux2</title>
    <url>/2022/09/11/Linux2/</url>
    <content><![CDATA[<h2><span id="总览">总览</span></h2><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1629129594735.jpg" alt="1629129594735"></p>
<h3><span id="进程管理">进程管理</span></h3><h4><span id="fork-分支">fork 分支</span></h4><ul>
<li><p>创建进程的系统调用叫fork，意为分支</p>
</li>
<li><p>在Linux中，要创建一个新的进程，需要一个老的进程调用fork来实现</p>
<ul>
<li>其中老的进程叫做父进程</li>
<li>新的进程叫做子进程</li>
</ul>
</li>
<li><p>一个进程的运行是要有一个程序的</p>
</li>
<li><p>当父进程调用 fork 创建进程的时候，子进程将各个子系统为父进程创建的数据结构也全部拷贝了一份，甚至连程序代码也是拷贝过来的。</p>
</li>
<li><p>如果不进行特殊的处理，父进程和子进程都按相同的程序代码进行下去，这样就没有意义了。</p>
</li>
<li><p>对于 fork 系统调用的返回值，<strong>如果当前进程是子进程，就返回 0</strong>；<strong>如果当前进程是父进程，就返回子进程的进程号。</strong></p>
</li>
</ul>
<h4><span id="execve-运行新二进制文件">execve 运行新二进制文件</span></h4><ul>
<li>这样fork在返回值这里就有了一个区分，然后通过 if-else 语句判断，如果是父进程，还接着做原来应该做的事情；<strong>如果是子进程</strong>，需要请求另一个<strong>系统调用execve</strong>来执行另一个程序，这个时候，子进程和父进程就彻底分道扬镳了，也即产生了一个分支（fork）了</li>
</ul>
<h4><span id="waitpid-等待子进程结束">waitpid 等待子进程结束</span></h4><p>有个<strong>系统调用waitpid</strong>，父进程可以调用它，将子进程的进程号作为参数传给它，这样父进程就知道子进程运行完了没有，成功与否。</p>
<h3><span id="内存管理">内存管理</span></h3><h4><span id="进程内存空间">进程内存空间</span></h4><ul>
<li>在操作系统中，每个进程都有自己的内存，互相之间不干扰，有独立的<strong>进程内存空间</strong></li>
</ul>
<h4><span id="代码段">代码段</span></h4><ul>
<li>对于进程的内存空间来讲，放程序代码的这部分，我们称为<strong>代码段</strong>（Code Segment）</li>
</ul>
<h4><span id="数据段">数据段</span></h4><ul>
<li>对于进程的内存空间来讲，放置进程运行中产生数据的这部分，我们称为<strong>数据段</strong>（Data Segment）<ul>
<li>其中局部变量的部分，在当前函数执行的时候起作用，当进入另一个函数时，这个变量就释放了；</li>
<li>也有动态分配的，会较长时间保存，指明才销毁的，这部分称为堆（Heap）。</li>
</ul>
</li>
<li>每个进程看到的内存都是从0开始</li>
<li>只有进程要去使用部分内存的时候，才会使用内存管理的系统调用来登记，说自己马上就要用了，希望分配一部分内存给它，但是这还不代表真的就对应到了物理内存。</li>
<li>只有真的写入数据的时候，发现没有对应物理内存，才会触发一个中断，现分配物理内存。</li>
</ul>
<h4><span id="brk和mmap">brk和mmap</span></h4><ul>
<li>两个在堆里面分配内存的系统调用，brk和mmap<ul>
<li>当分配的内存数量比较小的时候，使用 brk，会和原来的堆的数据连在一起</li>
<li>当分配的内存数量比较大的时候，使用 mmap，会重新划分一块区域</li>
</ul>
</li>
</ul>
<h3><span id="文件管理">文件管理</span></h3><h4><span id="文件操作中六个最重要的系统调用">文件操作中六个最重要的系统调用</span></h4><ul>
<li>open和close<ul>
<li>对于已经有的文件，可以使用open打开这个文件，close关闭这个文件；</li>
</ul>
</li>
<li>creat<ul>
<li>对于没有的文件，可以使用creat创建文件；</li>
</ul>
</li>
<li>lseek<ul>
<li>打开文件以后，可以使用lseek跳到文件的某个位置；</li>
</ul>
</li>
<li>read和write<ul>
<li>可以对文件的内容进行读写，读的系统调用是read，写是write。</li>
</ul>
</li>
</ul>
<h4><span id="linux-里有一个特点那就是一切皆文件">Linux 里有一个特点，那就是一切皆文件。</span></h4><ul>
<li>启动一个进程，需要一个程序文件，这是一个<strong>二进制文件</strong>。</li>
<li>启动的时候，要加载一些配置文件，例如 yml、properties 等，这是<strong>文本文件</strong>；</li>
<li>启动之后会打印一些日志，如果写到硬盘上，也是<strong>文本文件</strong>。</li>
<li>但是如果我想把日志打印到交互控制台上，在命令行上唰唰地打印出来，这其实也是一个文件，是<strong>标准输出stdout 文件</strong></li>
<li>这个进程的输出可以作为另一个进程的输入，这种方式称为<strong>管道</strong>，<strong>管道也是一个文件</strong></li>
<li>进程可以通过网络和其他进程进行通信，建立的<strong>Socket</strong>，也是一个<strong>文件</strong></li>
<li>进程需要访问外部设备，设备也是一个<strong>文件</strong>。</li>
<li>文件都被存储在文件夹里面，其实文件夹也是一个<strong>文件</strong>。</li>
<li>进程运行起来，要想看到进程运行的情况，会在 /proc 下面有对应的进程号，还是<strong>一系列文件</strong>。</li>
</ul>
<h4><span id="每个文件linux-都会分配一个文件描述符file-descriptor这是一个整数">每个文件，Linux 都会分配一个<strong>文件描述符（File Descriptor）</strong>，这是一个整数。</span></h4><ul>
<li>有了这个文件描述符，我们就可以使用系统调用，查看或者干预进程运行的方方面面。</li>
</ul>
<h4><span id="文件操作是贯穿始终的这也是一切皆文件的优势就是统一了操作的入口">文件操作是贯穿始终的，这也是“一切皆文件”的优势，就是统一了操作的入口</span></h4><h3><span id="信号处理">信号处理</span></h3><h4><span id="经常遇到的信号有以下几种">经常遇到的信号有以下几种</span></h4><ul>
<li>在执行一个程序的时候，在键盘输入<strong>“CTRL+C”</strong>，这就是中断的信号，正在执行的命令就会中止退出；</li>
<li>如果<strong>非法访问内存</strong>，例如你跑到别人的会议室，可能会看到不该看的东西</li>
<li><strong>硬件故障</strong>，设备出了问题</li>
<li>用户进程通过<strong>kill函数</strong>，将一个用户信号发送给另一个进程</li>
</ul>
<h4><span id="进程管理收到信号的时候需要决定如何处理这些异常情况">进程管理收到信号的时候，需要决定如何处理这些异常情况</span></h4><ul>
<li>对于一些不严重的信号，可以忽略</li>
<li>像 <strong>SIGKILL</strong>（用于终止一个进程的信号）和 <strong>SIGSTOP</strong>（用于中止一个进程的信号）是不能忽略的，可以执行对于该信号的默认动作</li>
<li>每种信号都定义了默认的动作，例如硬件故障，默认终止；</li>
<li>也可以提供信号处理函数，可以通过<strong>sigaction</strong>系统调用，注册一个信号处理函数。</li>
</ul>
<h3><span id="进程间通信">进程间通信</span></h3><h4><span id="进程比较大的时候可能会分成多个进程进程间需要进行通信">进程比较大的时候，可能会分成多个进程，进程间需要进行通信</span></h4><h4><span id="首先就是发个消息不需要一段很长的数据这种方式称为消息队列message-queue">首先就是发个消息，不需要一段很长的数据，这种方式称为消息队列（Message Queue）。</span></h4><ul>
<li>消息队列是在内核里的</li>
<li><strong>msgget</strong>创建一个新的队列</li>
<li><strong>msgsnd</strong>将消息发送到消息队列</li>
<li>消息接收方可以使用<strong>msgrcv</strong>从队列中取消息。</li>
</ul>
<h4><span id="当两个进程需要交互的信息比较大的时候可以使用共享内存的方式">当两个进程需要交互的信息比较大的时候，可以使用共享内存的方式</span></h4><ul>
<li>这时候可以通过<strong>shmget</strong>创建一个共享内存块</li>
<li>通过<strong>shmat</strong>将共享内存映射到自己的内存空间，然后就可以读写了。</li>
<li>当两个进程同时修改同一个数据时，需要有一种方式，让不同的人能够排他地访问，这就是信号量的机制<strong>Semaphore</strong>。<ul>
<li>对于只允许一个人访问的需求，我们可以将信号量设为 1。</li>
<li>当一个人要访问的时候，先调用<strong>sem_wait</strong>。如果这时候没有人访问，则占用这个信号量，他就可以开始访问了。</li>
<li>如果这个时候另一个人要访问，也会调用 <strong>sem_wait</strong>。由于前一个人已经在访问了，所以后面这个人就必须等待上一个人访问完之后才能访问</li>
<li>当上一个人访问完毕后，会调用<strong>sem_post</strong>将信号量释放，于是下一个人等待结束，可以访问这个资源了。</li>
</ul>
</li>
</ul>
<h3><span id="网络通信">网络通信</span></h3><ul>
<li>当一台Linux要与另一台Linux交流，就需要用到网络服务</li>
<li>不同机器的通过网络相互通信，要遵循相同的网络协议，也即<strong>TCP/IP 网络协议栈</strong></li>
<li>Linux 内核里有对于网络协议栈的实现</li>
<li>网络服务是通过套接字 Socket 来提供服务的，在通信之前，双方都要建立一个 Socket。</li>
<li>可以通过 Socket 系统调用建立一个 Socket。Socket 也是一个文件，也有一个文件描述符，也可以通过读写函数进行通信。</li>
</ul>
<h3><span id="查看源代码中的系统调用">查看源代码中的系统调用</span></h3><h4><span id="glibc"><strong>Glibc</strong></span></h4><ul>
<li>为了对用户更友好，我们还可以使用中介Glibc，有事情找它就行，它会转换成为系统调用，帮你调用</li>
<li>Glibc 是 <strong>Linux 下使用的开源的标准 C 库</strong>，它是 GNU 发布的 libc 库。</li>
<li>Glibc 为程序员<strong>提供丰富的 API</strong>，除了例如<strong>字符串处理</strong>、<strong>数学运算</strong>等用户态服务之外，最重要的是<strong>封装了操作系统提供的系统服务</strong>，即<strong>系统调用的封装</strong>。</li>
<li>每个<strong>特定的系统调用</strong>对应了<strong>至少一个</strong> <strong>Glibc 封装的库函数</strong><ul>
<li>比如说，系统提供的打开文件系统调用 sys_open 对应的是 Glibc 中的 open 函数。</li>
</ul>
</li>
<li>Glibc <strong>一个单独的 API 可能调用多个系统调用</strong><ul>
<li>比如说，Glibc 提供的 printf 函数就会调用如 sys_open、sys_mmap、sys_write、sys_close 等等系统调用。</li>
</ul>
</li>
<li><strong>多个 API 也可能只对应同一个系统调用</strong><ul>
<li>如 Glibc 下实现的 malloc、calloc、free 等函数用来分配和释放内存，都利用了内核的 sys_brk 的系统调用</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Opengl1</title>
    <url>/2021/10/13/Opengl1/</url>
    <content><![CDATA[<p>网页：<a href="http://www.songho.ca/opengl/index.html">http://www.songho.ca/opengl/index.html</a></p>
<iframe src="http://www.songho.ca/opengl/index.html" width="100%" height="2000"></iframe>

]]></content>
      <categories>
        <category>课程笔记</category>
        <category>OpenGL</category>
      </categories>
  </entry>
  <entry>
    <title>Transformer</title>
    <url>/2021/11/01/Transformer/</url>
    <content><![CDATA[<h3><span id="seq2seq">seq2seq</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211121191146167.png" alt="image-20211121191146167"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211121191309735.png" alt="image-20211121191309735"></p>
<h3><span id="基于attention的seq2seq">基于attention的seq2seq</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211121191326014.png" alt="image-20211121191326014"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211121191330956.png" alt="image-20211121191330956"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211121191335056.png" alt="image-20211121191335056"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211121191344181.png" alt="image-20211121191344181"></p>
<h4><span id="可视化过程">可视化过程</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211121191431506.png" alt="image-20211121191431506"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211121191434913.png" alt="image-20211121191434913"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211121191440417.png" alt="image-20211121191440417"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211121191448956.png" alt="image-20211121191448956"></p>
<h3><span id="基于transformer的seq2seq">基于transformer的seq2seq</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211121191525456.png" alt="image-20211121191525456"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211121191528901.png" alt="image-20211121191528901"></p>
<h4><span id="结构">结构</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211121191532866.png" alt="image-20211121191532866"></p>
<h4><span id="深入分析">深入分析</span></h4><p>流程：编码器输入数据处理-&gt;编码器运行-&gt;解码器输入数据处理-&gt;解码器运行-&gt;分类head</p>
<h4><span id="编码器输入数据处理">编码器输入数据处理</span></h4><ul>
<li><p>单词嵌入：用向量来标记单词</p>
</li>
<li><p>位置编码(positional encoding)</p>
<ul>
<li><p>transfromer内部没有rnn，没有捕捉顺序序列的能力</p>
</li>
<li><p>编码词向量时引入了位置编码position encoding向量来表示两个单词i和j之间的距离</p>
<ul>
<li>即在词向量中加入了单词的位置信息</li>
</ul>
</li>
<li><p>方法：</p>
<ol>
<li><p>网络自动学习：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.pos_embedding = nn.Parameter(torch.randn(<span class="number">1</span>, N, <span class="number">512</span>))</span><br></pre></td></tr></table></figure>
<p>定义一个超参数，形状与输入嵌入一致，进行相加</p>
</li>
<li><p>自己定义规则</p>
<p>Attention is all you need 中采用了sin-cos规则，具体做法是</p>
<ul>
<li>将向量(N,512)采用如下函数进行处理</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/v2-d8728a36d08be257d0b2fcad1b9a9be8_720w.jpg" alt="img"></p>
<ul>
<li>pos即0~N,i是0-511</li>
<li>将一个词向量中的512维度切分为奇数行(cos函数)和偶数行(sin函数)</li>
<li>按照原始行号进行拼接</li>
</ul>
</li>
</ol>
</li>
<li><p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_position_angle_vec</span>(<span class="params">position</span>):</span></span><br><span class="line">    <span class="comment"># hid_j是0-511,d_hid是512，position表示单词位置0～N-1</span></span><br><span class="line">    <span class="keyword">return</span> [position / np.power(<span class="number">10000</span>, <span class="number">2</span> * (hid_j // <span class="number">2</span>) / d_hid) </span><br><span class="line">            <span class="keyword">for</span> hid_j <span class="keyword">in</span> <span class="built_in">range</span>(d_hid)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个单词位置0～N-1都可以编码得到512长度的向量</span></span><br><span class="line">sinusoid_table = np.array([get_position_angle_vec(pos_i) <span class="keyword">for</span> pos_i <span class="keyword">in</span> <span class="built_in">range</span>(n_position)])</span><br><span class="line"><span class="comment"># 偶数列进行sin</span></span><br><span class="line">sinusoid_table[:, <span class="number">0</span>::<span class="number">2</span>] = np.sin(sinusoid_table[:, <span class="number">0</span>::<span class="number">2</span>])  <span class="comment"># dim 2i</span></span><br><span class="line"><span class="comment"># 奇数列进行cos</span></span><br><span class="line">sinusoid_table[:, <span class="number">1</span>::<span class="number">2</span>] = np.cos(sinusoid_table[:, <span class="number">1</span>::<span class="number">2</span>])  <span class="comment"># dim 2i+1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>可视化</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/v2-d126df3c74cd11147433b57e748d2302_720w.jpg" alt="img"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/v2-91f7f14c2f01c9fb895bbaacd39c78b7_720w.jpg" alt="img"></p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>论文</category>
      </categories>
  </entry>
  <entry>
    <title>hexo-搭建图床</title>
    <url>/2021/12/27/hexo-%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<h4><span id="这篇使用的gitee已经失效了可以参考另一篇使用github">这篇使用的Gitee已经失效了，可以参考另一篇使用GitHub</span></h4><h4><span id="下载picgo">下载PicGo</span></h4><ul>
<li>从GitHub上下载PicGo的exe安装包，然后下载<ul>
<li><a href="https://github.com/Molunerfinn/PicGo/releases">PicGo下载地址</a></li>
</ul>
</li>
<li>重装的话，记得从控制面板卸载，不然会出现错误</li>
</ul>
<h4><span id="插件设置">插件设置</span></h4><p>下载这个插件</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211227191547194.png" alt="image-20211227191547194"></p>
<h4><span id="图床设置">图床设置</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211227191646296.png" alt="image-20211227191646296"></p>
<ul>
<li><p>repo：在管理中查看，填上正确的仓库名（用户名/仓库名）</p>
<ul>
<li>gitee仓库建立后不会设置分支，可以生成README文件来创建master分支</li>
</ul>
</li>
<li><p>token：在个人设置中生成私人密钥</p>
</li>
</ul>
<h4><span id="typora设置">Typora设置</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211227191823390.png" alt="image-20211227191823390"></p>
<ul>
<li>在图像设置中选择上传图片</li>
<li>勾选上面两个选项</li>
<li>设置好PicGo路径</li>
<li>然后进行测试</li>
</ul>
]]></content>
      <categories>
        <category>hexo搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-更换图床-GitHub</title>
    <url>/2022/04/10/hexo-%E6%9B%B4%E6%8D%A2%E5%9B%BE%E5%BA%8A-GitHub/</url>
    <content><![CDATA[<h3><span id="简介">简介</span></h3><ul>
<li>PicGo+GitHub+Typora图床设置</li>
<li>GiTee挂了，改用GitHub，借用CDN加速快速访问图片 </li>
</ul>
<h3><span id="步骤">步骤</span></h3><h4><span id="1picgo的下载">1.PicGo的下载</span></h4><ul>
<li>从GitHub上下载PicGo的exe安装包，然后下载<ul>
<li><a href="https://github.com/Molunerfinn/PicGo/releases">PicGo下载地址</a></li>
</ul>
</li>
<li>重装的话，记得从控制面板卸载，不然会出现错误</li>
</ul>
<h4><span id="2github的注册和设置">2.GitHub的注册和设置</span></h4><ol>
<li>注册的话都会吧</li>
<li>建立一个公共仓库<ul>
<li>注意：GitHub仓库的默认分支是<strong>main</strong></li>
</ul>
</li>
</ol>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images202204101408675.png" alt="image-20220410140832295"></p>
<ol>
<li><p>在账户设置里面生成一个token</p>
<ul>
<li>在账户的settings里面往下拉找到Developer settings</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images202204101411743.png" alt="image-20220410141159604"></p>
<ul>
<li>在右边选择Personal Access tokens</li>
</ul>
<p>​    <img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images202204101413126.png" alt="image-20220410141303928"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images202204101413257.png" alt="image-20220410141337012"></p>
<ul>
<li>名字随意，Expiration是限制期限，选个无限期就可以了</li>
<li>下面的选择范围勾选个repo就可以了</li>
<li>生成后保存这个token，用于PicGo设置</li>
</ul>
</li>
</ol>
<h4><span id="3-picgo的设置">3. PicGo的设置</span></h4><ul>
<li>这个就简单了，GitHub图床不需要在PicGo中下载插件</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images202204101418450.png" alt="image-20220410141816251"></p>
<ul>
<li>仓库名：就那个点开自己仓库上方的名字<ul>
<li>用户名/仓库名</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images202204101419588.png" alt="image-20220410141910465"></p>
<ul>
<li>分支默认是main，也可以自己换一个，但没必要</li>
<li>Token就填上刚才那个生成的token</li>
<li>路径默认为空吧，加上自定义域名后失效了，没有放到images文件夹中，不过问题不大</li>
<li><strong>自定义域名：</strong>这个是关键，使用了jsdelivr作为cdn加速，改变域名就可以<ul>
<li><strong>格式：https”//cdn.jsdelivr.net/gh/[用户名]/[仓库名]@main</strong><ul>
<li>@后面加的是分支名</li>
</ul>
</li>
</ul>
</li>
<li>这样就设置好了</li>
</ul>
<h4><span id="4-typora的设置">4. Typora的设置</span></h4><ul>
<li>打开偏好设置-图像</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202204101427456.png" alt="image-20220410142743233"></p>
<ul>
<li>选择上传图片，勾选上对应的选项</li>
<li>上传服务设定好之后测试</li>
</ul>
<h4><span id="5-测试">5. 测试</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202204101429318.png" alt="image-20220410142911819"></p>
<ul>
<li>图片加载成功，而且速度挺快的</li>
</ul>
]]></content>
      <categories>
        <category>hexo搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>numpyL1</title>
    <url>/2021/09/28/numpyL1/</url>
    <content><![CDATA[<p>NumPy</p>
<p>NumPy中的ndarray是一个多维数组对象，该对象由两部分组成：</p>
<ul>
<li><p>实际的数据；</p>
</li>
<li><p>描述这些数据的元数据。</p>
</li>
</ul>
<p>大部分的数组操作仅仅修改元数据部分，而不改变底层的实际数据</p>
<p>array函数可以依据给定的对象生成数组。</p>
<iframe src="https://nbviewer.org/github/Ye2222/jupyter-note/blob/master/Numpy.ipynb" width="100%" height="7400"></iframe>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>python</category>
        <category>numpy</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>matplotlibL1</title>
    <url>/2021/11/04/matplotlibL1/</url>
    <content><![CDATA[<h3><span id> </span></h3><h3><span id="设置风格">设置风格</span></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.style.use(<span class="string">&#x27;ggplot&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3><span id="直方图">直方图</span></h3><h4><span id="横轴为文字的样式">横轴为文字的样式</span></h4><p>数据集：pandas中的DataFrame或者Series</p>
<p>使用plot选择类型，需要数据集提前处理好为两个量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.plot(kind=<span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line">df.xlabel()</span><br><span class="line">df.ylabel()</span><br><span class="line">df.title()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<h3><span id="散点图">散点图</span></h3><p>函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.scatter(x=<span class="literal">None</span>, y=<span class="literal">None</span>, c=颜色, s=点的大小)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>画图</category>
        <category>matplotlib</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>numpyL2</title>
    <url>/2021/10/09/numpyL2/</url>
    <content><![CDATA[<h4><span id="总结">总结：</span></h4><ul>
<li>用loadtxt读文件，</li>
<li>用savetxt写文件，</li>
<li>用eye函数创建单位矩阵，</li>
<li>用loadtxt函数从一个CSV文件中读取股价数据。</li>
<li>NumPy中的average和mean函数可以用来计算数据的加权平均数和算术平均数。</li>
<li>使用min和max函数来确定股价的范围</li>
<li>用median函数获取数据的中位数</li>
<li>用std和var函数计算数据的标准差和方差</li>
<li>diff函数可以返回数组中相邻元素的差值</li>
<li>log函数可以计算数组元素的自然对数</li>
<li>loadtxt函数默认将所有数据转换为浮点数类型，它有一个特定的参数可以完成转换。这个参数就是converters，它是一个可以将数据列和所谓的转换函数连接起来的参数。</li>
<li>ones函数可以创建一个全为1的数组</li>
<li>convolve函数可以根据指定的权重计算卷积。</li>
<li>linspace可以给出一个均匀分布的数组，然后我们计算出该数组元素的指数。</li>
<li>可以用sum方法对权重值做归一化处理</li>
<li>fill函数，这个函数可以用一个指定的标量值填充数组，而这个标量值也是其唯一的参数</li>
</ul>
<iframe src="https://nbviewer.org/github/Ye2222/jupyter-note/blob/master/NumpyL2.ipynb" width="100%" height="8450"></iframe>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>python</category>
        <category>numpy</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>numpyL3</title>
    <url>/2021/10/11/numpyL3/</url>
    <content><![CDATA[<ul>
<li>用corrcoef函数计算了两只股票收益率的相关性</li>
<li>diagonal和trace函数分别可以给出矩阵的对角线元素和矩阵的迹</li>
<li>用polyfit函数拟合一系列数据点</li>
<li>用polyval函数计算多项式函数的取值</li>
<li>用roots函数求解多项式的根</li>
<li>polyder函数求解多项式函数的导函数</li>
</ul>
<iframe src="https://nbviewer.org/github/Ye2222/jupyter-note/blob/master/NumpyL3.ipynb" width="100%" height="6000"></iframe>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>python</category>
        <category>numpy</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>numpyL4</title>
    <url>/2021/10/13/numpyL4/</url>
    <content><![CDATA[<p>方波：</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211013102801223.png" alt="image-20211013102801223"></p>
<p>锯齿波：</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main\image-20211013102809521.png" alt="image-20211013102809521"></p>
<iframe src="https://nbviewer.org/github/Ye2222/jupyter-note/blob/master/NumpyL4.ipynb" width="100%" height="5500"></iframe>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>python</category>
        <category>numpy</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>numpyL5</title>
    <url>/2021/10/16/numpyL5/</url>
    <content><![CDATA[<iframe src="https://nbviewer.org/github/Ye2222/jupyter-note/blob/master/NumpyL5.ipynb" width="100%" height="6000"></iframe>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>python</category>
        <category>numpy</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>numpyL6</title>
    <url>/2021/10/16/numpyL6/</url>
    <content><![CDATA[<iframe src="https://nbviewer.org/github/Ye2222/jupyter-note/blob/master/NumpyL6.ipynb" width="100%" height="6000"></iframe>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>python</category>
        <category>numpy</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>numpyL7</title>
    <url>/2021/10/16/numpyL7/</url>
    <content><![CDATA[<iframe src="https://nbviewer.org/github/Ye2222/jupyter-note/blob/master/NumpyL7.ipynb" width="100%" height="6000"></iframe>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>python</category>
        <category>numpy</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>numpyL8</title>
    <url>/2021/10/30/numpyL8/</url>
    <content><![CDATA[<iframe src="https://nbviewer.org/github/Ye2222/jupyter-note/blob/master/NumpyL8--Matplotlib.ipynb" width="100%" height="6000"></iframe>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>python</category>
        <category>numpy</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>origin-配色方案</title>
    <url>/2022/05/08/origin-%E9%85%8D%E8%89%B2%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h1><span id="配色">配色</span></h1><h2><span id="配色的分类">配色的分类</span></h2><ul>
<li>柔和的颜色：饱和度低</li>
<li>强烈的颜色：饱和度高</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220508191847539.png" alt="image-20220508191847539"></p>
<h2><span id="配色的基本原则">配色的基本原则</span></h2><h3><span id="颜色为数据逻辑服务">颜色为数据逻辑服务</span></h3><ul>
<li>有意义的颜色<ul>
<li>显示分组<ul>
<li>用不同的颜色来表达区别</li>
<li>用相近的颜色表示同一分组</li>
</ul>
</li>
<li>用配色突出关键数据</li>
</ul>
</li>
<li>多用相似色<ul>
<li>同一色系或者色轮上相邻</li>
<li>多个数据的话不要超过三个色系</li>
<li><strong>建议多用内置颜色或者参考成熟的配色方案</strong></li>
</ul>
</li>
<li>根据图面积选色<ul>
<li>大面积的图使用柔和的颜色(柱状图/面积图)</li>
<li>小面积的图使用强烈的颜色(折线图/散点图)</li>
</ul>
</li>
</ul>
<h3><span id="用数据说话用图片表达用逻辑自洽">用数据说话，用图片表达，用逻辑自洽</span></h3><p>图片既包含数据，又必须体现出数据之间的逻辑关系以及数据和结论的逻辑关系</p>
<ul>
<li>配色：突出关键数据，展示逻辑关系</li>
<li>配图：最好有一个主色调(1/3到一半)，然后使用近似色作为辅助色，其他颜色为互补色、组合色</li>
<li>尽可能使用柔和的颜色（明色、暗色、混色），避免使用亮绿亮蓝亮青亮紫（纯色）</li>
</ul>
<p>近似色：光谱上相近的颜色</p>
<p>互补色：对比色</p>
<h2><span id="配色推荐">配色推荐</span></h2><h3><span id="柱状图">柱状图</span></h3><h4><span id="不同形式及颜色设置方法">不同形式及颜色设置方法</span></h4><ul>
<li>by Plot<ul>
<li>简单柱状图</li>
<li>堆叠柱状图</li>
<li>堆叠分组柱状图</li>
</ul>
</li>
<li>by Point<ul>
<li>分组柱状图</li>
</ul>
</li>
</ul>
<h4><span id="1组柱状图-1列数据">1组柱状图 — 1列数据</span></h4><h5><span id="配色推荐">配色推荐</span></h5><ul>
<li><p>1列数据</p>
</li>
<li><p>单色</p>
</li>
<li><strong>不要用标准色</strong> ，避免明度高的颜色，即图中的标准色</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220508194021040.png" alt="image-20220508194021040"></p>
<ul>
<li><strong>饱和度高</strong>的颜色， 选用<strong>窄</strong>一些的柱体； <strong>饱和度低</strong>的颜色， 选用宽一些的柱体</li>
</ul>
<h5><span id="方法">方法</span></h5><ul>
<li><p>直接采用柔和的颜色条中的颜色</p>
</li>
<li><p>在内置颜色条中选择饱和度低的颜色</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220508194242510.png" alt="image-20220508194242510"></p>
<ul>
<li>设置透明度</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220508194327322.png" alt="image-20220508194327322"></p>
<h5><span id="常见的问题">常见的问题</span></h5><ol>
<li><p>给某个柱体单独设置颜色</p>
<ul>
<li>单独选中这个柱体，添加特殊点(这样单独选中就添加了特殊点了)，进行颜色设置</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220508194746247.png" alt="image-20220508194746247"></p>
<ul>
<li>把柱体对应到某个数据列</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220508195024348.png" alt="image-20220508195024348"></p>
</li>
</ol>
<h4><span id="2组柱状图-2列数据">2组柱状图 — 2列数据</span></h4><h5><span id="配色推荐">配色推荐</span></h5><ul>
<li><strong>内置颜色条</strong>随便用</li>
<li>注意<strong>不要选太接近的颜色</strong>就好</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220508195326258.png" alt="image-20220508195326258"></p>
<h4><span id="3组柱状图-3组数据">3组柱状图 — 3组数据</span></h4><h5><span id="配色推荐">配色推荐</span></h5><ul>
<li><strong>相近的色系</strong>。</li>
<li><strong>不要</strong>选用<strong>对比太强烈的颜色</strong></li>
<li><strong>不要滥用图案</strong>，<strong>不建议图案颜色共同使用</strong></li>
<li><strong>黑白图可以把灰度和图案进行搭配</strong></li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220508200938937.png" alt="image-20220508200938937"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220508201158427.png" alt="image-20220508201158427"></p>
<h5><span id="常见的问题">常见的问题</span></h5><p>画出有三维感的二维柱状体</p>
<p>点击柱体，在绘画属性中，选择渐变填充，单色，方向选择水平方向，从中心到两边</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220508201240998.png" alt="image-20220508201240998"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220508201353801.png" alt="image-20220508201353801"></p>
<h4><span id="多组柱状图-多组数据">多组柱状图 — 多组数据</span></h4><p>这里以6组数据为例</p>
<h5><span id="堆叠柱状图配色推荐">堆叠柱状图配色推荐</span></h5><ul>
<li><strong>面积小的部分</strong>使用比较深或者鲜明的颜色</li>
</ul>
<h5><span id="多组数据配色推荐">多组数据配色推荐</span></h5><ul>
<li>类似的颜色(相近的色系， 或者相近的明度)</li>
<li>直接采用内置或者分享配色中的数量相近的颜色条</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220508202250045.png" alt="image-20220508202250045"></p>
<h3><span id="饼图">饼图</span></h3><h4><span id="特点">特点</span></h4><ul>
<li>颜色按点设置</li>
<li>通常颜色比较多</li>
</ul>
<h4><span id="饼图配色推荐">饼图配色推荐</span></h4><ul>
<li>面积小的部分使用比较深或者鲜明的颜色</li>
<li>用内置配色搭配</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509095338801.png" alt="image-20220509095338801"></p>
<h3><span id="折线图">折线图</span></h3><h4><span id="简单折线图">简单折线图</span></h4><h5><span id="要点">要点</span></h5><ul>
<li>交错重叠的折线不能太多。<ul>
<li>如果<strong>超过四条</strong>， 建议改用<strong>堆叠折线图或者考虑其他表达方式</strong>。</li>
</ul>
</li>
<li>使用<strong>强烈的颜色</strong></li>
<li><strong>线条</strong>设置得<strong>粗一些</strong>，一般设置为3</li>
<li><p>黑白图: 颜色， <strong>线型，双线</strong>综合运用</p>
</li>
<li><p>折线图使用的颜色</p>
<ul>
<li>Color4Line</li>
<li>Candy</li>
<li>Bold1</li>
<li>Bold2</li>
<li>strong14</li>
<li>strong_vangogh7</li>
</ul>
<p>都是一些比较强烈的颜色</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220508202509790.png" alt="image-20220508202509790"></p>
<h4><span id="多条成组数据折线图">多条成组数据折线图</span></h4><h5><span id="特点">特点</span></h5><ul>
<li>连续变化的成组数据</li>
</ul>
<h5><span id="配色推荐">配色推荐</span></h5><ul>
<li>渐变，使用Palette</li>
</ul>
<h5><span id="适用于多条曲线的-palette">适用于多条曲线的 Palette</span></h5><ul>
<li>Bright</li>
<li>Spetrum</li>
<li>Rainbow_Modify</li>
<li>Heatmap4ColorBlind</li>
<li>Plasma</li>
<li>Maple</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220508204414708.png" alt="image-20220508204414708"></p>
<h3><span id="散点图">散点图</span></h3><h4><span id="普通散点图">普通散点图</span></h4><h5><span id="配色推荐">配色推荐</span></h5><ul>
<li>空心圆点， 边缘用深灰色，中间填柔和的颜色</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509095615102.png" alt="image-20220509095615102" style="zoom:80%;"></p>
<ul>
<li>实心圆点， 用强烈的颜色加透明度</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509095725862.png" alt="image-20220509095725862"></p>
<ul>
<li>按需用大小和颜色表达第三第四维度数据</li>
</ul>
<p>大小选择某一列数据映射，颜色选择某一列数据进行映射</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509101330412.png" alt="image-20220509101330412"></p>
<h3><span id="种类繁多的散点图">种类繁多的散点图</span></h3><h4><span id="方法">方法</span></h4><ul>
<li>综合运用 形状和颜色 </li>
</ul>
<h4><span id="要点">要点</span></h4><ul>
<li>数量多的用小点，少的用大点</li>
<li>可以复合两种样式表达 （例：圆圈+圆点，星星+圆点）</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509101752002.png" alt="image-20220509101752002"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509101825372.png" alt="image-20220509101825372"></p>
<h3><span id="等高线图">等高线图</span></h3><h4><span id="配色推荐">配色推荐</span></h4><ul>
<li>使用 Pallette </li>
<li>如何使颜色过渡平滑：设置 minor level</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509103410338.png" alt="image-20220509103410338"></p>
<h3><span id="热图">热图</span></h3><p>可以在设置颜色选项中选择</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509103631814.png" alt="image-20220509103631814"></p>
<h2><span id="自定义配色">自定义配色</span></h2><h3><span id="颜色管理器">颜色管理器</span></h3><p>可以选择是颜色列表还是调色板</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509103801507.png" alt="image-20220509103801507"></p>
<ul>
<li>导入颜色方案</li>
<li>新建颜色方案</li>
</ul>
<h4><span id="提取图片中的颜色">提取图片中的颜色</span></h4><ul>
<li>模板提取</li>
</ul>
<p>导入图片可以提取图片中的颜色</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509104020976.png" alt="image-20220509104020976"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509104110120.png" alt="image-20220509104110120"></p>
<ul>
<li>用滴管提取</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509103926862.png" alt="image-20220509103926862"></p>
<h3><span id="palette调色板的创建">Palette（调色板）的创建</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509104229281.png" alt="image-20220509104229281"></p>
<h2><span id="数据点-数据线-配色注意点">数据点、数据线 配色注意点</span></h2><h3><span id="单条数据线">单条数据线</span></h3><ul>
<li>最常用（保险）色：黑色、红色</li>
<li>最流行：深灰蓝、深紫蓝</li>
<li><p>不宜单独使用绿橙等中间颜色</p>
</li>
<li><p>需要<strong>叠加其他色彩信息</strong>的单条数据线，宜采用<strong>黑色</strong></p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510183403948.png" alt="image-20220510183403948"></p>
<ul>
<li>数据<strong>非常细密、跳变很多、噪声大</strong>，宜使用<strong>深灰色</strong>，更清晰</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510183418317.png" alt="image-20220510183418317"></p>
<ul>
<li>灰度图、伪彩色图中的线条、标记，宜使用<strong>红色、黄色、橙色、亮绿</strong>等较亮的色彩</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510183552811.png" alt="image-20220510183552811"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510183559583.png" alt="image-20220510183559583"></p>
<ul>
<li><strong>多彩色</strong>中的<strong>同类型数据点</strong>，<strong>宜使用黑色</strong><ul>
<li>如果还不够清楚，加上<strong>白色或黑色轮廓</strong></li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510183802611.png" alt="image-20220510183802611"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510183814684.png" alt="image-20220510183814684"></p>
<ul>
<li>多彩色图中的线，宜采用与<strong>白色或者背景色对比较强</strong>的颜色</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510183940819.png" alt="image-20220510183940819"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510183949297.png" alt="image-20220510183949297"></p>
<h3><span id="两条数据线">两条数据线</span></h3><ul>
<li>色彩对比：黑 — 红/蓝/绿，常用于<strong>主次对比</strong></li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510184129119.png" alt="image-20220510184129119"></p>
<ul>
<li>红蓝对比：常用于<strong>对比数据对比</strong></li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510184958291.png" alt="image-20220510184958291"></p>
<ul>
<li>互补色对比：蓝-橙，紫红-青绿</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510185311766.png" alt="image-20220510185311766"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510185327083.png" alt="image-20220510185327083"></p>
<ul>
<li>深浅对比：黑-灰，深蓝-浅蓝等，通常表示同一个量的变化</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510185451905.png" alt="image-20220510185451905"></p>
<ul>
<li><p>饱和度对比：灰-红，灰-蓝，常用于上叠拟合线、平滑线</p>
<ul>
<li>拟合（平滑）数据线：拟合线用彩色，背景数据用灰色</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510185608735.png" alt="image-20220510185608735"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510185621746.png" alt="image-20220510185621746"></p>
</li>
<li><p>其他的用法</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510185642045.png" alt="image-20220510185642045"></p>
<h3><span id="多条数据线">多条数据线</span></h3><ul>
<li>三条数据线常用：黑/灰-红-蓝（黑/灰表示次要）</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510185745065.png" alt="image-20220510185745065"></p>
<ul>
<li>组合配色</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510185814384.png" alt="image-20220510185814384"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510190151475.png" alt="image-20220510190151475"></p>
<h3><span id="很多数据-成组数据">很多数据、成组数据</span></h3><ul>
<li>彩虹色渐变</li>
<li>近似色渐变</li>
<li>深浅渐变</li>
<li>组合渐变</li>
</ul>
<h3><span id="常选颜色区域">常选颜色区域</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510185845819.png" alt="image-20220510185845819"></p>
]]></content>
      <categories>
        <category>画图</category>
        <category>origin</category>
      </categories>
      <tags>
        <tag>origin</tag>
      </tags>
  </entry>
  <entry>
    <title>originL1</title>
    <url>/2022/05/05/originL1/</url>
    <content><![CDATA[<h3><span id="基本界面">基本界面</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220505101915519.png" alt="image-20220505101915519"></p>
<h4><span id="界面和语言设置">界面和语言设置</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220505102033614.png" alt="image-20220505102033614"></p>
<h3><span id="基本图像类型及要求">基本图像类型及要求</span></h3><h4><span id="位图">位图</span></h4><ul>
<li>位图也称为像素图，<strong>使用像素点来描述图像</strong></li>
<li>特点：可呈现照片般的真实效果，其清晰度与分辨率直接相关</li>
<li>格式：TIFF JPG BMP</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220505102317502.png" alt="image-20220505102317502"></p>
<h4><span id="矢量图">矢量图</span></h4><ul>
<li>矢量图<strong>以数学向量方式记录图像</strong></li>
<li>特点：清晰度与分辨率无关</li>
<li>格式：EPS PDF PS WMF 等</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220505102355712.png" alt="image-20220505102355712"></p>
<h4><span id="科技期刊图版格式要求">科技期刊图版格式要求</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220505102457494.png" alt="image-20220505102457494"></p>
<h2><span id="绘图基础">绘图基础</span></h2><h3><span id="数据导入">数据导入</span></h3><h4><span id="工作簿">工作簿</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220505102646180.png" alt="image-20220505102646180"></p>
<h4><span id="矩阵工作簿">矩阵工作簿</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220505105419093.png" alt="image-20220505105419093"></p>
<h4><span id="数据文件类型">数据文件类型</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220505105825853.png" alt="image-20220505105825853"></p>
<h5><span id="acscii文件的导入">ACSCII文件的导入</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220505105907085.png" alt="image-20220505105907085"></p>
<p>导入</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220505105925577.png" alt="image-20220505105925577"></p>
<p>来源和标题线</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220505110403913.png" alt="image-20220505110403913"></p>
<p>Digitizer</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220505110842834.png" alt="image-20220505110842834"></p>
<h4><span id="数据连接">数据连接</span></h4><ol>
<li>连接到文件：Text/CSV、 Excel 、 MATLAB 等</li>
<li>连接到网页：使用数据连接器导入在线的第三方数据文件</li>
<li>连接到数据库</li>
</ol>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220505111459415.png" alt="image-20220505111459415"></p>
<h3><span id="图形的绘制和导出">图形的绘制和导出</span></h3><h4><span id="图形窗口层次结构">图形窗口层次结构</span></h4><ul>
<li>页面<ul>
<li>图形窗口背景（白色区域）</li>
</ul>
</li>
<li>图形<ul>
<li>包含一个或者多个图层</li>
</ul>
</li>
<li>图层<ul>
<li>三要素<ul>
<li>坐标轴</li>
<li>数据图</li>
<li>与之关联的图例或文本</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220505111611321.png" alt="image-20220505111611321"></p>
<h4><span id="内置的模板库">内置的模板库</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220505111853175.png" alt="image-20220505111853175"></p>
<h4><span id="基本绘图方法">基本绘图方法</span></h4><h5><span id="设置列的类型选择列来绘制图形"><strong>设置列的类型，选择列来绘制图形</strong></span></h5><ul>
<li>选中列右键选择设置为</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220505112258757.png" alt="image-20220505112258757"></p>
<p>在下方菜单栏</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220505134353725.png" alt="image-20220505134353725"></p>
<p>选中当前的工作簿，选择想要绘制的图形</p>
<h5><span id="图表绘制对话框绘图">图表绘制对话框绘图</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220505134939493.png" alt="image-20220505134939493"></p>
<p><strong>注意这里的点击添加</strong>！！！！</p>
<p><strong>图层管理对话框</strong></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220505140425310.png" alt="image-20220505140425310"></p>
<h5><span id="小结">小结</span></h5><ol>
<li><p>在工作表中选择数据绘图</p>
<ul>
<li><p>导入数据，设置列类型</p>
</li>
<li><p>选择数据列<strong>（选中要绘制的列）</strong></p>
</li>
<li>应用菜单 栏（工具栏 ）适宜的绘图模板</li>
</ul>
</li>
<li><p>利用图表绘制对话框绘图</p>
<ul>
<li>可在项目文件范围内选取不同工作表的数据列，绘制在同一图形上</li>
<li>可忽略工作表中数据列类型，为其重新指定列类型</li>
</ul>
</li>
</ol>
<h4><span id="图形定制">图形定制</span></h4><ul>
<li>数据点</li>
<li>坐标轴</li>
<li>图层</li>
<li>图形对象</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220505141104989.png" alt="image-20220505141104989"></p>
<h5><span id="绘图细节对话框">绘图细节对话框</span></h5><p>在菜单栏的格式选项中</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220505142346913.png" alt="image-20220505142346913"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220505142658424.png" alt="image-20220505142658424"></p>
<h5><span id="x-y坐标轴">X、Y坐标轴</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220505143146301.png" alt="image-20220505143146301" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220505143131448.png" alt="image-20220505143131448" style="zoom:67%;"></p>
<h5><span id="图例">图例</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220505143517439.png" alt="image-20220505143517439"></p>
<h5><span id="工具和对象编辑工具栏">工具和对象编辑工具栏</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220505144001247.png" alt="image-20220505144001247"></p>
<h4><span id="导出图形">导出图形</span></h4><p>导出图形选择项目管理器，选择想要导出的图形右键菜单，点击导出图形，也可以全部导出，在菜单栏上的文件中有导出的选项</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220505144620024.png" alt="image-20220505144620024" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220505144906898.png" alt="image-20220505144906898" style="zoom: 50%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220505144959452.png" alt="image-20220505144959452" style="zoom:50%;"></p>
<h2><span id="一些快捷键和操作">一些快捷键和操作</span></h2><h4><span id="赋予某一列函数公式">赋予某一列函数公式</span></h4><ul>
<li>选择一列</li>
<li>Ctrl+Q，或者右键F(x)=这一行，选择对话框</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220505150717821.png" alt="image-20220505150717821"></p>
<ul>
<li>在输入框内赋予该列关于某列的一个函数</li>
</ul>
<h4><span id="设置图像的模板">设置图像的模板</span></h4><p>对于你要保存的图像模板，右键选择保存模板或者保存模板为，可以命名模板和规定模型文件类型</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220506152730892.png" alt="image-20220506152730892" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220506152803697.png" alt="image-20220506152803697" style="zoom:67%;"></p>
<h4><span id="将当前图像的绘制方法复制到其他工作簿中">将当前图像的绘制方法复制到其他工作簿中</span></h4><p>右键图像选择复制(批量绘图)</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220506153855630.png" alt="image-20220506153855630" style="zoom:67%;"></p>
<p>选择你要绘画的工作簿</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220506153926412.png" alt="image-20220506153926412" style="zoom:67%;"></p>
<h4><span id="对图像放大和平移">对图像放大和平移</span></h4><p>z+鼠标滚轮：刻度的放大和缩小</p>
<p>x+左右移动：左右平移</p>
<p>ctrl+R：复原</p>
<h4><span id="更新图例">更新图例</span></h4><p>选中图例，右键，图例\更新图例</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220506155728209.png" alt="image-20220506155728209" style="zoom:67%;"></p>
<p>图例的自动译码模型，可以选择自定义</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220506155807860.png" alt="image-20220506155807860"></p>
<p>自定义格式旁边右箭头可以添加格式，构成自己的图例样式</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220506155836458.png" alt="image-20220506155836458" style="zoom:67%;"></p>
<h4><span id="用色彩影射点">用色彩影射点</span></h4><p>先选择添加色彩标尺，图中左边工具栏中四条色彩杆的图标</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220506161305351.png" alt="image-20220506161305351"></p>
<h4><span id="双击图像空白处可以弹出图像属性对话框">双击图像空白处可以弹出图像属性对话框</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220506161450795.png" alt="image-20220506161450795"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220506161502763.png" alt="image-20220506161502763"></p>
<h4><span id="创建复制图后对原图修改对复制图进行一键修改">创建复制图后对原图修改，对复制图进行一键修改</span></h4><p>对一张图像进行复制后，我们可以调整X轴、Y轴对应的数据，然后对原图进行修改，一键对所有复制图进行样式的同步</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220506193507240.png" alt="image-20220506193507240"></p>
<p>对原图的样式进行复制</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220506193744663.png" alt="image-20220506193744663"></p>
<p>在菜单栏的编辑中，选择粘贴格式(高级)</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220506193729858.png" alt="image-20220506193729858"></p>
<p>应用格式，选择适用范围</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220506193841647.png" alt="image-20220506193841647"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220506193858069.png" alt="image-20220506193858069"></p>
<h4><span id="合并多个图像">合并多个图像</span></h4><p>在图层管理中修改图像中各个图像之间的间隔</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220506194632215.png" alt="image-20220506194632215"></p>
<p>默认情况下，如果拖动图形层并调整其大小，或者在合并时调整了该层的大小，则文字字体和其他图形对象将重新调整大小。将“缩放模式”设置为“固定因子”可以防止在调整图层大小时缩放字体大小/线条厚度。（此行为也可以在“打印详细信息”对话框（图层级别）的“大小”选项卡中进行控制。）</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220506194904222.png" alt="image-20220506194904222"></p>
<h4><span id="数据筛选器">数据筛选器</span></h4><p>以某一列的数值作为筛选值，选择右上方的漏斗图标，如图中所示</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220506195153031.png" alt="image-20220506195153031"></p>
<p>点击列左上角的绿色漏斗可以选择筛除数据</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220506200205517.png" alt="image-20220506200205517"></p>
<h4><span id="直接粘贴图像到wordppt中">直接粘贴图像到Word\PPT中</span></h4><ul>
<li>点击要复制的图像，Ctrl+J复制</li>
<li>在Word或者PPT中，Ctrl+V进行粘贴</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220506202922034.png" alt="image-20220506202922034"></p>
<p>可以在Word中选择编辑，打开Origin对图像进行调整</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220506203009971.png" alt="image-20220506203009971"></p>
<p>可以传送图像到PPT中</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220506203142269.png" alt="image-20220506203142269"></p>
<h4><span id="3d图像的叠加">3D图像的叠加</span></h4><p>双击图层1的图标</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220506205412463.png" alt="image-20220506205412463" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220506205443207.png" alt="image-20220506205443207" style="zoom:67%;"></p>
<p>选中相同的短名称的，选择图像，按右箭头添加</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220506205456493.png" alt="image-20220506205456493"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220506205722047.png" alt="image-20220506205722047"></p>
<h4><span id="利用矩阵导入图像">利用矩阵导入图像</span></h4><p>新建一个矩阵工作簿,点击数据\从文件导入，选择图像到矩阵</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220507215134829.png" alt="image-20220507215134829"></p>
]]></content>
      <categories>
        <category>画图</category>
        <category>origin</category>
      </categories>
      <tags>
        <tag>origin</tag>
      </tags>
  </entry>
  <entry>
    <title>originL2</title>
    <url>/2022/05/07/originL2/</url>
    <content><![CDATA[<h2><span id="2022b新功能">2022b新功能</span></h2><ul>
<li>导出图为SVG格式<ul>
<li>支持导出图为SVG格式</li>
</ul>
</li>
<li><p>窗口排列和窗口贴靠</p>
<ul>
<li><p>新对话框可按所需顺序排列窗口 </p>
</li>
<li><p>支持 theme 保存设置再次使用</p>
</li>
<li>拖拽窗口标题栏到工作 区边缘， 窗口自动贴靠一侧分屏显示</li>
<li>Shift + 拖拽，并排排列窗口 </li>
<li>Alt + 拖拽，两窗口交换位置</li>
</ul>
</li>
<li>支持GeoTIFF图片<ul>
<li>GeoTIFF 文件的导入导出 </li>
<li>对 GeoTIFF 图片进行图像处理并进一步绘图 </li>
<li>(批量) 导入 GeoTIFF 格式的栅格数据进行处理分析</li>
</ul>
</li>
<li>对RS/GIS数据的进一步支持<ul>
<li>对堆叠矩阵或图像进行插值 </li>
<li>添加 IDW 和 Kriging算法 </li>
<li>导入 NC 时计算指定月份的年平均数据，例如夏季 （6-9月） </li>
<li>堆叠矩阵支持时间维度上计算周期性的数学计算</li>
</ul>
</li>
<li>Notes窗口支持富文本及图片表格</li>
<li>优化了Symbol Map对话框</li>
<li>距离标注工具</li>
<li>一键添加小图编号</li>
<li>坐标轴支持统一的数量级设置</li>
<li>断开公式等数据链接，保留数值</li>
</ul>
<h2><span id="跟着论文学绘图">跟着论文学绘图</span></h2><h4><span id="原位拉曼光谱图">原位拉曼光谱图</span></h4><h5><span id="数据导入多个数据文件的导入">数据导入（多个数据文件的导入）</span></h5><ul>
<li>使用导入多个ASCII文件（菜单/数据/从文件导入/多个ASCII文件），选中需要导入的11个文件</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206111418731.png" alt="image-20220611141753188" style="zoom: 80%;"></p>
<h5><span id="数据筛除删除重复的x列">数据筛除（删除重复的X列）</span></h5><ul>
<li>原数据中出现了重复的X列，进行删除</li>
<li>选择数据(菜单/编辑/选择)</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206111446066.png" alt="image-20220611144605963" style="zoom:80%;"></p>
<ul>
<li>选择跳行模式，设置好测试选中目标行，进行删除（隐藏只是将列隐藏，还是会存在）</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206111447106.png" alt="image-20220611144706916" style="zoom:67%;"></p>
<h5><span id="设置x轴数据时间">设置X轴数据（时间）</span></h5><ul>
<li>将其插入到数据列的长名称中</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206111449050.png" alt="image-20220611144912962" style="zoom:80%;"></p>
<h5><span id="绘制等高线图">绘制等高线图</span></h5><ul>
<li>全选数据，选择（菜单/绘图/等高线图/等高线图-颜色填充）</li>
<li>X值：列标签，长名称</li>
<li>Y值：第一列</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206111453026.png" alt="image-20220611145346836" style="zoom:67%;"></p>
<ul>
<li>将图片的等高线去除</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206111456716.png" alt="image-20220611145601529" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206111501653.png" alt="image-20220611150116300" style="zoom: 67%;"></p>
<h5><span id="绘制三维网格图">绘制三维网格图</span></h5><h6><span id="转换数据为xyz形式">转换数据为XYZ形式</span></h6><ul>
<li>将刚才的数据转换为XYZ数据（菜单/工作表/转换为XYZ数据）</li>
<li>设置X值为X数据跨列/列标签/长名称，Y值为第一列</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206111508120.png" alt="image-20220611150815011" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206111509284.png" alt="image-20220611150906119" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206111510267.png" alt="image-20220611151002082" style="zoom:67%;"></p>
<h6><span id="xyz数据网格化插值处理">XYZ数据网格化（插值处理）</span></h6><ul>
<li>将数据转换为矩阵（菜单/工作表/转换为矩阵/XYZ网格化）</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206111513164.png" alt="image-20220611151354035" style="zoom:67%;"></p>
<ul>
<li>在网格设置中，设置行数和列数，会平滑地插入相应位置的数据</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206111514813.png" alt="image-20220611151443630" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206111519640.png" alt="image-20220611151912484" style="zoom:67%;"></p>
<h6><span id="绘图">绘图</span></h6><ul>
<li>选中矩阵，选择绘图/带投影的3D颜色映射曲面图</li>
<li>这时候绘制出来的是曲面的颜色映射填充</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206111524157.png" alt="image-20220611152428890" style="zoom:67%;"></p>
<ul>
<li><p>我们需要的是网格线的颜色映射</p>
<ul>
<li>首先将曲面的填充设置为逐块填充，颜色设置为白</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206111536191.png" alt="image-20220611153434105" style="zoom:80%;"></p>
<ul>
<li>然后将网格的线条颜色的颜色映射开启，线条宽度设置为2</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206111535869.png" alt="image-20220611153554718" style="zoom: 67%;"></p>
</li>
</ul>
<p>  <img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206131442438.png" alt="image-20220613144253122" style="zoom:67%;"></p>
<h6><span id="拼图">拼图</span></h6><p>使用Layout，插入两张图片</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206131451518.png" alt="image-20220613145145320" style="zoom:67%;"></p>
<h4><span id="砂石骨料的颗粒级配图">砂石骨料的颗粒级配图</span></h4><h5><span id="成品图">成品图</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206131459990.png" alt="image-20220613145956826" style="zoom:67%;"></p>
<h5><span id="数据">数据</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206131454746.png" alt="image-20220613145427570" style="zoom:67%;"></p>
<p>直接全部选中绘制折线图</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206131454786.png" alt="image-20220613145453662" style="zoom:67%;"></p>
<h5><span id="图形设置">图形设置</span></h5><ul>
<li>接触三条线段的组合，可以对一条直线单独设置</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206131456098.png" alt="image-20220613145635003" style="zoom:67%;"><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206131457442.png" alt="image-20220613145722319" style="zoom:67%;"><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206131457272.png" alt="image-20220613145750162" style="zoom:67%;"></p>
<ul>
<li>设置坐标轴</li>
</ul>
<p>x轴的范围为0.0625~8，我们可以使用Log2的类型</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206131502617.png" alt="image-20220613150208487" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206131502915.png" alt="image-20220613150222797" style="zoom:67%;"></p>
<ul>
<li>添加上轴和右轴，以及网格</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206131506118.png" alt="image-20220613150624994" style="zoom:67%;"></p>
<ul>
<li>使用B-样条让两条虚线变得光滑</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206131507181.png" alt="image-20220613150725072" style="zoom:67%;"></p>
<ul>
<li>网格设置为浅灰色，修改图例为长名称</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206131519584.png" alt="image-20220613151956457" style="zoom:67%;"></p>
<h4><span id="球体密度剖面图">球体密度剖面图</span></h4><h5><span id="数据">数据</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206131526112.png" alt="image-20220613152635009" style="zoom:67%;"></p>
<ul>
<li>通过测量得到同一个入射角不同半径下球体的密度数据。 </li>
<li>希望画出球体密度剖面图，用不同颜色的圆环表达不同的密度</li>
<li>一个圈对应一组数据</li>
</ul>
<h6><span id="数据处理">数据处理</span></h6><ul>
<li>有5组数据，所以有5个圆，需要构造5个圆</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206131531673.png" alt="image-20220613153137556" style="zoom:80%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206131532522.png" alt="image-20220613153217412" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206131532705.png" alt="image-20220613153241609" style="zoom:67%;"></p>
<h5><span id="绘图">绘图</span></h5><p>利用前两列绘制出极坐标图</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206131536363.png" alt="image-20220613153635220" style="zoom:67%;"></p>
<p>启用填充</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206131537679.png" alt="image-20220613153718530" style="zoom:67%;"></p>
<p>采用颜色映射</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206131538398.png" alt="image-20220613153829295" style="zoom:67%;"></p>
<p>线条宽度设置为0</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206131540320.png" alt="image-20220613154021172" style="zoom:67%;"></p>
<p>中间区分度不够，增加色阶级别</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206131543345.png" alt="image-20220613154353161" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206131544842.png" alt="image-20220613154442732" style="zoom:67%;"></p>
<p>删除中间的圆形轴，添加下轴</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206131548569.png" alt="image-20220613154805445" style="zoom:67%;"></p>
<p>设置好的图形</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206131550835.png" alt="image-20220613155054725" style="zoom:67%;"></p>
<h2><span id="多图层绘制攻略">多图层绘制攻略</span></h2><h4><span id="图的结构">图的结构</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206161552802.png" alt="image-20220616155153204" style="zoom:80%;"></p>
<h3><span id="多轴图">多轴图</span></h3><h4><span id="绘制原理">绘制原理</span></h4><ul>
<li>重叠的图层<ul>
<li>大小相等，上下重叠</li>
</ul>
</li>
<li>图层相互链接</li>
<li>轴根据需要设为一一对应</li>
</ul>
<h4><span id="绘图方法">绘图方法</span></h4><h5><span id="直接在绘图菜单中选择所需要的模板绘图">直接在绘图菜单中选择所需要的模板绘图</span></h5><p><strong>双Y轴</strong></p>
<p>绘图-多面板/多轴-双Y轴柱状图</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206181947090.png" alt="image-20220618194747277" style="zoom:67%;"></p>
<p><strong>三Y轴</strong></p>
<p>下面图的绘制方法</p>
<ul>
<li>先用取值范围差异较大的两列进行一个双Y轴柱形图的绘制</li>
<li>然后在图层管理中，添加第三列的柱形图到这张图中。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206182000915.png" alt="image-20220618200058725" style="zoom:67%;"></p>
<h5><span id="往图层中添加数据">往图层中添加数据</span></h5><p>将前一个例子中的前两列变成堆叠柱状图</p>
<ul>
<li><strong>需要将前两列作为一个组，才能进行堆叠操作</strong>，所以需要进行添加数据操作</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206182007218.png" alt="image-20220618200752097" style="zoom:67%;"></p>
<ul>
<li>在图层中选择使用累积堆叠后，便可以将前两列合成一列</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206182009162.png" alt="image-20220618200947016" style="zoom:67%;"></p>
<p>画图之后修改绘图类型 </p>
<ul>
<li>绘图模板中3Y-YYs默认绘制的是折线图</li>
<li>我们可以对每条数据进行绘图类型的修改，达到我们想要的效果</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206182013937.png" alt="image-20220618201342794" style="zoom:67%;"></p>
<ul>
<li>将两列数据转换为柱形图后重叠</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206182017855.png" alt="image-20220618201747739" style="zoom:67%;"></p>
<ul>
<li>需要在Graph中勾选上红色框中的选项</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206182018016.png" alt="image-20220618201854851" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206182029510.png" alt="image-20220618202939404" style="zoom:67%;"></p>
<h5><span id="工具栏或者菜单添加图层">工具栏或者菜单添加图层</span></h5><p>激活图像窗口后，可以在菜单栏上的插入中选择插入新图层</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206182039712.png" alt="image-20220618203901609" style="zoom:67%;"></p>
<p>也可以在右侧选择添加所需要的轴作为新图层</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206182048017.png" alt="image-20220618204818898" style="zoom:67%;"></p>
<p>在关联坐标轴刻度中，自定义的X1和X2代表轴的两端</p>
<p>公式中的X1和X2是指关联图层X轴的两端</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206182049534.png" alt="image-20220618204945416" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206182101944.png" alt="image-20220618210106847" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206182103815.png" alt="image-20220618210312679" style="zoom:67%;"></p>
<p>这里如果点在线的下面，可以在图层内拖动它们的顺序，来决定哪个在上方</p>
<h5><span id="apps">APPs</span></h5><ul>
<li>Double Y Toolbar</li>
<li>Double X Plot</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206182111498.png" alt="image-20220618211138230" style="zoom:67%;"></p>
<h3><span id="组合图">组合图</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206182122243.png" alt="image-20220618212259102" style="zoom:80%;"></p>
<h2><span id="一些操作">一些操作</span></h2><h4><span id="对函数进行积分">对函数进行积分</span></h4><p>选中图像后，在快速分析中，选择积分</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220507231452922.png" alt="image-20220507231452922" style="zoom:67%;"></p>
<p>可对积分区域、积分函数进行调整</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220507231522713.png" alt="image-20220507231522713" style="zoom:67%;"></p>
<h4><span id="列统计">列统计</span></h4><p>可以选择分组进行列的统计</p>
<ul>
<li>以某一些列作为分组的依据</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220523140742968.png" alt="image-20220523140742968" style="zoom: 67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220523140754689.png" alt="image-20220523140754689" style="zoom: 67%;"></p>
<p>可以选择保留的位数</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220523140815427.png" alt="image-20220523140815427" style="zoom: 67%;"></p>
<h4><span id="横坐标的设置">横坐标的设置</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206061540393.png" alt="image-20220606154007666" style="zoom:80%;"></p>
<p>在类型选项中，可以设置非线性的刻度，例如下图的Log2</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206061541769.png" alt="image-20220606154121681"></p>
<h4><span id="色阶带的头尾去除">色阶带的头尾去除</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206061559103.png" alt="image-20220606155954966" style="zoom:67%;"></p>
<h4><span id="快速屏蔽一些列隔一列删除一列">快速屏蔽一些列（隔一列删除一列）</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206061637723.png" alt="image-20220606163750623" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206061638599.png" alt="image-20220606163816033" style="zoom: 50%;"></p>
<h4><span id="对三维的数据进行插值">对三维的数据进行插值</span></h4><p>可以使用xyz网格化</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206062002923.png" alt="image-20220606200231648" style="zoom: 67%;"></p>
<p>在网格设置中，设置列数和行数，会根据行列数进行插值形成一个矩阵</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206062003442.png" alt="image-20220606200326294"></p>
<h4><span id="三维谱图绘制">三维谱图绘制</span></h4><p>绘制要点</p>
<ul>
<li><p>数据构造</p>
<ul>
<li>数据导入</li>
<li>X值不一样时需插值(Analysis：Mathematics：Interpolate Y from X)</li>
<li>删除重复的X</li>
<li>为Y数据列设定采样时间</li>
</ul>
</li>
<li><p>插值平滑（不是必须的）</p>
<ul>
<li><p>XYZ 网格化 </p>
<ul>
<li><p>从Virtual Matrix 转换为 XYZ 数据 （Worksheet:  Convert to XYZ） </p>
</li>
<li><p>XYZ Griding 平滑数据 (Worksheet: Convert to  Matrix: XYZ Gridding) </p>
</li>
</ul>
</li>
<li><p>3D Smooth app</p>
</li>
</ul>
</li>
<li>绘图推荐<ul>
<li>Y偏移堆积线图 </li>
<li>瀑布图</li>
<li>等高线图 </li>
<li>线框曲面图</li>
</ul>
</li>
</ul>
<h4><span id="在word中插入origin导出的图片">在Word中插入Origin导出的图片</span></h4><p>推荐使用EMF/WMF/SVG，其他的Word会限制分辨率，透明背景也可能会发黄</p>
<p>Origin导出图片到Word中，</p>
<ul>
<li>复制页面</li>
<li>复制页面为图片</li>
<li>导出为EMF/WMF</li>
</ul>
]]></content>
      <categories>
        <category>画图</category>
        <category>origin</category>
      </categories>
      <tags>
        <tag>origin</tag>
      </tags>
  </entry>
  <entry>
    <title>originL3-统计图表</title>
    <url>/2022/05/18/originL3-%E7%BB%9F%E8%AE%A1%E5%9B%BE%E8%A1%A8/</url>
    <content><![CDATA[<p>22</p>
<h2><span id="箱线图">箱线图</span></h2><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220518155315866.png" alt="image-20220518155315866"></p>
<p>点击箱体，可以对箱体进行调节</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220518155547838.png" alt="image-20220518155547838"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220518155559573.png" alt="image-20220518155559573"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220518215239374.png" alt="image-20220518215239374"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220518215525469.png" alt="image-20220518215525469"></p>
<p>多因子组箱线图</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220518222229289.png" alt="image-20220518222229289"></p>
<h2><span id="直方图">直方图</span></h2><p>堆积直方图</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220519101114832.png" alt="image-20220519101114832"></p>
<p>XYY3D条状图</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220519105009764.png" alt="image-20220519105009764"></p>
<p>难点：</p>
<ul>
<li>首先要理解XYY3D条状图，它的Y决定Z方向的条状高度</li>
<li>要想让柱形变扁，需要调整<strong>轮廓</strong>中的Z方向条状宽度为0</li>
<li>想让刻度显示名称，可以在<strong>刻度线标签</strong>中进行修改</li>
</ul>
<h2><span id="分布图">分布图</span></h2><p>简单的分布图</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220519160250345.png" alt="image-20220519160250345"></p>
<p>分布图加轴须</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220519161017291.png" alt="image-20220519161017291"></p>
<h2><span id="组边际图">组边际图</span></h2><p>边际直方图</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220519163545758.png" alt="image-20220519163545758"></p>
<p>组边际图</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220519163513904.png" alt="image-20220519163513904"></p>
]]></content>
      <categories>
        <category>画图</category>
        <category>origin</category>
      </categories>
      <tags>
        <tag>origin</tag>
      </tags>
  </entry>
  <entry>
    <title>origin图形分析技巧</title>
    <url>/2022/05/09/origin%E5%9B%BE%E5%BD%A2%E5%88%86%E6%9E%90%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>注：标题中括号内是使用到的工具</p>
<h2><span id="几何">几何</span></h2><h3><span id="距离">距离</span></h3><h4><span id="任意两点之间的距离data-cursor-数据光标">任意两点之间的距离（Data Cursor — 数据光标）</span></h4><p>可使用数据光标对点进行标记，然后设置得出相对量，计算出距离</p>
<p>左边工具栏，图中红色框中的图标即为Data Cursor</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509153341339.png" alt="image-20220509153341339"></p>
<p>右键数据信息，点击设置，修改标题报告为两个标记点坐标和相对量</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509153643789.png" alt="image-20220509153643789"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509153952437.png" alt="image-20220509153952437"></p>
<p>也可以使用APP中的<strong>Distance Between Two Points</strong></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509154345929.png" alt="image-20220509154345929"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509154339908.png" alt="image-20220509154339908"></p>
<h3><span id="面积">面积</span></h3><h4><span id="计算曲线的面积">计算曲线的面积</span></h4><h5><span id="计算曲线面积gadgetsintegrate-快捷分析积分">计算曲线面积（Gadgets:Integrate — 快捷分析\积分）</span></h5><p>菜单栏上的快捷分析，积分选项，可调整输出和基线，以及是求绝对面积还是数学面积</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509155037145.png" alt="image-20220509155037145"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509154943482.png" alt="image-20220509154943482"></p>
<h5><span id="计算闭合曲线面积polygon-area-闭合曲线积分">计算闭合曲线面积（Polygon area — 闭合曲线积分）</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509155803519.png" alt="image-20220509155803519"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509155837640.png" alt="image-20220509155837640"></p>
<h5><span id="计算交叠区域面积app-overlap-area">计算交叠区域面积（App Overlap area）</span></h5><p>使用App：Overlap area</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509162422552.png" alt="image-20220509162422552"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509162403547.png" alt="image-20220509162403547"></p>
<h3><span id="切线apptangent">切线（APP：tangent）</span></h3><p>使用App：tangent</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509184940140.png" alt="image-20220509184940140"></p>
<h2><span id="分析">分析</span></h2><h3><span id="屏蔽数据">屏蔽数据</span></h3><h4><span id="屏蔽散点">屏蔽散点</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509194606744.png" alt="image-20220509194606744"></p>
<p>选择要屏蔽的点，可在下栏中选择隐藏</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509194710121.png" alt="image-20220509194710121"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509194734548.png" alt="image-20220509194734548"></p>
<h5><span id="连接缺失部分">连接缺失部分</span></h5><p>下图屏蔽了第三个点</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509195445465.png" alt="image-20220509195445465"></p>
<p>在根部的Graph的显示选项中，选择跨缺失数据连接直线</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509195604341.png" alt="image-20220509195604341" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509195629305.png" alt="image-20220509195629305" style="zoom:67%;"></p>
<h5><span id="拟合时自动更新设置">拟合时自动更新设置</span></h5><p>屏蔽点之后，拟合线仍不变</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509195831706.png" alt="image-20220509195831706" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509195929982.png" alt="image-20220509195929982" style="zoom:67%;"></p>
<p>可以设置自动更新</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509195916662.png" alt="image-20220509195916662" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509200025867.png" alt="image-20220509200025867" style="zoom:67%;"></p>
<h3><span id="分析范围">分析范围</span></h3><h4><span id="计算区域统计值快速分析-统计">计算区域统计值（快速分析-统计）</span></h4><p>快速分析-统计-打开对话框</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509203307090.png" alt="image-20220509203307090" style="zoom:67%;"></p>
<p>可以选择起始和结束、以及平均线</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509203403863.png" alt="image-20220509203403863" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509203426442.png" alt="image-20220509203426442" style="zoom:67%;"></p>
<h4><span id="快速分类快捷分析-集群分析">快速分类（快捷分析-集群分析）</span></h4><p>快捷分析-集群分析</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509203605649.png" alt="image-20220509203605649" style="zoom:67%;"></p>
<p>对话框直接默认确定</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509203634013.png" alt="image-20220509203634013" style="zoom:67%;"></p>
<p>自己选中区域然后创建分类</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509203751369.png" alt="image-20220509203751369"></p>
<p>实现分类</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509203829670.png" alt="image-20220509203829670"></p>
<h4><span id="设置分析范围数据设置数据范围">设置分析范围（数据\设置数据范围）</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510151312270.png" alt="image-20220510151312270"></p>
<p>也可使用左侧工具栏中的数据选择器</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510151841980.png" alt="image-20220510151841980"></p>
<p>例子：将函数分为两部分进行拟合</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510152129373.png" alt="image-20220510152129373"></p>
<h2><span id="查找">查找</span></h2><h3><span id="交点">交点</span></h3><h4><span id="二维快捷分析相交">二维（快捷分析\相交）</span></h4><p>使用快捷分析\相交</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510140656506.png" alt="image-20220510140656506"></p>
<p>默认确定后可在图中自行调整ROI框的大小</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510140759264.png" alt="image-20220510140759264"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510140813273.png" alt="image-20220510140813273"></p>
<p>点击箭头可以输出相交点的坐标到工作簿中</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510140943467.png" alt="image-20220510140943467"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510140952929.png" alt="image-20220510140952929"></p>
<p>可在设置中选择交点标记，在图中绘制处交点坐标</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510141349036.png" alt="image-20220510141349036"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510141708894.png" alt="image-20220510141708894"></p>
<h4><span id="三维app-3d-surfaces-intersection">三维（APP 3D Surfaces intersection）</span></h4><p>红色区域即为交集</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510143330080.png" alt="image-20220510143330080"></p>
<h3><span id="查找指定y值处的x值">查找指定Y值处的X值</span></h3><h4><span id="快速浏览多图层中指定x处所有曲线的值app-level-crossing">快速浏览多图层中指定X处所有曲线的值（APP Level Crossing）</span></h4><p>Crossing Level即为Y轴数值</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510144247001.png" alt="image-20220510144247001"></p>
<p>可选择输出</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510144319818.png" alt="image-20220510144319818"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510144529889.png" alt="image-20220510144529889"></p>
<p>将输出结果中的x,y值拖动到图中，再修改图像为散点图，可以显示交点</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510144650572.png" alt="image-20220510144650572"></p>
<p>调整一下</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510144925434.png" alt="image-20220510144925434"></p>
<h4><span id="批量标注x值处的y值快捷分析纵向坐标读取工具">批量标注X值处的Y值（快捷分析\纵向坐标读取工具）</span></h4><p>使用快捷分析\纵向坐标读取工具</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510145042251.png" alt="image-20220510145042251"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510145344767.png" alt="image-20220510145344767"></p>
<h2><span id="一些重要的点">一些重要的点</span></h2><h3><span id="高亮数据">高亮数据</span></h3><p>左侧工具栏选用高亮工具</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510145935251.png" alt="image-20220510145935251"></p>
<p>可在工具簿中选中数据，会在所有图中高亮显示，也可在图中选中数据点</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510150059883.png" alt="image-20220510150059883"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510150536344.png" alt="image-20220510150536344"></p>
<p>对于选中的点可以进行创建子表、删除、屏蔽等操作，屏蔽可以反选没有选中的点</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510150744049.png" alt="image-20220510150744049"></p>
]]></content>
      <categories>
        <category>画图</category>
        <category>origin</category>
      </categories>
      <tags>
        <tag>origin</tag>
      </tags>
  </entry>
  <entry>
    <title>originL4-LabTalk</title>
    <url>/2022/05/30/originL4-LabTalk/</url>
    <content><![CDATA[<h2><span id="labtalk的介绍">LabTalk的介绍</span></h2><p><strong>1. 什么是LabTalk？</strong></p>
<p>LabTalk 是 OriginPro 原生脚本语言。</p>
<p><strong>2. LabTalk能干什么？</strong></p>
<p>通过 LabTalk， 可以方便地进行自定义操作， 例如列值计算， 自定义拟合函数， 批量处理等。</p>
<p><strong>3. 如何运行LabTalk？</strong></p>
<ul>
<li>脚本窗口（窗口: 脚本窗口）</li>
<li>命令窗口（窗口: 命令窗口）</li>
<li>代码编译器（Code Builder，自定义程序按钮，查看: 代码编译器）</li>
<li>设置列值对话框</li>
<li><p>自定义拟合函数</p>
</li>
<li><p>等等</p>
</li>
</ul>
<h5><span id="例子">例子</span></h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 运行文件中的Main节</span></span><br><span class="line">run.section(Custom, Main); <span class="comment">// Custom.ogs在用户文件夹下，不用指定路径，也不需要文件后续（.ogs） </span></span><br><span class="line">run.section(%YCustom.ogs, Main); <span class="comment">// 也可以指定文件的全路径，%Y为用户文件夹的字符串存储器 </span></span><br><span class="line"><span class="comment">// 运行文件</span></span><br><span class="line">run.file(MyLabTalk); </span><br><span class="line">run.file(%YMyLabTalk.ogs);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一个例子代码：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 激活窗口中的book1</span></span><br><span class="line">window -a book1;   <span class="comment">// 命令语句</span></span><br><span class="line">newsheet name:=shifted cols:=<span class="number">11</span>;       <span class="comment">// X-function</span></span><br><span class="line">colcopy irng:=<span class="number">1</span>!<span class="number">1</span>:<span class="number">2</span> orng:=<span class="number">2</span>!<span class="number">1</span>:<span class="number">2</span>;       <span class="comment">// X-function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= <span class="number">11</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">	range r1 = <span class="number">2</span>!<span class="number">2</span>, r1i = <span class="number">1</span>!$(i), r2i = <span class="number">2</span>!$(i);    <span class="comment">// 命名范围，替换记法，对象</span></span><br><span class="line">	<span class="keyword">int</span> id1 = <span class="built_in">list</span>(max(r1), r1);   <span class="comment">//  LabTalk 函数</span></span><br><span class="line">	<span class="keyword">int</span> idi = <span class="built_in">list</span>(max(r1i), r1i);   <span class="comment">//  LabTalk 函数 </span></span><br><span class="line">	<span class="keyword">int</span> offset = idi - id1 + <span class="number">1</span>;</span><br><span class="line">	range rresult = <span class="number">1</span>!$(i)[offset:end];   </span><br><span class="line">	r2i = rresult;	</span><br><span class="line">	r2i.lname$ = r1i.lname$;  <span class="comment">// 对象属性</span></span><br><span class="line">	r2i.unit$ = r1i.unit$;  <span class="comment">// 对象属性</span></span><br><span class="line">	r2i.comment$ = r1i.comment$;  <span class="comment">// 对象属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="基本特性">基本特性</span></h2><p><strong>1. 数据类型与变量</strong></p>
<p>有九种数据类型：</p>
<p>double, int, constant, dataset, string, stringarray, range, tree, Graphic Object等</p>
<p><strong>Numeric</strong></p>
<ul>
<li>int在LabTalk中是按double类型存储的</li>
<li>constant一旦声明，就会保存在System Variable中，新的session也可以调用它<ul>
<li>想要在新的session中使用constant，需要在CONST.CNF文件下定义这个constant</li>
</ul>
</li>
<li>没有复数形式，如需要可以使用Origin C</li>
<li>0，NANUM， -1.0E-290到1.0E-290之间的值会在逻辑上判定为False </li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">type $(<span class="number">-1e-290</span>?<span class="number">1</span>:<span class="number">0</span>); <span class="comment">// Returns 0 (False)</span></span><br><span class="line">type $(<span class="number">1</span>/<span class="number">0</span>?<span class="number">1</span>:<span class="number">0</span>); <span class="comment">// Returns 0 (False), where 1/0 == NANUM</span></span><br></pre></td></tr></table></figure>
<p><strong>Dataset</strong></p>
<ul>
<li>该类型存储数字类型的array</li>
</ul>
<p><strong>2. 字符串变量</strong></p>
<p>定义：双引号不是必须的</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">string s</span> = hello world; </span><br></pre></td></tr></table></figure>
<p><strong>美元符号（$）在定义时可有可无，在赋值时是必须的</strong></p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">string str1<span class="variable">$ </span>= <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">string str2 = str1;</span><br><span class="line">str2<span class="variable">$ </span>= ;</span><br><span class="line"><span class="regexp">//</span> str1</span><br><span class="line">string str3 = str1<span class="variable">$;</span></span><br><span class="line">str3<span class="variable">$ </span>= ; </span><br><span class="line"><span class="regexp">//</span> hello world</span><br></pre></td></tr></table></figure>
<ul>
<li>赋值给另外一个变量时，在后面加上$，如str1  = s$</li>
<li>调用字符串时，需要在后面加上$</li>
</ul>
<p>字符串寄存器：</p>
<p>%H —&gt; 当前处于活动状态的窗口名称</p>
<p>%X —&gt; 当前项目所在目录</p>
<p>%Y —&gt; 用户文件夹</p>
<p>…</p>
<p><strong>3. 语法</strong></p>
<p>赋值语句，宏语句，命令语句，运算语句，函数语句</p>
<p>分号的使用：;</p>
<p>注释：//， /<em>  </em>/</p>
<p>操作符：运算操作符，字符串连接，赋值操作符，逻辑关系操作符，条件操作符</p>
<p>条件语句：if, if else, switch, break, exit, continue</p>
<p>循环语句：repeat, loop, doc -e, for</p>
<h2><span id="对象">对象</span></h2><p><strong>语法：</strong></p>
<p>对象名.属性</p>
<p>对象名.方法(参数列表)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">page.= <span class="comment">// 查看对象的属性 </span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 层级包含关系 </span></span><br><span class="line"> <span class="comment">// page -&gt; worksheet -&gt; column </span></span><br><span class="line"></span><br><span class="line"> page.active = <span class="comment">// 当前窗口处于活动状态的表，可以查看，也可以设置 </span></span><br><span class="line"> page.nlayers = <span class="comment">// 有几个工作表 </span></span><br><span class="line"></span><br><span class="line"> wks.ncols = <span class="comment">// 工作表有几列 </span></span><br><span class="line"> wks.addcol() <span class="comment">// 调用对象的方法，工作表中添加列 </span></span><br><span class="line"> wks.name$ = <span class="comment">// 工作表的名称 </span></span><br><span class="line"></span><br><span class="line"> wks.col2.lname$ = <span class="comment">// 工作表第二列的长名称 </span></span><br><span class="line"> wks.col2.unit$ = <span class="comment">// 工作表第二列的单位 </span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 对当前工作簿窗口的所有工作表执行相应的代码 </span></span><br><span class="line"> doc -e LW &#123; </span><br><span class="line">     wks.ncols = <span class="number">4</span>; <span class="comment">// 每个工作表都设置成4列 </span></span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 对当前图形窗口的所有图层执行相应的代码 </span></span><br><span class="line"> doc -e LW &#123; </span><br><span class="line">     layer.y.from = <span class="number">-1</span>; <span class="comment">// y轴刻度从-1开始 </span></span><br><span class="line">     layer.y.to = <span class="number">48</span>; <span class="comment">// y轴刻度结束于48 </span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h2><span id="命令">命令</span></h2><p><strong>语法：</strong></p>
<p>命令 [-选项] [参数列表]</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">newbook; <span class="comment">// X-Function，新建工作簿 </span></span><br><span class="line"> <span class="built_in">string</span> FileString$ = system.path.program$ + <span class="string">&quot;Samples\Curve Fitting\Linear Fit.dat&quot;</span>; </span><br><span class="line"> open -a %(FileString$); <span class="comment">// 打开数据，-a为选项，%(FileString$)为参数 </span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 运行Python命令 </span></span><br><span class="line"> run -<span class="function">py <span class="title">print</span><span class="params">(<span class="string">&quot;Hello Origin&quot;</span>)</span></span>; </span><br><span class="line"></span><br><span class="line"> <span class="comment">// 对特定的对象群体执行给定的脚本 </span></span><br><span class="line"> <span class="comment">// document -e object &#123; script &#125; </span></span><br><span class="line"> doc -e W &#123; <span class="comment">// doc与document一样, W是项目里的所有工作表 </span></span><br><span class="line">     type %H; <span class="comment">// 打印工作表的名称 </span></span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure>
<h2><span id="命名范围">命名范围</span></h2><p><strong>语法：</strong></p>
<p>range [-选项] RangeName = RangeString</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">range rb = [Book2]; <span class="comment">// 命名范围为Book2这个工作簿 </span></span><br><span class="line">range rs = [Book2]Sheet1!; <span class="comment">// 命名范围为Book2这个工作簿下的Sheet1工作表 </span></span><br><span class="line">range rc1 = [Book2]Sheet1!col(<span class="number">1</span>); <span class="comment">// 工作表下的第一列 </span></span><br><span class="line">range rc2 = [Book2]Sheet1!col(A)[<span class="number">1</span>:<span class="number">5</span>]; <span class="comment">// 工作表下A列的1至5行 </span></span><br><span class="line">range rc3 = [Book2]<span class="number">1</span>!<span class="number">1</span>[<span class="number">1</span>:<span class="number">5</span>]; <span class="comment">// 同上，这里用了索引的方式，第一个工作表的第一列 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 复制整列数据到另一个工作表 </span></span><br><span class="line">range r1 = [Book3]Sheet1!col(<span class="number">1</span>); </span><br><span class="line">range r2 = [Book4]Sheet1!col(<span class="number">2</span>); </span><br><span class="line">r2 = r1; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环每列，复制数据和长名称 </span></span><br><span class="line">win -a Book2; <span class="comment">// 激活Book2为当前窗口 </span></span><br><span class="line">newsheet; <span class="comment">// 当前工作簿里新建一个工作表 </span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123; <span class="comment">// 从1循环到5 </span></span><br><span class="line">    range r1 = Sheet1!$(i)[$(i):end]; <span class="comment">// 对于当前窗口，工作簿的名称可以省略，$(i)是替换记号，当i为1时，即为Sheet1!1[1:end]，第一列的第一行到最后一行 </span></span><br><span class="line">    range r2 = Sheet2!$(i); <span class="comment">// 第二个工作表的第i列 </span></span><br><span class="line">    r2 = r1; <span class="comment">// 复制数据 </span></span><br><span class="line">    r2.lname$ = r1.lname$; <span class="comment">// 复制长名称 </span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h2><span id="替换记法">替换记法</span></h2><p><strong>%A-%Z</strong></p>
<p>字符串寄存器是最简单的替换，在脚本执行过程中，寄存器被产生的内容替换。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">FDLOG</span>.</span></span><span class="keyword">open</span>(A);  <span class="comment">// 打开的文件名存于%A</span></span><br><span class="line">%A = ;</span><br><span class="line">%B = <span class="module-access"><span class="module"><span class="identifier">FDLOG</span>.</span></span>path$; <span class="comment">// 文件所在目录存于%B</span></span><br><span class="line">%B = ; </span><br></pre></td></tr></table></figure>
<p><strong>%( )</strong></p>
<p>用于<strong>解析</strong>出%(str$)，%(range)，工作表信息，列名，单元格，图例等。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> str$ = Book5; </span><br><span class="line">range r1 = [%(str$)]<span class="number">1</span>!<span class="number">1</span>; <span class="comment">// 相当于range r1 = [Book5]1!1; </span></span><br><span class="line">type %(r1); <span class="comment">// 解析出r1 </span></span><br><span class="line"></span><br><span class="line">%([Book5]Sheet1, <span class="number">3</span>, <span class="number">2</span>) = ; <span class="comment">// 解析出Book5里的Sheet1工作表中的第三列第二行 </span></span><br><span class="line">%([Book5]Sheet1, <span class="number">5</span>, <span class="number">1</span>) = %([Book5]Sheet1, <span class="number">3</span>, <span class="number">2</span>) * <span class="number">2</span>; </span><br></pre></td></tr></table></figure>
<p><strong>$( )</strong></p>
<p>用于把数字表达式替换为相应的数字字符串。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">dataset ds1 = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>&#125;; <span class="comment">// 定义数据集 </span></span><br><span class="line"> type $(ds1); <span class="comment">// 打印 </span></span><br><span class="line"> type $(ds1, *<span class="number">2</span>); <span class="comment">// 两位有效数字 </span></span><br><span class="line"></span><br><span class="line"> loop (ii, <span class="number">1</span>, <span class="number">4</span>) &#123; <span class="comment">// 循环从1到4 </span></span><br><span class="line">     wks.col$(ii).lname$ = col$(ii); <span class="comment">// 设置当前工作表的1到4列的长名称 </span></span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line"> <span class="comment">// 历遍项目里的所有工作簿和矩阵簿里的所有工作表和矩阵表 </span></span><br><span class="line"> doc -e LB &#123; </span><br><span class="line">     loop (var, <span class="number">1</span>, [%H]!wks.ncols) &#123; <span class="comment">// 当前历遍表中的所有列循环 </span></span><br><span class="line">         type <span class="string">&quot;此列为：[%H]%(page.active$)!%(wks.col$(var).name$)&quot;</span>; </span><br><span class="line">     &#125; </span><br><span class="line"> &#125;  </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">此列为：[Book5]Sheet1!A</span></span><br><span class="line"><span class="comment">此列为：[Book5]Sheet1!B</span></span><br><span class="line"><span class="comment">此列为：[Book5]Sheet1!C</span></span><br><span class="line"><span class="comment">此列为：[Book5]Sheet1!D</span></span><br><span class="line"><span class="comment">此列为：[Book5]Sheet1!E</span></span><br><span class="line"><span class="comment">此列为：[Book5]Sheet2!A</span></span><br><span class="line"><span class="comment">此列为：[Book5]Sheet2!B</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p><strong>%n</strong></p>
<p>用于给宏和脚本传递参数，n为整数，为1-5，即最多可传递5个参数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">def my_add &#123;type -b <span class="string">&quot;(%1 + %2) = $(%1 + %2)&quot;</span>&#125;  <span class="comment">// 定义一个宏</span></span><br><span class="line">my_add <span class="number">100</span> <span class="number">11</span>;  <span class="comment">// 调用宏，并传递两个参数，100由%1处理，11由%2处理</span></span><br><span class="line"></span><br><span class="line">run.section(Custom, Main, <span class="number">100</span> <span class="number">11</span>);  <span class="comment">// 注意传递的参数是空格分隔，不是逗号 </span></span><br></pre></td></tr></table></figure>
<h2><span id="x-function">X-Function</span></h2><p>X-Function 是 Origin 里的一个框架，可以用于创建执行特定任务的工具。大部分 X-Function 都可以通过 LabTalk 脚本来运行。</p>
<p>Origin 里很多分析工具都是通过 X-Function 来实现的，包括在学习中心里的很多APP，也是由 X-Function 来做的。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">win -a Book6; <span class="comment">// 先把Book6设置为当前活动窗口 </span></span><br><span class="line"> <span class="comment">// 平滑 </span></span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> ii = <span class="number">2</span>; ii &lt;= <span class="number">4</span>; ii++) &#123; <span class="comment">// 从2到4历遍 </span></span><br><span class="line">     range rr = $(ii); <span class="comment">// 定义命名范围为当前工作表的第ii列，这里用到了$( )的替换法来定义 </span></span><br><span class="line">     smooth -r <span class="number">2</span> iy:=rr; <span class="comment">// 调用smooth这个X-Function，-r 2是选项，iy:=rr是参数 </span></span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure>
<p>如何生成脚本？</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">newsheet -d; <span class="comment">// -d选项可以打开对话框，然后在对话框里有相应的生成脚本的方式 </span></span><br><span class="line">smooth -d; </span><br></pre></td></tr></table></figure>
<p>注意：有些 X-Function 设计时并不允许打开对话框，此时使用-d会出错！</p>
<p>查找X-Function及帮助文档</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">lx *norm*; <span class="comment">// 查找带norm这几个字符的X-Function </span></span><br><span class="line">help smooth; <span class="comment">// 打开smooth的帮助文档，是打开chm还是在线文档，取决于 帮助: 使用在线帮助文档 是否选中 </span></span><br><span class="line">smooth -h; <span class="comment">// 直接显示文档内容 </span></span><br></pre></td></tr></table></figure>
<h2><span id="宏和函数">宏和函数</span></h2><p><strong>宏的定义与调用</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 语法  </span></span><br><span class="line">define macroName &#123; script &#125;  <span class="comment">// define可简写成def  </span></span><br><span class="line"><span class="comment">// 例子  </span></span><br><span class="line">def helloOrigin &#123;  <span class="comment">// 定义一个叫helloOrigin的宏</span></span><br><span class="line">	type -b <span class="string">&quot;Hello Origin&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">helloOrigin;  <span class="comment">// 调用宏 </span></span><br></pre></td></tr></table></figure>
<p><strong>内置函数</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数值类的函数 </span></span><br><span class="line"> win -a Book7; <span class="comment">// 激活Book7工作簿 </span></span><br><span class="line"> range ra = col(A); </span><br><span class="line"> range rb = col(B); </span><br><span class="line"> rb = ave(ra, <span class="number">5</span>); <span class="comment">// 调用ave函数 </span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 字符串类的函数 </span></span><br><span class="line"> win -a Book8; <span class="comment">// 激活Book8工作簿 </span></span><br><span class="line"> range ra = col(A); </span><br><span class="line"> range rb = col(B); </span><br><span class="line"> rb = token(ra, <span class="number">1</span>, <span class="string">&quot;,&quot;</span>); <span class="comment">// 调用token函数 </span></span><br></pre></td></tr></table></figure>
<p><strong>自定义函数</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 语法 </span></span><br><span class="line"> <span class="function">function dataType <span class="title">funcName</span><span class="params">(Arg1, Arg2, ..., ArgN)</span> </span>&#123; script; &#125; </span><br><span class="line"></span><br><span class="line"> <span class="comment">// 例子 </span></span><br><span class="line"> <span class="function">function <span class="keyword">int</span> <span class="title">iCountDays</span><span class="params">(dataset ds, <span class="keyword">int</span> iDay)</span> </span>&#123; <span class="comment">// 定义 </span></span><br><span class="line">     <span class="keyword">int</span> iCount = <span class="number">0</span>; </span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> ii = <span class="number">1</span> ; ii &lt;= ds.GetSize() ; ii++) &#123; </span><br><span class="line">         <span class="keyword">if</span> (weekday(ds[ii], <span class="number">1</span>) == iDay) &#123; <span class="comment">// 是否为星期五 </span></span><br><span class="line">             iCount++; </span><br><span class="line">         &#125; </span><br><span class="line">     &#125; </span><br><span class="line">     <span class="keyword">return</span> iCount; </span><br><span class="line"> &#125; </span><br><span class="line"> win -a Book9; <span class="comment">// 激活Book9工作簿 </span></span><br><span class="line"> iVal = iCountDays(col(<span class="number">1</span>), <span class="number">6</span>); <span class="comment">// 调用 </span></span><br><span class="line"> iVal = ; </span><br></pre></td></tr></table></figure>
<h2><span id="实用例子">实用例子</span></h2><h3><span id="使用模板批量绘图">使用模板批量绘图</span></h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">run.section(dofile.ogs, OnInstallTemplate, <span class="string">&quot;%XTemplatForBatch.otpu&quot;</span>);  <span class="comment">// 安装模板</span></span><br><span class="line"><span class="comment">// run.section(dofile.ogs, OnUnInstallTemplate, &quot;%XTemplatForBatch.otpu&quot;);  // 卸载模板</span></span><br><span class="line">win -a Book10;  <span class="comment">// 激活Book10</span></span><br><span class="line"><span class="built_in">string</span> bookName$ = %H;  <span class="comment">// 保存好Book10的名称</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> ii = <span class="number">1</span>; ii &lt;= <span class="number">3</span>; ii++) &#123;  <span class="comment">// 有三个工作表要历遍</span></span><br><span class="line">	<span class="built_in">string</span> wksName$ = bookName$!layer$(ii).name$;  <span class="comment">// 拿到当前工作表的名字</span></span><br><span class="line">	plotxy iy:=[%(bookName$)]%(wksName$)!(<span class="number">1</span>,<span class="number">2</span>) plot:=<span class="number">200</span> ogl:=[&lt;<span class="keyword">new</span> <span class="keyword">template</span>:=TemplatForBatch&gt;]; <span class="comment">// 在模板的第一个图层画图</span></span><br><span class="line">	plotxy iy:=[%(bookName$)]%(wksName$)!(<span class="number">1</span>,<span class="number">3</span>) plot:=<span class="number">200</span> ogl:=<span class="number">2</span>;  <span class="comment">// 在第二个图层画</span></span><br><span class="line">	plotxy iy:=[%(bookName$)]%(wksName$)!(<span class="number">1</span>,<span class="number">4</span>) plot:=<span class="number">200</span> ogl:=<span class="number">3</span>;  <span class="comment">// 在第三个图层画</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="批量峰值分析">批量峰值分析</span></h3><p>Book11的Sheet1工作表中的数据，从迷你图可以看到，C、E、F这三列Y数据，噪音比较多，不适合做峰值分析（会产生很多不准确的峰值），而现在又想对工作表中的Y数据进行峰值分析的批量处理，同时要把噪音过大的过滤掉，如何做？</p>
<p><strong>1.生成主题</strong></p>
<ol>
<li>选中B列，然后点菜单 分析: 峰值及基线: 峰值分析。</li>
<li>目标为峰拟合，在寻峰步骤，点 查找，然后下一步，再保存主题，关闭。</li>
</ol>
<p><strong>2.通过主题批量峰值分析</strong></p>
<ol>
<li><p>点菜单 分析: 峰值及基线: 通过主题批量峰值分析。</p>
</li>
<li><p>输入选择所有列，主题为刚保存的主题，结果表为峰属性。</p>
</li>
<li><p>在脚本的每次处理前运行脚本里输入改下脚本： </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">dataset dr; <span class="comment">// 定义一个数据集变量 </span></span><br><span class="line">fft_filters iy:=_ry filter:=high oy:=dr; <span class="comment">// FFT高通滤波，可以获得噪音分量，_ry对应批处理时当前处理的y数据，输出结果噪音放到dr </span></span><br><span class="line">stats dr sd:=nSD; <span class="comment">// 对噪音进行统计分析，并取得噪音的标准差放到变量nSD </span></span><br><span class="line">stats _ry sd:=sSD; <span class="comment">// 对信号进行统计分析，并取得标准差放到变量sSD </span></span><br><span class="line"><span class="keyword">if</span> (nSD^<span class="number">2</span> &gt; sSD^<span class="number">2</span> * <span class="number">0.3</span>) &#123; <span class="comment">// 对比噪音的方差与信号的方差，如果噪音的方差大于信号方差的0.3倍，则认为此信号噪音太大，不适合做峰分析，跳过此信号 </span></span><br><span class="line">    _skip=<span class="number">1</span>; <span class="comment">// _skip此变量标志是否要跳过当前的数据不处理 </span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    _skip=<span class="number">0</span>; <span class="comment">// _skip为0，则表示当前数据不跳过，会被处理 </span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
</li>
<li><p>点确定按钮。</p>
</li>
</ol>
<h3><span id="工作本脚本">工作本脚本</span></h3><p><strong>1.工作表脚本</strong></p>
<ol>
<li><p>新建一个工作簿。</p>
</li>
<li><p>点菜单 工作表: 工作表脚本，打开工作表属性对话框。</p>
</li>
<li><p>在脚本选项卡下，在脚本触发条件框中，勾上两个复选框，并在第二个复选框下填上：1:end，表示任意数据的变动都触发。</p>
</li>
<li><p>脚本则使用下面的脚本：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">wks.userParam1 = <span class="number">1</span>; <span class="comment">// 显示第一个用户自定义参数行 </span></span><br><span class="line">wks.userParam2 = <span class="number">1</span>; <span class="comment">// 显示第二个用户自定义参数行 </span></span><br><span class="line">wks.userParam1$ = <span class="string">&quot;均值&quot;</span>; <span class="comment">// 设置第一个用户自定义参数行为均值 </span></span><br><span class="line">wks.userParam2$ = <span class="string">&quot;标准差&quot;</span>; <span class="comment">// 设置第二个用户自定义参数行为标准差 </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> ii = <span class="number">2</span>; ii &lt;= wks.ncols; ii++) &#123; <span class="comment">// 第二列开始历遍工作表中的所有列 </span></span><br><span class="line">    range rr = $(ii); <span class="comment">// 取得第ii列的命名范围 </span></span><br><span class="line">    col($(ii))[D1]$ = $(mean(rr), <span class="number">.2</span>*); <span class="comment">// 计算第ii列的均值，并把值取小数后两位放到自定义参数均值行 </span></span><br><span class="line">    col($(ii))[D2]$ = $(stddev(rr), <span class="number">.2</span>*); <span class="comment">// 计算第ii列的标准差，并把值取小数后两位放到自定义参数标准差行 </span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
</li>
<li><p>导入一个数据看结果。</p>
</li>
</ol>
<p><strong>2.导入多个ASCII文件</strong></p>
<ol>
<li>打开导入多个ASCII文件对话框，选择多个要导入的ASCII文件。</li>
<li>在脚本分支下，把上面用过的同样的脚本复制粘贴到每个文件导入后运行脚本的文本框中。</li>
<li>点确定按钮。</li>
</ol>
]]></content>
      <categories>
        <category>画图</category>
        <category>origin</category>
      </categories>
      <tags>
        <tag>origin</tag>
      </tags>
  </entry>
  <entry>
    <title>pandasL1</title>
    <url>/2021/11/05/pandasL1/</url>
    <content><![CDATA[<h3><span id="series和dataframe">Series和DataFrame</span></h3><ul>
<li>分别代表着一维的序列和二维的表结构</li>
</ul>
<h4><span id="series">Series</span></h4><ul>
<li><strong>Series 是个定长的字典序列</strong>。说是定长是因为在存储的时候，相当于两个 ndarray</li>
<li><strong>Series</strong>有两个基本属性：index 和 values。<ul>
<li>在 Series 结构中，index 默认是 0,1,2,……递增的整数序列，当然我们也可以自己来指定索引</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series, DataFrame</span><br><span class="line">x1 = Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">x2 = Series(data=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>, <span class="string">&#x27;d&#x27;</span>:<span class="number">4</span>&#125;</span><br><span class="line">x3 = Series(d)</span><br></pre></td></tr></table></figure>
<ul>
<li><p>Series内部的列表时基于numpy的array实现的</p>
<ul>
<li><p>```python<br>pd.Series([1, 2]).values</p>
<h1><span id="array1-2">array([1, 2])</span></h1><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">#### DataFrame</span><br><span class="line"></span><br><span class="line">- 包括了行索引和列索引，我们可以将 DataFrame 看成是由相同索引的 Series 组成的字典类型。</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series, DataFrame</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&#x27;Chinese&#x27;</span>: [<span class="number">66</span>, <span class="number">95</span>, <span class="number">93</span>, <span class="number">90</span>,<span class="number">80</span>],</span><br><span class="line">        <span class="string">&#x27;English&#x27;</span>: [<span class="number">65</span>, <span class="number">85</span>, <span class="number">92</span>, <span class="number">88</span>, <span class="number">90</span>],</span><br><span class="line">        <span class="string">&#x27;Math&#x27;</span>: [<span class="number">30</span>, <span class="number">98</span>, <span class="number">96</span>, <span class="number">77</span>, <span class="number">90</span>]&#125;</span><br><span class="line">df1= DataFrame(data)</span><br><span class="line">df2 = DataFrame(data, index=[<span class="string">&#x27;ZhangFei&#x27;</span>, <span class="string">&#x27;GuanYu&#x27;</span>, <span class="string">&#x27;ZhaoYun&#x27;</span>, <span class="string">&#x27;HuangZhong&#x27;</span>, <span class="string">&#x27;DianWei&#x27;</span>], columns=[<span class="string">&#x27;English&#x27;</span>, <span class="string">&#x27;Math&#x27;</span>, <span class="string">&#x27;Chinese&#x27;</span>])</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h4><span id="数据清洗的一些操作">数据清洗的一些操作</span></h4><ul>
<li><p><strong>重命名列名 columns，让列表名更容易识别</strong></p>
<ul>
<li>```python<br>df2.rename(columns={origin:change})<br>df2.columns.names = [] # 设置列索引名<br>df2.index,names = []<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="strong">**去重复的值**</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">  -</span> <span class="code">```python</span></span><br><span class="line"><span class="code">    df.drop_duplicates()</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>格式问题</strong></p>
<ul>
<li>```python<br>df.column.astype(type)<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **数据间的空格**</span><br><span class="line"></span><br><span class="line">  - ```python</span><br><span class="line">    <span class="comment"># 删除左右两边空格</span></span><br><span class="line">    df2[<span class="string">&#x27;Chinese&#x27;</span>]=df2[<span class="string">&#x27;Chinese&#x27;</span>].<span class="built_in">map</span>(<span class="built_in">str</span>.strip)</span><br><span class="line">    <span class="comment"># 删除左边空格</span></span><br><span class="line">    df2[<span class="string">&#x27;Chinese&#x27;</span>]=df2[<span class="string">&#x27;Chinese&#x27;</span>].<span class="built_in">map</span>(<span class="built_in">str</span>.lstrip)</span><br><span class="line">    <span class="comment"># 删除右边空格</span></span><br><span class="line">    df2[<span class="string">&#x27;Chinese&#x27;</span>]=df2[<span class="string">&#x27;Chinese&#x27;</span>].<span class="built_in">map</span>(<span class="built_in">str</span>.rstrip)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 去除$</span></span><br><span class="line">    df2[<span class="string">&#x27;Chinese&#x27;</span>]=df2[<span class="string">&#x27;Chinese&#x27;</span>].<span class="built_in">str</span>.strip(<span class="string">&#x27;$&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 大小写转换</span></span><br><span class="line">    <span class="comment"># 全部大写</span></span><br><span class="line">    df2.columns = df2.columns.<span class="built_in">str</span>.upper()</span><br><span class="line">    <span class="comment"># 全部小写</span></span><br><span class="line">    df2.columns = df2.columns.<span class="built_in">str</span>.lower()</span><br><span class="line">    <span class="comment"># 首字母大写</span></span><br><span class="line">    df2.columns = df2.columns.<span class="built_in">str</span>.title()</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>查找空值</strong></p>
<ul>
<li><p>```python<br>df.isnull()</p>
<h1><span id="知道哪列存在空值">知道哪列存在空值</span></h1><p>df.isnull().any()</p>
<h1><span id="寻找非空值">寻找非空值</span></h1><p>df.notnull()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **使用apply函数对数据进行清洗**</span><br><span class="line"></span><br><span class="line">  - ```python</span><br><span class="line">    df[<span class="string">&#x27;name&#x27;</span>] = df[<span class="string">&#x27;name&#x27;</span>].apply(<span class="built_in">str</span>.upper)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">double_df</span>(<span class="params">x</span>):</span></span><br><span class="line">    	<span class="keyword">return</span> <span class="number">2</span>*x</span><br><span class="line">    df1[<span class="string">u&#x27;语文&#x27;</span>] = df1[<span class="string">u&#x27;语文&#x27;</span>].apply(double_df)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">plus</span>(<span class="params">df,n,m</span>):</span></span><br><span class="line">        df[<span class="string">&#x27;new1&#x27;</span>] = (df[<span class="string">u&#x27;语文&#x27;</span>]+df[<span class="string">u&#x27;英语&#x27;</span>]) * m</span><br><span class="line">        df[<span class="string">&#x27;new2&#x27;</span>] = (df[<span class="string">u&#x27;语文&#x27;</span>]+df[<span class="string">u&#x27;英语&#x27;</span>]) * n</span><br><span class="line">        <span class="keyword">return</span> df</span><br><span class="line">    df1 = df1.apply(plus,axis=<span class="number">1</span>,args=(<span class="number">2</span>,<span class="number">3</span>,))</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211103092114173.png" alt="image-20211103092114173"></p>
<h3><span id="读取csv文件">读取CSV文件</span></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fixed_df = pd.read_csv(<span class="string">&#x27;../data/bikes.csv&#x27;</span>, </span><br><span class="line">                       sep=<span class="string">&#x27;;&#x27;</span>, </span><br><span class="line">                       encoding=<span class="string">&#x27;latin1&#x27;</span>, </span><br><span class="line">                       parse_dates=[<span class="string">&#x27;Date&#x27;</span>], </span><br><span class="line">                       dayfirst=<span class="literal">True</span>, </span><br><span class="line">                       index_col=<span class="string">&#x27;Date&#x27;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>可以将某些列转换成日期</li>
<li>dayfirst将日期的列提前</li>
<li>encoding解码方式</li>
</ul>
<h3><span id="查看dataframe的信息">查看DataFrame的信息</span></h3><h4><span id="查看行数和列数">查看行数和列数</span></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.shape</span><br><span class="line"><span class="comment"># (20, 4) 20行数据，4列属性</span></span><br><span class="line">df.shape[<span class="number">0</span>] <span class="comment"># 行数</span></span><br><span class="line">df.shape[<span class="number">1</span>] <span class="comment"># 列数</span></span><br></pre></td></tr></table></figure>
<h4><span id="删除-dataframe-中的不必要的列或行">删除 DataFrame 中的不必要的列或行</span></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.drop(columns=[])</span><br><span class="line">df.drop(index=[])</span><br></pre></td></tr></table></figure>
<h3><span id="apply函数的使用">apply函数的使用</span></h3><h4><span id="跟lambda函数一起使用">跟lambda函数一起使用</span></h4><ul>
<li><p>可以改变某列的数据类型</p>
<ul>
<li>```python<br>dollarizer = lambda x: float(x[1:-1])<br>chipo.item_price = chipo.item_price.apply(dollarizer)<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">### 对DataFrame的行进行操作</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#### 查看前几行的数据</span></span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"><span class="meta"># 显示前五行</span></span><br><span class="line"><span class="meta"># 切片</span></span><br><span class="line">df[:<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta"># loc</span></span><br><span class="line">df.loc[<span class="string">&#x27;index1&#x27;</span>:<span class="string">&#x27;index5&#x27;</span>, :]</span><br><span class="line"></span><br><span class="line"><span class="meta"># iloc</span></span><br><span class="line">df.iloc[:<span class="number">5</span>, :]</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>在loc和iloc中使用切片选中时，不需要加列表外套，除非选择几个需要整合成一个列表</p>
</li>
</ul>
<h4><span id="丢弃某一行数据">丢弃某一行数据</span></h4><h5><span id="丢弃数据全为nan的行">丢弃数据全为NaN的行</span></h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = df.dropna()</span><br></pre></td></tr></table></figure>
<h5><span id="丢弃数据全为0的行">丢弃数据全为0的行</span></h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 找到全为0的行</span></span><br><span class="line">(df==<span class="number">0</span>).<span class="built_in">all</span>(axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选中这些行</span></span><br><span class="line">df[(df==<span class="number">0</span>).<span class="built_in">all</span>(axis=<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反选不全为0的行</span></span><br><span class="line">df[~(df==<span class="number">0</span>).<span class="built_in">all</span>(axis=<span class="number">1</span>)]</span><br></pre></td></tr></table></figure>
<h3><span id="对dataframe中的列进行操作">对DataFrame中的列进行操作</span></h3><h4><span id="选取一列以及多列">选取一列以及多列</span></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 有两种，如果列名中有空格只能用第一种</span></span><br><span class="line">df[<span class="string">&#x27;列名&#x27;</span>]</span><br><span class="line">df.列名</span><br><span class="line"></span><br><span class="line">df[[<span class="string">&#x27;column1&#x27;</span>, <span class="string">&#x27;column2&#x27;</span> ...]]</span><br></pre></td></tr></table></figure>
<h4><span id="对一列进行绘图">对一列进行绘图</span></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认是折线图</span></span><br><span class="line">df[<span class="string">&#x27;列名&#x27;</span>].plot()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对整个DataFrame绘图</span></span><br><span class="line">df.plot()</span><br></pre></td></tr></table></figure>
<h4><span id="对列进行计数">对列进行计数</span></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;column&#x27;</span>].value_counts()</span><br></pre></td></tr></table></figure>
<ul>
<li>会忽略NaN值</li>
<li>计数结果会进行排序，但是两个计数结果进行算术操作时，会按正确对应关系进行操作</li>
</ul>
<h4><span id="选取符合条件的列">选取符合条件的列</span></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1 = df[df.column == condition]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或：|  和：&amp;</span></span><br><span class="line">complaints[is_noise &amp; in_brooklyn][:<span class="number">5</span>]</span><br><span class="line">complaints[is_noise | in_brooklyn][:<span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<h4><span id="利用counter对dataframe中的一列进行计数">利用Counter对DataFrame中的一列进行计数</span></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = df.item_name</span><br><span class="line">y = Counter(x)</span><br><span class="line">df1 = pd.DataFrame.from_dict(y, orient=<span class="string">&#x27;index&#x27;</span>)</span><br><span class="line">df1 = df1[<span class="number">0</span>].sort_values(ascending = <span class="literal">True</span>)[<span class="number">45</span>:<span class="number">50</span>]</span><br></pre></td></tr></table></figure>
<ul>
<li>pd.DataFrame.from_dict()可将Counter类型转换成DataFrame</li>
</ul>
<h4><span id="改变dataframe中列的顺序">改变DataFrame中列的顺序</span></h4><p>可以通过选取列，重新组织顺序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1 = df[[<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;type&#x27;</span>, <span class="string">&#x27;hp&#x27;</span>, <span class="string">&#x27;evolution&#x27;</span>, <span class="string">&#x27;pokedex&#x27;</span>]]</span><br></pre></td></tr></table></figure>
<h4><span id="改变dataframe中列的名字">改变DataFrame中列的名字</span></h4><p>可以直接对df.columns赋值一个列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1.columns = [<span class="string">&#x27;alcohol&#x27;</span>, <span class="string">&#x27;malic_acid&#x27;</span>, <span class="string">&#x27;alcalinty_of_ash&#x27;</span>, <span class="string">&#x27;magnesium&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;flavanoids&#x27;</span>, <span class="string">&#x27;proanthocyanins&#x27;</span>, <span class="string">&#x27;hue&#x27;</span>]</span><br><span class="line">df1</span><br></pre></td></tr></table></figure>
<h3><span id="nan值的操作">NaN值的操作</span></h3><h4><span id="填充dataframe中的nan值">填充DataFrame中的NaN值</span></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.fillna(<span class="number">1</span>, inplace=<span class="literal">True</span>) <span class="comment"># 将NaN全部填充为1</span></span><br></pre></td></tr></table></figure>
<h4><span id="删除带有nan值的行">删除带有NaN值的行</span></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df=df.dropna(how=<span class="string">&#x27;any&#x27;</span>)</span><br><span class="line"></span><br><span class="line">DataFrame.dropna(axis=<span class="number">0</span>, how=<span class="string">&#x27;any&#x27;</span>, thresh=<span class="literal">None</span>, subset=<span class="literal">None</span>, inplace=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>| Parameters |                             说明                             |<br>| :————: | :—————————————————————————————: |<br>|    axis    |             0为行 1为列，default 0，数据删除维度             |<br>|    how     | {‘any’, ‘all’}, default ‘any’，                                  any：删除带有nan的行；all：删除全为nan的行 |<br>|   thresh   |                 int，保留至少 int 个非nan行                  |<br>|   subset   |                   list，在特定列缺失值处理                   |<br>|  inplace   |                     bool，是否修改源文件                     |</li>
</ul>
<h3><span id="dataframe的索引">DataFrame的索引</span></h3><h4><span id="dataframe重新设置索引">DataFrame重新设置索引</span></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = df.reset_index(drop=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>drop=True会将原来的索引舍弃</li>
</ul>
<h4><span id="dataframe的多级索引">DataFrame的多级索引</span></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.DataFrame(np.random.randint(<span class="number">80</span>, <span class="number">120</span>, size=(<span class="number">6</span>, <span class="number">4</span>)), </span><br><span class="line">              index= pd.MultiIndex.from_product([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],[<span class="string">&#x27;girl&#x27;</span>, <span class="string">&#x27;boy&#x27;</span>]]),</span><br><span class="line">              columns=pd.MultiIndex.from_product([[<span class="string">&#x27;English&#x27;</span>,<span class="string">&#x27;Chinese&#x27;</span>],</span><br><span class="line">                                                  [<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;N&#x27;</span>]]))</span><br></pre></td></tr></table></figure>
<h4><span id="多级索引的排序">多级索引的排序</span></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.columns.names = [<span class="string">&#x27;Language&#x27;</span>, <span class="string">&#x27;Pass&#x27;</span>]    <span class="comment"># 设置列索引名</span></span><br><span class="line">df.index.names = [<span class="string">&#x27;Class&#x27;</span>, <span class="string">&#x27;Six&#x27;</span>]    <span class="comment"># 设置行索引名</span></span><br><span class="line">df.sort_index(level=<span class="number">0</span>, axis=<span class="number">0</span>, ascending=<span class="literal">False</span>)  <span class="comment"># 对行索引Class的值进行降序排列</span></span><br></pre></td></tr></table></figure>
<h4><span id="多级索引轴向转换">多级索引轴向转换</span></h4><ol>
<li><code>stack()</code> : 将行索引变成列索引，可以理解为将表格数据转换为树状数据</li>
<li><code>unstack()</code> : 将列索引变成行索引，可以理解为将树状数据转换为表格数据</li>
<li>两个函数互为逆函数，作用相反，用法相同。单级索引时，结果会生成一个Series；多级索引时默认转换最内层索引，也可以自定义转换的索引层级</li>
</ol>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/13819693-b8096d3bd0cf02bc.png" alt="img"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/13819693-bafd9e78c4cc2de3.png" alt="img"></p>
<h3><span id="获取股票数据">获取股票数据</span></h3><h4><span id="使用alpha_vantage">使用alpha_vantage</span></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> alpha_vantage.timeseries <span class="keyword">import</span> TimeSeries</span><br><span class="line"></span><br><span class="line">ts = TimeSeries(key=<span class="string">&#x27;WRB3PU9PRGSGVS2H&#x27;</span>, output_format=<span class="string">&#x27;pandas&#x27;</span>)</span><br><span class="line">data, meta_data = ts.get_intraday(symbol=<span class="string">&#x27;MSFT&#x27;</span>,interval=<span class="string">&#x27;1week&#x27;</span>, outputsize=<span class="string">&#x27;full&#x27;</span>)</span><br><span class="line"></span><br><span class="line">data.to_csv(<span class="string">&quot;./Test_1.csv&quot;</span>, encoding=“utf-<span class="number">8</span>-sig”)</span><br></pre></td></tr></table></figure>
<ul>
<li><p>key=WRB3PU9PRGSGVS2H</p>
</li>
<li><p>symbol是获取股票的名称，interval是时间间隔</p>
<ul>
<li>interval取值：1min<code>,</code>5min<code>,</code>15min<code>,</code>30min<code>,</code>60min</li>
</ul>
</li>
</ul>
<h4><span id="使用pandas_datareaderdata">使用pandas_datareader.data</span></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas_datareader.data <span class="keyword">as</span> web</span><br><span class="line"></span><br><span class="line">start = datetime.datetime(<span class="number">2015</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">end = datetime.datetime(<span class="number">2021</span>, <span class="number">11</span>, <span class="number">4</span>)</span><br><span class="line">stock = web.DataReader(<span class="string">&quot;600797.SS&quot;</span>, <span class="string">&quot;yahoo&quot;</span>, start, end)</span><br></pre></td></tr></table></figure>
<h3><span id="dataframe的合并">DataFrame的合并</span></h3><h4><span id="concat">concat</span></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.concat([df1,df2,df3],axis=<span class="number">0</span>,ignore_index=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>参数axis=0表示上下合并，1表示左右合并，ignore_index=True表示忽略原来的索引</li>
<li>join参数<ul>
<li>join为‘inner’时 会裁剪吊互相之间没有的数据，</li>
<li>join为‘outer’时 会用NaN值来填充相互之间没有的数据</li>
</ul>
</li>
</ul>
<h4><span id="merge">merge</span></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.merge(left, right, how=<span class="string">&#x27;inner&#x27;</span>, on=<span class="literal">None</span>, left_on=<span class="literal">None</span>, right_on=<span class="literal">None</span>,</span><br><span class="line">         left_index=<span class="literal">False</span>, right_index=<span class="literal">False</span>, sort=<span class="literal">True</span>,</span><br><span class="line">         suffixes=(<span class="string">&#x27;_x&#x27;</span>, <span class="string">&#x27;_y&#x27;</span>), copy=<span class="literal">True</span>, indicator=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<h4><span id="append">append</span></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.append(df1)</span><br></pre></td></tr></table></figure>
<h3><span id="当索引为日期时">当索引为日期时</span></h3><h4><span id="获取索引代表的星期数">获取索引代表的星期数</span></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.index.weekday</span><br></pre></td></tr></table></figure>
<ul>
<li>同理可得到月的、年的等</li>
</ul>
<h4><span id="将属性改变成datetime">将属性改变成datetime</span></h4><ul>
<li>使用pd.to_datetime对列或者索引进行改变</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.index = pd.to_datetime(df.index)	</span><br></pre></td></tr></table></figure>
<h4><span id="改变时间频率">改变时间频率</span></h4><ul>
<li>改变为每一周、每个月，每个年等</li>
<li>使用df.resample(‘Y’)</li>
<li>Y是年，M是月，W是周</li>
</ul>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一个月一个月频率的DataFrame</span></span><br><span class="line"><span class="attr">monthly</span> = df.resample(<span class="string">&#x27;M&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>python</category>
        <category>pandas</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>pandasL2</title>
    <url>/2021/11/05/pandasL2/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>seabornL1</title>
    <url>/2021/11/03/seabornL1/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br></pre></td></tr></table></figure>
<p>seaborn是基于matplotlib的一个库</p>
<h3><span id="snsfacetgrid">sns.FacetGrid()</span></h3><ul>
<li>作用：可以在数据集的子集中分别可视化变量的分布或多个变量之间的关系</li>
<li>一个FacetGrid可以与多达三个维度可以得出：row，col，和hue</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只列出常用的参数</span></span><br><span class="line"></span><br><span class="line">g = sns.FacetGrid(data, row=<span class="literal">None</span>, col=<span class="literal">None</span>, hue=<span class="literal">None</span>,</span><br><span class="line">			sharex=<span class="literal">True</span>, sharey=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p>更多参数可参考：<a href="https://www.osgeo.cn/seaborn/generated/seaborn.FacetGrid.html#seaborn.FacetGrid">seaborn.FacetGrid()——API</a></p>
<h5><span id="map">map()</span></h5><ul>
<li>作用：在FacetGird构建的网格上绘制图</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">g.<span class="built_in">map</span>(plt.图形, d)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>画图</category>
        <category>seaborn</category>
      </categories>
  </entry>
  <entry>
    <title>vim</title>
    <url>/2021/10/11/vim/</url>
    <content><![CDATA[<h3><span id="普通模式">普通模式</span></h3><ul>
<li>hjkl:左下上右</li>
<li>w：下一个单词</li>
<li>b：上一个单词</li>
<li>gg：回到当前所在位置对应的第一行</li>
<li>shift+g：回到当前位置对应的最后一行</li>
<li>cirl+u：上一页</li>
<li>cirl+d：下一页</li>
<li>y：复制<ul>
<li>y可以和上下左右组合<ul>
<li>y4l：复制右边4个字符</li>
<li>y4j：复制4行内容</li>
</ul>
</li>
<li>yaw<ul>
<li>复制整个单词</li>
</ul>
</li>
</ul>
</li>
<li>d：删除<ul>
<li>和y同理</li>
</ul>
</li>
<li>p：粘贴</li>
<li>u：撤销</li>
</ul>
<h3><span id="输入模式">输入模式</span></h3><ul>
<li>i：进入输入模式，按Esc退出</li>
<li>a：从当前光标之后进入输入模式</li>
<li>o：跳到下一行进入输入模式</li>
<li>shift+i：从这一行的开头进入输入模式</li>
<li>shift+a：从这一行的末尾进入输入模式</li>
<li>caw：删除这个单词进入</li>
<li>cc：删除这一行进入输入模式</li>
<li>c4j：删除下4行进入输入模式</li>
</ul>
<h3><span id="命令模式">命令模式</span></h3><ul>
<li>在普通模式按Esc进入</li>
<li>:q ：退出</li>
<li>:w：保存</li>
<li>:wq：保存并退出</li>
</ul>
<h3><span id="可视模式">可视模式</span></h3><ul>
<li>在普通模式下按v进入</li>
<li>移动光标就会选中一大段内容</li>
</ul>
]]></content>
      <categories>
        <category>杂学</category>
        <category>vim</category>
      </categories>
  </entry>
  <entry>
    <title>操作系统L10</title>
    <url>/2022/01/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9FL10/</url>
    <content><![CDATA[<h2><span id="page-replacement-algorithms-页面置换算法">Page Replacement Algorithms 页面置换算法</span></h2><ul>
<li>页面错误（page fault）强制选择<ul>
<li>哪一页必须被移除 remove</li>
<li>为到来的页制造空间 make room</li>
<li>即在内存中选择一个页面将其换出内存，以便为即将调入的页面腾出空间</li>
</ul>
</li>
<li>换出的页面<ul>
<li>如果被修改过，必须将其写回磁盘以更新该页面在磁盘上的副本  saved</li>
<li>如果没有被修改过，直接覆盖即可  overwritten</li>
</ul>
</li>
<li>最好不要选择经常使用的页面<ul>
<li>很可能在很短时间内又被调入内存中</li>
</ul>
</li>
<li>总览</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032042157.png" alt="image-20220103204211101"></p>
<h4><span id="optimal-page-replacement-algorithm-最优页面置换算法">Optimal Page Replacement Algorithm 最优页面置换算法</span></h4><ul>
<li>替换将在最远点引用的页面</li>
<li>最优但是不可能实现</li>
</ul>
<h4><span id="not-recently-used-page-replacement-algorithm-最近未使用页面置换算法">Not Recently Used Page Replacement Algorithm 最近未使用页面置换算法</span></h4><ul>
<li>简称NRU</li>
<li>系统为每一页面设置了两个状态位<ul>
<li>当页面被访问(读或写)时设置<strong>R</strong>位</li>
<li>当页面被写入(即修改)时设置<strong>M</strong>位</li>
</ul>
</li>
<li>这些位包含早每个页表项中</li>
<li>当一个进程启动时，所有页面的R和M都设置为0<ul>
<li>周期性的，R位会清零</li>
</ul>
</li>
<li>页面被分为4类</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201031946333.png" alt="image-20220103194609300"></p>
<ul>
<li>NRU算法随机地从类编号最小地非空类中挑选一个页面淘汰</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201031948862.png" alt="image-20220103194800824"></p>
<h4><span id="fifo-page-replacement-algorithm-先进先出页面置换算法">FIFO Page Replacement Algorithm 先进先出页面置换算法</span></h4><ul>
<li>开销较小</li>
<li>由操作系统维护一个所有当前在内存中地页面的链表，最新进入的页面放在表尾，最早进入的页面放在表头</li>
<li>发生缺页中断时，淘汰表头的页面并把新调入的页面加到表尾</li>
<li>优点：易于实现</li>
<li>缺点：经常使用的页面可能会被清除</li>
</ul>
<h4><span id="second-chance-page-replacement-algorithm-第二次机会页面置换算法">Second Chance Page Replacement Algorithm 第二次机会页面置换算法</span></h4><ul>
<li>在FIFO基础进行修改，检查最老页面的R位<ul>
<li>R位是０，页面既老又没有被实现，可以立刻置换掉</li>
<li>R位是1，就将R位清０，并把该页面放到链表的尾端，修改它的装入时间使它像刚装入的一样</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201031958393.png" alt="image-20220103195858334"></p>
<ul>
<li>本质上是在寻找一个在最近的时钟间隔内没有被访问过的页面</li>
</ul>
<h4><span id="the-clock-page-replacement-algorithm-时钟页面置换算法">The Clock Page Replacement Algorithm　时钟页面置换算法</span></h4><ul>
<li>把所有的页面都保存在一个类似钟面的环形链表中，一个表针指向最老的页面</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032001766.png" alt="image-20220103200113725"></p>
<h4><span id="least-recently-used-lru-最近最少使用页面置换算法">Least Recently Used (LRU)　最近最少使用页面置换算法</span></h4><ul>
<li><p>假设最近使用过的页面很快就会再次使用 </p>
<ul>
<li>丢弃最长时间未使用的页面</li>
</ul>
</li>
<li><p>软件解决方案</p>
<ul>
<li>必须保持一个页面的链表：最近使用在前面，在后面最少；每次内存引用更新这个列表 </li>
<li>太贵了 </li>
</ul>
</li>
</ul>
<p>可以使用硬件解决方案 </p>
<ul>
<li>为硬件配备 64 位计数器</li>
<li>在每条指令执行完后自动加１</li>
<li>计数器值存储在刚刚引用的页的页表条目中<ul>
<li>每个页表项必须有一个足够容纳这个计数器值的域</li>
</ul>
</li>
<li>发生缺页中断后，选择计数器值最低的页面</li>
<li>选择计数器值最低的页面</li>
<li>问题：页表非常大，变得更大<ul>
<li>为具有n 个页框的机器维护一个n x n 位的矩阵</li>
</ul>
</li>
<li>引用页框 K 时：<ul>
<li>(i) 将第 K 行设置为全 1。</li>
<li>(ii) 将 K 列设置为全 0。 </li>
</ul>
</li>
<li>实质上就是在被引用时，<ul>
<li>将自己那一行变为1，让自己变大</li>
<li>让自己所在所有行即对应的列置为０，让其他变小</li>
</ul>
</li>
<li>二进制值最小的行是 LRU 页</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032016851.png" alt="image-20220103201653793" style="zoom:67%;"></p>
<h4><span id="用软件模拟lru">用软件模拟LRU</span></h4><ul>
<li>只有非常少的计算机拥有这种硬件，需要一种能用软件实现的解决方案</li>
<li>一种可能的方案称为<strong>NFU(Not Frequently Used, 最不常用)</strong>算法</li>
</ul>
<h5><span id="nfu">NFU</span></h5><ul>
<li>该算法将每个页面与一个软件计数器相关联，计数器的初值为0<ul>
<li>每次<strong>时钟中断</strong>时，扫描所有页面时，将每个页面的R位(0/1)加到它的计数器上</li>
<li>计数器大体跟踪各个页面被访问的频繁程度</li>
<li>发生缺页中断时，则置换计数器值最小的页面</li>
</ul>
</li>
<li>问题：从不忘记任何事情，所以很久以前的页面引用频率可能有最高的计数器</li>
<li>解决：修改为NFU with Aging</li>
</ul>
<h5><span id="nfu-with-aging-老化算法">NFU with Aging 老化算法</span></h5><ul>
<li>在每次时钟中断时<ul>
<li>计数器右移一位</li>
<li><strong>R 位添加到最左边的位</strong></li>
<li>这样，我们可以对最近的 R 值给予更高的优先级</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032029259.png" alt="image-20220103202910185"></p>
<h4><span id="working-set-model-工作集页面置换算法">Working-Set Model 工作集页面置换算法</span></h4><ul>
<li><p>页面仅按需加载。 这种策略称为<strong>请求调页(demand paging)</strong></p>
</li>
<li><p>在执行阶段，进程引用其页面的一小部分。 这称为<strong>参考位置(locality of reference)</strong></p>
</li>
<li><p>进程当前使用的页面集称为其<strong>工作集(working set)</strong></p>
</li>
<li><p>每隔几条指令就导致页面错误的程序被称为<strong>颠簸(thrashing)</strong></p>
</li>
<li><p>分页系统在让进程运行之前将每个进程的工作集保存在内存中。 这种方法称为<strong>工作集模型(working set model)</strong></p>
<ul>
<li>工作集是随着时间变化的</li>
</ul>
</li>
<li><p>在让进程运行之前加载页面称为<strong>预先调页(prepaging)</strong></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032033133.png" alt="image-20220103203343094"></p>
</li>
</ul>
<h5><span id="工作集算法">工作集算法</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032036825.png" alt="image-20220103203621770"></p>
<ul>
<li>这个想法是检查最近的页面引用，这个想法是检查最近的页面引用。</li>
<li>进程的工作集是它在虚拟时间（进程实际使用的 CPU 时间量）的过去 $\tau$ 秒内引用的页面集。</li>
</ul>
<h4><span id="工作集时钟页面置换算法">工作集时钟页面置换算法</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032040333.png" alt="image-20220103204004248"></p>
<h3><span id="modeling-page-replacement-algorithms-建模页面替换算法">Modeling Page Replacement Algorithms 建模页面替换算法</span></h3><ul>
<li>Belady’s anomaly：页框越多，页面错误不总是越少。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032046382.png" alt="image-20220103204631332"></p>
<ul>
<li>建模LRU算法： <ul>
<li>当一个页面被引用时，它总是被移动到内存中页面的顶部条目。 </li>
<li>如果引用的页面已经在内存中，则其上方的所有页面都向下移动一个位置。 引用页面下方的页面不会移动</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032053431.png" alt="image-20220103205300387"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032054142.png" alt="image-20220103205410097"></p>
<h4><span id="stack-replacement-algorithms">Stack Replacement Algorithms</span></h4><ul>
<li>如果 k 帧内存中的页面集始终是 (k+1) 帧内存中页面的子集，则页面替换算法称为堆栈替换算法</li>
<li>M是内存数组的集合，处理完引用字符串中的每一项后，m是页框数，则M(m)⊆ M(m 1)</li>
</ul>
<h3><span id="问题">问题</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201031923198.png" alt="image-20220103192312155" style="zoom:67%;"></p>
<p>虚拟地址空间大小：$8 * 1024 = 2^{13}$</p>
<p>内存空间：$32\cdot1024=2^5\cdot2^{10}=2^{15}$</p>
<p><strong>页面和页框的大小是一样的</strong></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201031926994.png" alt="image-20220103192631940" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032042325.png" alt="image-20220103204229284" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032043057.png" alt="image-20220103204305011" style="zoom:67%;"></p>
<p>Demand paging 是按需要的加载，二分查找需要整个空间</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032056475.png" alt="image-20220103205622427" style="zoom: 67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032056578.png" alt="image-20220103205639533"></p>
<p>最后顺序为：2 4 8 5</p>
<h3><span id="check-points">Check Points</span></h3><ol>
<li>What is the drawback of FIFO? </li>
<li>What is working set? </li>
<li>What is thrashing? </li>
<li>What is Belady’s anomaly ? </li>
<li>What is demand paging?</li>
</ol>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201062005121.png" alt="image-20220106200516054"></p>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>课程:操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统L11</title>
    <url>/2022/01/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9FL11/</url>
    <content><![CDATA[<h3><span id="内容">内容</span></h3><ul>
<li>与分页内存管理相关的一些问题</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032115315.png" alt="image-20220103211516287"></p>
<ul>
<li>Segmentation 分段</li>
</ul>
<h4><span id="paged-memory-management-分页内存管理">Paged Memory Management 分页内存管理</span></h4><p>CPU生成的地址被分为</p>
<ul>
<li>Page number(p)<ul>
<li>用作页表的索引，页表包含物理内存中每个页面的基址</li>
</ul>
</li>
<li>Page offset(d)<ul>
<li>结合基地址来定义发送到内存单元的物理内存地址</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032121396.png" alt="image-20220103212135371"></p>
<ul>
<li>p是到页表的索引</li>
<li>d是页表上的偏差</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032122299.png" alt="image-20220103212207265"></p>
<h3><span id="分页系统中的设计问题">分页系统中的设计问题</span></h3><h4><span id="local-versus-global-allocation-policies-本地与全局分配策略">Local versus Global Allocation Policies 本地与全局分配策略</span></h4><ul>
<li>全局算法在所有可运行进程之间动态分配页框。 </li>
<li>本地算法为单个进程分配页面。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032124013.png" alt="image-20220103212426932"></p>
<p>全局算法用于防止颠簸(thrashing)并将分页率保持在可接受的范围内： </p>
<ul>
<li>A: 太高 -&gt; 为进程分配更多的页框。 </li>
<li>B: 太低 -&gt; 分配进程较少的页框。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032127059.png" alt="image-20220103212745028"></p>
<h4><span id="page-size-页面大小">Page Size 页面大小</span></h4><h5><span id="small-page-size">small page size</span></h5><ul>
<li><p>优点：内部碎片较少</p>
<ul>
<li>内部碎片 internal fragmentation<ul>
<li>随便选择一个正文段、数据段或堆栈段很可能不会恰好装满整个页面，多余的空间就被浪费了，这种浪费便是内部碎片</li>
</ul>
</li>
</ul>
</li>
<li><p>缺点：程序需要很多页 -&gt; 更大的页表</p>
</li>
<li>由于页表和内部碎片造成的开销</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032129232.png" alt="image-20220103212932195" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032131070.png" alt="image-20220103213122036"></p>
<h4><span id="separate-instruction-and-data-spaces-分离的指令空间和数据空间">Separate Instruction and Data Spaces 分离的指令空间和数据空间</span></h4><ul>
<li><p>大多数计算机只有一个地址空间，既存放程序也存放数据</p>
</li>
<li><p>大多数系统将指令（程序文本）和数据的地址空间分开。 </p>
</li>
<li><p>一个进程在其进程表中可以有两个指针：</p>
<ul>
<li>一个指向指令页，一个指向数据页。 </li>
</ul>
</li>
<li><p>一个共享代码可以被两个进程指向。</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032135754.png" alt="image-20220103213509706"></p>
<h4><span id="shared-pages-共享页面">Shared Pages 共享页面</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032136541.png" alt="image-20220103213622487"></p>
<h4><span id="cleaning-policy-清除策略">Cleaning Policy 清除策略</span></h4><p>Paging Daemon（分页守护进程）： </p>
<ul>
<li>一个后台进程，大部分时间处于休眠状态； </li>
<li>定期唤醒以检查内存状态</li>
<li>当空闲页框太少时，使用替换算法选择要驱逐的页面</li>
</ul>
<h4><span id="page-fault-handling-缺页中断处理">Page Fault Handling 缺页中断处理</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032139680.png" alt="image-20220103213914597"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032139339.png" alt="image-20220103213927292"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032140253.png" alt="image-20220103214016203"></p>
<h4><span id="locking-pages-in-memory-锁定内存中的页面">Locking Pages in Memory 锁定内存中的页面</span></h4><ul>
<li>Process通过系统调用从设备读取数据到缓冲区<ul>
<li>在等待 I/O 时，另一个进程启动</li>
<li>有一个缺页中断</li>
<li>第一个进程的缓冲可能会被选择置换出</li>
</ul>
</li>
<li>如果通过I/O处于对该页面进行DMA传输的过程中，将这个页面移出，会导致部分数据写入它们所需的缓存区中，而部分数据被写入到最新装入的页面中。</li>
<li>在这种情况下，页面需要被钉住（pinning）</li>
</ul>
<h4><span id="backing-store-后备存储">Backing Store 后备存储</span></h4><p>在磁盘上分配页面空间的两种方法： </p>
<p>1）分页到静态交换区 </p>
<p>2）使用磁盘映射动态备份页面</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032148007.png" alt="image-20220103214849954"></p>
<h3><span id="segmentation-分段">Segmentation 分段</span></h3><ul>
<li>对程序的虚拟地址进行分段，映射到物理地址时，物理地址也被分段了</li>
<li><p>在机器上提供多个互相独立的称为段(segment)</p>
</li>
<li><p>程序员不知道这些将有多大，或者它们将如何增长，并且不想管理它们在虚拟内存中的位置</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032303949.png" alt="image-20220103230322916"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032335433.png" alt="image-20220103233550368"></p>
<h4><span id="compiler-with-one-dimensional-address-space-具有一维地址空间的编译器">Compiler with One-dimensional Address Space 具有一维地址空间的编译器</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032307327.png" alt="image-20220103230717276" style="zoom: 80%;"></p>
<h4><span id="compiler-with-segmentation-带分段的编译器">Compiler with Segmentation  带分段的编译器</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032310637.png" alt="image-20220103231034584"></p>
<ul>
<li>分段为每个进程维护多个独立的虚拟地址空间</li>
<li>允许每个表独立增长或收缩</li>
</ul>
<h4><span id="pure-segmentation">Pure Segmentation</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032316722.png" alt="image-20220103231605680" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032318682.png" alt="image-20220103231855616"></p>
<ul>
<li><p>段(segment)是逻辑上独立的地址空间</p>
<ul>
<li>段可能有不同的大小</li>
<li>它们的大小可以动态变化</li>
<li>地址空间使用二维内存地址并且有2部分：(段#，段内偏移)</li>
<li>段可以有不同的保护</li>
<li>允许共享程序和进程之间的数据。</li>
</ul>
</li>
<li><p>分段和分页结合：MULTICS</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032329771.png" alt="image-20220103232902722"></p>
</li>
</ul>
<h3><span id="问题">问题</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032104712.png" alt="image-20220103210438670" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032113447.png" alt="image-20220103211353406" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032148956.png" alt="image-20220103214858914" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032254015.png" alt="image-20220103225451971" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032330044.png" alt="image-20220103233004999" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032330693.png" alt="image-20220103233019649" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032330393.png" alt="image-20220103233053355" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201032337632.png" alt="image-20220103233726589" style="zoom:67%;"></p>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>课程:操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统L13</title>
    <url>/2022/01/04/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9FL13/</url>
    <content><![CDATA[<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041248291.png" alt="image-20220104124840242"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041229671.png" alt="image-20220104122918634"></p>
<h4><span id="interrupt-handlers-中断处理程序">Interrupt Handlers  中断处理程序</span></h4><ul>
<li><p>中断处理程序隐藏中断效果最好：让驱动程序启动一个 I/O 操作块，直到中断通知完成</p>
<ul>
<li>启动一个I/O操作的驱动程序阻塞起来，直到I/O操作完成并且产生一个中断</li>
</ul>
</li>
<li><p>中断程序完成它的任务，然后解开启动它的驱动程序</p>
</li>
<li><p>中断完成后，必须在软件中执行以下步骤：</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041229338.png" alt="image-20220104122950280"></p>
</li>
</ul>
<h4><span id="device-drivers-设备驱动程序">Device Drivers 设备驱动程序</span></h4><p>每个连接到计算机上的I/O设备都需要某些设备特定的代码来对其进行控制</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041221345.png" alt="image-20220104122155296" style="zoom:67%;"></p>
<h4><span id="device-independent-io-software-与设备无关的io软件">Device-Independent I/O Software 与设备无关的I/O软件</span></h4><h5><span id="独立于设备的软件的基本功能">独立于设备的软件的基本功能</span></h5><ul>
<li>执行所有设备共有的 I/O 功能</li>
<li>并为用户级软件提供统一的接口。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041236378.png" alt="image-20220104123636339"></p>
<h5><span id="设备驱动程序的统一接口">设备驱动程序的统一接口</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041242143.png" alt="image-20220104124230094"></p>
<h5><span id="缓冲">缓冲</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041245114.png" alt="image-20220104124541053"></p>
<p>Modem：调制解调器</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041250909.png" alt="image-20220104125035863"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041248291.png" alt="image-20220104124840242"></p>
<h4><span id="盘">盘</span></h4><h5><span id="magnetic-disk-磁盘">Magnetic Disk 磁盘</span></h5><ul>
<li>Hard disks and floppy disks 硬盘和软盘</li>
<li>Organized into cylinders, tracks, and sectors. 组织成圆柱体、磁道和扇区</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041311503.png" alt="image-20220104131144463"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041312086.png" alt="image-20220104131254009"></p>
<h5><span id="disk-hardware">Disk Hardware</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041314166.png" alt="image-20220104131428565"></p>
<ul>
<li>所有现代磁盘现在都支持一种称为逻辑块寻址的系统<ul>
<li>磁盘扇区从0开始连续编号，不管磁盘的几何规格如何</li>
</ul>
</li>
</ul>
<h5><span id="disk-formatting-磁盘格式化">Disk Formatting 磁盘格式化</span></h5><ul>
<li>在使用磁盘之前，应对磁盘进行低级格式化(low-level format)操作。</li>
<li>每个磁道由多个扇区组成，扇区之间的间隔很短。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041318862.png" alt="image-20220104131845835"></p>
<h5><span id="cylinder-skew-柱面斜进">Cylinder Skew 柱面斜进</span></h5><p>Cylinder skew：当低级格式被放下时，每个磁道上扇区0的位置与前一磁道的偏移</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041320278.png" alt="image-20220104132048206" style="zoom: 50%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041321688.png" alt="image-20220104132132652" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041323100.png" alt="image-20220104132304073"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041329522.png" alt="image-20220104132923475"></p>
<h5><span id="disk-interleaving-磁盘交错">Disk Interleaving 磁盘交错</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041339921.png" alt="image-20220104133936871"></p>
<p>动机：当复制到内存完成时（需要一些时间成本），控制器将不得不等待几乎整个旋转时间才能让第二个扇区再次出现。</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041351029.png" alt="image-20220104135113975"></p>
<p>单交错：可以在连续的扇区之间给控制器以喘息的空间以便将缓存区复制到主存</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041350387.png" alt="image-20220104135049346"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041404136.png" alt="image-20220104140459097"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041403903.png" alt="image-20220104140309869"></p>
<h5><span id="disk-arm-scheduling-algorithms-磁盘臂调度算法">Disk Arm Scheduling Algorithms 磁盘臂调度算法</span></h5><ul>
<li>读取或写入磁盘块所需的时间由 3 个因素决定<ul>
<li>寻找时间 seek time</li>
<li>旋转延迟 rotational delay</li>
<li>实际数据传输时间 actual transfer time</li>
</ul>
</li>
<li>寻道时间占主导地位 </li>
<li>错误检查由控制器完成</li>
</ul>
<p>FIFO 先进先出</p>
<p>Shortest Seek First, SSF 最短寻道优先</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041411202.png" alt="image-20220104141155961"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041414580.png" alt="image-20220104141424395"></p>
<p>Elevator Algorithm 电梯算法</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041414739.png" alt="image-20220104141410547"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041415391.png" alt="image-20220104141512237"></p>
<h3><span id="问题">问题</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041303725.png" alt="image-20220104130310681" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041417002.png" alt="image-20220104141706909"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041418666.png" alt="image-20220104141806568"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041418195.png" alt="image-20220104141848112"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041421738.png" alt="image-20220104142122655"></p>
<h3><span id="check-points">Check Points</span></h3><ol>
<li>Briefly describe the structure of a disk.</li>
<li>What is cylinder skew?</li>
<li>What is interleaving?</li>
<li>What are the three factors that determine the time of reading data from disk?</li>
<li>Briefly describe two disk arm scheduling algorithms?</li>
</ol>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201062122263.png" alt="image-20220106212226202"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201062122049.png" alt="image-20220106212237016"></p>
<p>Number the sectors in a staggered manner</p>
<ul>
<li>seek time</li>
<li>rotational delay</li>
<li>actual tr</li>
</ul>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>课程:操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>图像处理L1</title>
    <url>/2021/10/17/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86L1/</url>
    <content><![CDATA[<h1><span id="问题一至问题十">问题一至问题十</span></h1><h2><span id="问题一通道交换">问题一：通道交换</span></h2><p>读取图像，然后将$\text{RGB}$通道替换成$\text{BGR}$通道。</p>
<p>下面的代码用于提取图像的红色通道。</p>
<p>注意，<code>cv2.imread()</code> 的系数是按$\text{BGR}$顺序排列的！</p>
<p>其中的变量<code>red</code>表示的是仅有原图像红通道的<code>https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/imori.jpg</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># cv2.imread() 的系数是按 BGR顺序排列的</span></span><br><span class="line"><span class="comment"># 读取图片，第二个参数0是灰色，1是彩色</span></span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&quot;https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/imori.jpg&quot;</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">plt.imshow(img)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">red = img[:, :, <span class="number">2</span>].copy()</span><br><span class="line">blue = img[:, :, <span class="number">0</span>].copy()</span><br><span class="line">img[:, :, <span class="number">0</span>] = red</span><br><span class="line">img[:, :, <span class="number">2</span>] = blue</span><br><span class="line"></span><br><span class="line">plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">plt.imshow(img)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="built_in">print</span>(img.shape)</span><br></pre></td></tr></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">输入（<a href="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/imori.jpg">https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/imori.jpg</a>)</th>
<th style="text-align:center">输出(<a href="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/answer_1.jpg">https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/answer_1.jpg</a>)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/imori.jpg" alt></td>
<td style="text-align:center"><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/answer_1.jpg" alt></td>
</tr>
</tbody>
</table>
</div>
<h2><span id="问题二灰度化grayscale">问题二：灰度化（Grayscale）</span></h2><p>将图像灰度化吧！</p>
<p>灰度是一种图像亮度的表示方法，通过下式计算：</p>
<script type="math/tex; mode=display">
Y = 0.2126\  R + 0.7152\  G + 0.0722\  B</script><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">输入（<a href="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/imori.jpg">https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/imori.jpg</a>)</th>
<th style="text-align:center">输出(<a href="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/answer_2.jpg">https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/answer_2.jpg</a>)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/imori.jpg" alt></td>
<td style="text-align:center"><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/answer_2.jpg" alt></td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 灰度化</span></span><br><span class="line">img = cv2.imread(<span class="string">&quot;https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/imori.jpg&quot;</span>)</span><br><span class="line">blue = np.array(img[:, :, <span class="number">0</span>].copy(), dtype=<span class="string">&#x27;float64&#x27;</span>)</span><br><span class="line">blue *= <span class="number">0.0722</span></span><br><span class="line"></span><br><span class="line">green = np.array(img[:, :, <span class="number">1</span>].copy(), dtype=<span class="string">&#x27;float64&#x27;</span>)</span><br><span class="line">green *= <span class="number">0.7152</span></span><br><span class="line"></span><br><span class="line">red = np.array(img[:, :, <span class="number">2</span>].copy(), dtype=<span class="string">&#x27;float64&#x27;</span>)</span><br><span class="line">red *= <span class="number">0.2126</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">img[:, :, <span class="number">0</span>] = red+green+blue</span><br><span class="line">img[:, :, <span class="number">1</span>] = red+green+blue</span><br><span class="line">img[:, :, <span class="number">2</span>] = red+green+blue</span><br><span class="line"></span><br><span class="line">plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">plt.imshow(img)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<h2><span id="问题三二值化thresholding">问题三：二值化（Thresholding）</span></h2><p>把图像进行二值化吧。</p>
<p>二值化是将图像使用黑和白两种颜色表示的方法。</p>
<p>我们将灰度的阈值设置为$128$来进行二值化，即：</p>
<script type="math/tex; mode=display">
y=
\begin{cases}
0& (\text{if}\quad y < 128) \\
255& (\text{else})
\end{cases}</script><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">输入（<a href="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/imori.jpg">https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/imori.jpg</a>)</th>
<th style="text-align:center">输出(<a href="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/answer_3.jpg">https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/answer_3.jpg</a>)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/imori.jpg" alt></td>
<td style="text-align:center"><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/answer_3.jpg" alt></td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 3 二值化</span></span><br><span class="line"><span class="comment"># 二值化是将图像使用黑和白两种颜色表示的方法。</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(img[:, :, <span class="number">0</span>])):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(img[:, :, <span class="number">0</span>][<span class="number">1</span>])):</span><br><span class="line">        <span class="keyword">if</span> img[:, :, <span class="number">0</span>][i][j] &lt; <span class="number">128</span>:</span><br><span class="line">            img[:, :, <span class="number">0</span>][i][j] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            img[:, :, <span class="number">0</span>][i][j] = <span class="number">255</span></span><br><span class="line">        </span><br><span class="line">img[:, :, <span class="number">1</span>] = img[:, :, <span class="number">0</span>]</span><br><span class="line">img[:, :, <span class="number">2</span>] = img[:, :, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">plt.imshow(img)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<h2><span id="问题四大津二值化算法otsus-method">问题四：大津二值化算法（Otsu’s Method）</span></h2><p>使用大津算法来二值化图像吧。</p>
<p>大津算法，也被称作最大类间方差法，是一种可以自动确定二值化中阈值的算法。</p>
<p>从<strong>类内方差</strong>和<strong>类间方差</strong>的比值计算得来：</p>
<ul>
<li>小于阈值$t$的类记作$0$，大于阈值$t$的类记作$1$；</li>
<li>$w_0$和$w_1$是被阈值$t$分开的两个类中的像素数占总像素数的比率（满足$w_0+w_1=1$）；</li>
<li>${S_0}^2$， ${S_1}^2$是这两个类中像素值的方差；</li>
<li>$M_0$，$M_1$是这两个类的像素值的平均值；</li>
</ul>
<p>即：</p>
<ul>
<li>类内方差：${S_w}^2=w_0\ {S_0}^2+w_1\  {S_1}^2$</li>
<li>类间方差：${S_b}^2 = w_0 \  (M_0 - M_t)^2 + w_1\ (M_1 - M_t)^2 = w_0\  w_1\  (M_0 - M_1) ^2$</li>
<li>图像所有像素的方差：${S_t}^2 = {S_w}^2 + {S_b}^2 = \text{常数}$</li>
</ul>
<p>根据以上的式子，我们用以下的式子计算分离度$X$：<sup><a href="#fn_1" id="reffn_1">1</a></sup></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main\image-20211018180048798.png" alt="image-20211018180048798"></p>
<p>也就是说： </p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main\image-20211018180102429.png" alt="image-20211018180102429"></p>
<p>换言之，如果使${S_b}^2={w_0}\ {w_1}\ (M_0 - M_1)^2$最大，就可以得到最好的二值化阈值$t$。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">输入（<a href="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/imori.jpg">https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/imori.jpg</a>)</th>
<th style="text-align:center">输出 ($\text{th} = 127$) (<a href="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/answer_4.jpg">https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/answer_4.jpg</a>)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/imori.jpg" alt></td>
<td style="text-align:center"><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/answer_4.jpg" alt></td>
</tr>
</tbody>
</table>
</div>
<h2><span id="问题五texthsv变换">问题五：$\text{HSV}$变换</span></h2><p>将使用$\text{HSV}$表示色彩的图像的色相反转吧！</p>
<p>$\text{HSV}$即使用<strong>色相（Hue）、饱和度（Saturation）、明度（Value）</strong>来表示色彩的一种方式。</p>
<ul>
<li><p>色相：将颜色使用$0^{\circ}$到$360^{\circ}$表示，就是平常所说的颜色名称，如红色、蓝色。色相与数值按下表对应：</p>
<p>| 红          | 黄           | 绿            | 青色          | 蓝色          | 品红          | 红            |<br>| —————- | —————— | ——————- | ——————- | ——————- | ——————- | ——————- |<br>| $0^{\circ}$ | $60^{\circ}$ | $120^{\circ}$ | $180^{\circ}$ | $240^{\circ}$ | $300^{\circ}$ | $360^{\circ}$ |</p>
</li>
<li><p>饱和度：是指色彩的纯度，饱和度越低则颜色越黯淡（$0\leq S &lt; 1$）；</p>
</li>
<li>明度：即颜色的明暗程度。数值越高越接近白色，数值越低越接近黑色（$0\leq V &lt; 1$）；</li>
</ul>
<p>从$\text{RGB}$色彩表示转换到$\text{HSV}$色彩表示通过以下方式计算：</p>
<p>$\text{RGB}$的取值范围为$[0, 1]$，令：</p>
<script type="math/tex; mode=display">
\text{Max}=\max(R,G,B)\\
\text{Min}=\min(R,G,B)</script><p>色相：</p>
<script type="math/tex; mode=display">
H=\begin{cases}
0&(\text{if}\ \text{Min}=\text{Max})\\
60\  \frac{G-R}{\text{Max}-\text{Min}}+60&(\text{if}\ \text{Min}=B)\\
60\  \frac{B-G}{\text{Max}-\text{Min}}+180&(\text{if}\ \text{Min}=R)\\
60\  \frac{R-B}{\text{Max}-\text{Min}}+300&(\text{if}\ \text{Min}=G)
\end{cases}</script><p>饱和度：</p>
<script type="math/tex; mode=display">
S=\text{Max}-\text{Min}</script><p>明度：</p>
<script type="math/tex; mode=display">
V=\text{Max}</script><p>从$\text{HSV}$色彩表示转换到$\text{RGB}$色彩表示通过以下方式计算：</p>
<script type="math/tex; mode=display">
C = S\\</script><script type="math/tex; mode=display">
H' = \frac{H}{60}\\</script><script type="math/tex; mode=display">
X = C\  (1 - |H' \mod 2 - 1|)\\</script><script type="math/tex; mode=display">
(R,G,B)=(V-C)\ (1,1,1)+\begin{cases}
(0, 0, 0)&  (\text{if H is undefined})\\
(C, X, 0)&  (\text{if}\quad 0 \leq H' < 1)\\
(X, C, 0)&  (\text{if}\quad 1 \leq H' < 2)\\
(0, C, X)&  (\text{if}\quad 2 \leq H' < 3)\\
(0, X, C)&  (\text{if}\quad 3 \leq H' < 4)\\
(X, 0, C)&  (\text{if}\quad 4 \leq H' < 5)\\
(C, 0, X)&  (\text{if}\quad 5 \leq H' < 6)
\end{cases}</script><p>请将色相反转（色相值加$180$），然后再用$\text{RGB}$色彩空间表示图片。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">输入（<a href="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/imori.jpg">https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/imori.jpg</a>)</th>
<th style="text-align:center">输出(<a href="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/answer_5.jpg">https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/answer_5.jpg</a>)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/imori.jpg" alt></td>
<td style="text-align:center"><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/answer_5.jpg" alt></td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>答案 </p>
<ul>
<li>Python &gt;&gt; <a href="answers_py/answer_5.py">answers_py/answer_5.py</a></li>
<li>C++ &gt;&gt; <a href="answers_cpp/answer_5.cpp">answers_cpp/answer_5.cpp</a></li>
</ul>
</blockquote>
<h2><span id="问题六减色处理2">问题六：减色处理<sup><a href="#fn_2" id="reffn_2">2</a></sup></span></h2><blockquote id="fn_2">
<sup>2</sup>. 这里没有找到”減色処理”准确的中文翻译，所以直译了。<a href="#reffn_2" title="Jump back to footnote [2] in the text."> &#8617;</a>
</blockquote>
<p>我们将图像的值由$256^3$压缩至$4^3$，即将$\text{RGB}$的值只取$\{32, 96, 160, 224\}$。这被称作色彩量化。色彩的值按照下面的方式定义：</p>
<script type="math/tex; mode=display">
\text{val}=
\begin{cases}
32& (0 \leq \text{var} <  64)\\
96& (64\leq \text{var}<128)\\
160&(128\leq \text{var}<192)\\
224&(192\leq \text{var}<256)
\end{cases}</script><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">输入（<a href="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/imori.jpg">https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/imori.jpg</a>)</th>
<th style="text-align:center">输出(<a href="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/answer_6.jpg">https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/answer_6.jpg</a>)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/imori.jpg" alt></td>
<td style="text-align:center"><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/answer_6.jpg" alt></td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>答案 </p>
<ul>
<li>Python &gt;&gt; <a href="answers_py/answer_6.py">answers_py/answer_6.py</a></li>
<li>C++ &gt;&gt; <a href="answers_cpp/answer_6.cpp">answers_cpp/answer_6.cpp</a></li>
</ul>
</blockquote>
<h2><span id="问题七平均池化average-pooling">问题七：平均池化（Average Pooling）</span></h2><p>将图片按照固定大小网格分割，网格内的像素值取网格内所有像素的平均值。</p>
<p>我们将这种把图片使用均等大小网格分割，并求网格内代表值的操作称为<strong>池化（Pooling）</strong>。</p>
<p>池化操作是<strong>卷积神经网络（Convolutional Neural Network）</strong>中重要的图像处理方式。平均池化按照下式定义：</p>
<script type="math/tex; mode=display">
v=\frac{1}{|R|}\  \sum\limits_{i=1}^R\ v_i</script><p>请把大小为$128\times128$的<code>https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/imori.jpg</code>使用$8\times8$的网格做平均池化。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">输入（<a href="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/imori.jpg">https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/imori.jpg</a>)</th>
<th style="text-align:center">输出(<a href="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/answer_7.jpg">https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/answer_7.jpg</a>)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/imori.jpg" alt></td>
<td style="text-align:center"><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/answer_7.jpg" alt></td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>答案 </p>
<ul>
<li>Python &gt;&gt; <a href="answers_py/answer_7.py">answers_py/answer_7.py</a></li>
<li>C++ &gt;&gt; <a href="answers_cpp/answer_7.cpp">answers_cpp/answer_7.cpp</a></li>
</ul>
</blockquote>
<h2><span id="问题八最大池化max-pooling">问题八：最大池化（Max Pooling）</span></h2><p>网格内的值不取平均值，而是取网格内的最大值进行池化操作。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">输入（<a href="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/imori.jpg">https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/imori.jpg</a>)</th>
<th style="text-align:center">输出(<a href="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/answer_8.jpg">https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/answer_8.jpg</a>)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/imori.jpg" alt></td>
<td style="text-align:center"><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/answer_8.jpg" alt></td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>答案</p>
<ul>
<li>Python &gt;&gt; <a href="answers_py/answer_8.py">answers_py/answer_8.py</a></li>
<li>C++ &gt;&gt; <a href="answers_cpp/answer_8.cpp">answers_cpp/answer_8.cpp</a></li>
</ul>
</blockquote>
<h2><span id="问题九高斯滤波gaussian-filter">问题九：高斯滤波（Gaussian Filter）</span></h2><p>使用高斯滤波器（$3\times3$大小，标准差$\sigma=1.3$）来对<code>imori_noise.jpg</code>进行降噪处理吧！</p>
<p>高斯滤波器是一种可以使图像<strong>平滑</strong>的滤波器，用于去除<strong>噪声</strong>。可用于去除噪声的滤波器还有中值滤波器（参见问题十），平滑滤波器（参见问题十一）、LoG滤波器（参见问题十九）。</p>
<p>高斯滤波器将中心像素周围的像素按照高斯分布加权平均进行平滑化。这样的（二维）权值通常被称为<strong>卷积核（kernel）</strong>或者<strong>滤波器（filter）</strong>。</p>
<p>但是，由于图像的长宽可能不是滤波器大小的整数倍，因此我们需要在图像的边缘补$0$。这种方法称作<strong>Zero Padding</strong>。并且权值$g$（卷积核）要进行<a href="https://blog.csdn.net/lz0499/article/details/54015150">归一化操作</a>（$\sum\ g = 1$）。</p>
<p>按下面的高斯分布公式计算权值：</p>
<script type="math/tex; mode=display">
g(x,y,\sigma)=\frac{1}{2\  \pi\ \sigma^2}\  e^{-\frac{x^2+y^2}{2\  \sigma^2}}</script><p>标准差$\sigma=1.3$的$8-$近邻高斯滤波器如下：</p>
<script type="math/tex; mode=display">
K=\frac{1}{16}\  \left[
 \begin{matrix}
   1 & 2 & 1 \\
   2 & 4 & 2 \\
   1 & 2 & 1
  \end{matrix}
  \right]</script><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">输入（imori_noise.jpg)</th>
<th style="text-align:center">输出(<a href="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/answer_9.jpg">https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/answer_9.jpg</a>)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><img src="imori_noise.jpg" alt></td>
<td style="text-align:center"><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/answer_9.jpg" alt></td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>答案 </p>
<ul>
<li>Python &gt;&gt; <a href="answers_py/answer_9.py">answers_py/answer_9.py</a></li>
<li>C++ &gt;&gt; <a href="answers_cpp/answer_9.cpp">answers_cpp/answer_9.cpp</a></li>
</ul>
</blockquote>
<h2><span id="问题十中值滤波median-filter">问题十：中值滤波（Median Filter）</span></h2><p>使用中值滤波器（$3\times3$大小）来对<code>imori_noise.jpg</code>进行降噪处理吧！</p>
<p>中值滤波器是一种可以使图像平滑的滤波器。这种滤波器用滤波器范围内（在这里是$3\times3$）像素点的中值进行滤波，请在这里也采用Zero Padding。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">输入（imori_noise.jpg)</th>
<th style="text-align:center">输出(<a href="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/answer_10.jpg">https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/answer_10.jpg</a>)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><img src="imori_noise.jpg" alt></td>
<td style="text-align:center"><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/answer_10.jpg" alt></td>
</tr>
</tbody>
</table>
</div>
]]></content>
  </entry>
  <entry>
    <title>操作系统L12</title>
    <url>/2021/10/14/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9FL12/</url>
    <content><![CDATA[<h3><span id="io设备的分类">I/O设备的分类</span></h3><ol>
<li>Block device 块设备：信息存储在固定的块中</li>
<li>Character device 字符设备：传递或接受字符流，不考虑任何块结构</li>
</ol>
<h4><span id="io设备的组成">I/O设备的组成</span></h4><ul>
<li>机器部分</li>
<li>电子部分，即设备控制器(device controller)</li>
</ul>
<h5><span id="device-controllers-设备控制器">Device Controllers 设备控制器</span></h5><ul>
<li>设备控制器是计算机系统的一部分，它能够识别CPU的信号</li>
<li>每个设备控制器都有一个本地缓冲区和一些寄存器。</li>
<li>它通过中断与 CPU 通信。 </li>
<li>设备的控制器充当设备和操作系统之间的桥梁</li>
</ul>
<h4><span id="cpu与设备的控制寄存器和数据缓存区进行通信">CPU与设备的控制寄存器和数据缓存区进行通信</span></h4><p>三种方法：</p>
<ul>
<li><p>每个控制寄存器被分配I/O端口号。</p>
</li>
<li><p>所有控制寄存器都映射到存储空间。这称为内存映射I/O(Memory-Mapped I/O)</p>
</li>
<li><p>将I/O数据缓冲区映射到内存空间中，但从内存中分离I/O端口</p>
</li>
</ul>
<h5><span id> </span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041031224.png" alt="image-20220104103129072"></p>
<h5><span id> </span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041035192.png" alt="image-20220104103542073" style="zoom:67%;"></p>
<h3><span id="io的实现">I/O的实现</span></h3><h4><span id="programmed-io-程序控制io">Programmed I/O 程序控制I/O</span></h4><ul>
<li><p>Programmed input/output (PIO) </p>
</li>
<li><p>一种在CPU和外围设备之间传输数据的方法。</p>
</li>
</ul>
<ul>
<li>CPU上运行的软件使用指令执行数据传输到I/O设备。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041039975.png" alt="image-20220104103944872"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041040896.png" alt="image-20220104104030683"></p>
<h4><span id="interrupt-driven-io">Interrupt-Driven I/O</span></h4><ul>
<li><p>使用中断驱动的I / O将字符串写入打印机</p>
<ul>
<li><p>在打印系统调用时执行的代码</p>
</li>
<li><p>中断服务程序</p>
</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041228670.png" alt="image-20220104122825613"></p>
<ul>
<li><p>中断是怎么发生的？</p>
<ul>
<li>设备与中断控制器之间的连接实际上在总线上使用中断线而不是专用电线</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041046021.png" alt="image-20220104104629898"></p>
<h5><span id="interrupt-handlers-中断处理程序">Interrupt Handlers 中断处理程序</span></h5><ul>
<li>中断处理程序最好隐藏，让驱动程序启动I/O操作块，直到中断通知完成</li>
<li>中断过程执行其任务，然后取消阻止启动它的驱动程序。</li>
</ul>
<h4><span id="io-using-dma">I/O Using DMA</span></h4><ul>
<li>使用 DMA 打印字符串<ul>
<li>在进行打印系统调用时执行的代码 </li>
<li>中断服务程序</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041055864.png" alt="image-20220104105553641"></p>
<h5><span id="direct-memory-access-dma-直接存储器存取">Direct Memory Access (DMA) 直接存储器存取</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041059549.png" alt="image-20220104105924409"></p>
<h4><span id="io-software-layers-io软件层次">I/O Software Layers I/O软件层次</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041059946.png" alt="image-20220104105938810"></p>
<h4><span id="device-drivers">Device Drivers</span></h4><ul>
<li>驱动器和设备控制器之间的通信通过总线进行；</li>
<li>设备驱动程序的逻辑位置如下图所示。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041101692.png" alt="image-20220104110137579"></p>
<h3><span id="问题">问题</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201040937085.png" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201040938341.png" alt="image-20220104093859240" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201040940072.png" alt="image-20220104094011983" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201040940834.png" alt="image-20220104094030730"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201040941108.png" alt="image-20220104094137001"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201040941572.png" alt="image-20220104094159500"></p>
<p>45000</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041051203.png" alt="image-20220104105108065"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041051414.png" alt="image-20220104105156324"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041103032.png" alt="image-20220104110327898" style="zoom:67%;"></p>
<h3><span id="check-points">Check Points</span></h3><p>① What are the two kinds of IO devices.<br>② What are the two components of IO devices.<br>③ What is programmed IO?<br>④ What is Interrupt-Driven IO?<br>⑤ What is IO using DMA?<br>⑥ What are the five layers of the IO software system<br>⑦ What are the difference between driver and interrupt handler?</p>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>课程:操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统L14</title>
    <url>/2022/01/04/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9FL14/</url>
    <content><![CDATA[<h4><span id="redundant-array-of-independent-disk-raid-独立磁盘冗余阵列">Redundant Array of Independent Disk (RAID)　独立磁盘冗余阵列</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041536386.png" alt="image-20220104153654329"></p>
<ul>
<li>SLED：单个大容量昂贵磁盘</li>
<li>SCSI盘：采用SCSI接口的硬盘，SCSI是Small Computer System Interface（ 小型计算机系统接口 ）的缩写，接口速度快CPU占用率低</li>
</ul>
<p>关键思想：数据分布在驱动器上，以允许并行操作。</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041539432.png" alt="image-20220104153923383"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041533590.png" alt="image-20220104153344517"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041540091.png" alt="image-20220104154030058"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041541694.png" alt="image-20220104154115660"></p>
<p>这叫做划分条带（striping）</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041542613.png" alt="image-20220104154207562"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041542735.png" alt="image-20220104154234693"></p>
<h4><span id="error-handling-错误处理">Error Handling 错误处理</span></h4><ul>
<li><p>为什么总是出错？</p>
<ul>
<li>一旦制造技术改进到可以在特定密度下完美运行的程度，磁盘设计者就会转向更高的密度来增加容量。</li>
</ul>
</li>
<li><p>两种解决方案：用备用扇区替换坏扇区，或者移动扇区。</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041545604.png" alt="image-20220104154505538"></p>
<h4><span id="stable-storage-稳定存储器">Stable Storage 稳定存储器</span></h4><ul>
<li>RAID 首先不能对将坏数据写下的写错误提供保护，也不能对写操作期间的崩溃提供保护</li>
<li>在某些应用程序中，数据永远不会丢失或损坏是至关重要的。</li>
<li><p>稳定存储：目标是不惜一切代价保持磁盘的一致性</p>
</li>
<li><p>定义了三种操作</p>
<ul>
<li>稳定写 — stable write</li>
<li>稳定读 — stable read</li>
<li>崩溃恢复 — crash recovery</li>
</ul>
</li>
</ul>
<h5><span id="稳定写">稳定写</span></h5><ul>
<li>将块写入驱动器 1 上，然后读取它以进行验证。</li>
<li>如果出了什么问题，再写和重读 n 次，直到它们起作用为止。</li>
<li>在连续 n 次失败后，该块被重新映射到备用块上并重复该操作（写和重读操作）直到成功。</li>
<li>写入驱动器 1 成功后，对驱动器 2 上的相应块进行写入和重新读取，如果需要，重复，直到它也最终成功。</li>
</ul>
<h5><span id="稳定读">稳定读</span></h5><ul>
<li>读取驱动器 1 上的块，如果这产生不正确的 ECC，则再次尝试读取，最多 n 次。<br>如果所有 n 次都失败，则从驱动器 2 读取。</li>
<li>同一块在两个驱动程序上都变坏的可能性可以忽略不计。</li>
</ul>
<h5><span id="崩溃恢复">崩溃恢复</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041555605.png" alt="image-20220104155509564"></p>
<h3><span id="clock-时钟">Clock 时钟</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041555150.png" alt="image-20220104155540101"></p>
<h4><span id="clock-hardware-时钟硬件">Clock Hardware 时钟硬件</span></h4><p>可编程时钟</p>
<ul>
<li><p>三个部件</p>
<ul>
<li>晶体振荡器</li>
<li>计数器</li>
<li>存储寄存器</li>
</ul>
</li>
<li><p>晶体振荡器可以产生几百MHz范围内的周期信号。</p>
<ul>
<li><p>两种模式：一次性模式和方波模式</p>
</li>
<li><p>时钟滴答：由可编程时钟引起的周期性中断。</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041602343.png" alt="image-20220104160246286"></p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041557155.png" alt="image-20220104155700110"></p>
<h4><span id="clock-software-时钟软件">Clock Software 时钟软件</span></h4><ul>
<li><p>时钟驱动的功能</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041607484.png" alt="image-20220104160748446"></p>
</li>
<li><p>为了满足多个计时请求，操作系统需要用一个时钟模拟多个虚拟定时器。</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041608405.png" alt="image-20220104160849363"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201062131934.png" alt="image-20220104161109882"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041611558.png" alt="image-20220104161118521"></p>
<h4><span id="input-software-keyboard-输入软件键盘">Input Software: Keyboard 输入软件：键盘</span></h4><ul>
<li>按下或释放键时会产生中断。</li>
<li>键盘驱动程序从 I/O 端口提取扫描码，并将其转换为 ASCII 码。</li>
<li>两种模式：规范模式、非规范模式。</li>
</ul>
<h4><span id="mouse-software">Mouse Software</span></h4><ul>
<li>两种常见类型：<ul>
<li>带橡皮球的鼠标</li>
<li>光电鼠标</li>
</ul>
</li>
<li>当鼠标移动了某个最小距离或按下或释放按钮时，就会向计算机发送一条消息。<pre><code>(Dx, Dy, 按钮状态)
</code></pre></li>
</ul>
<h4><span id="output-softwaretext-windows-输出软件-文本窗口">Output Software：Text Windows  输出软件： 文本窗口</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041801985.png" alt="image-20220104180103896"></p>
<p>转义序列：escape sequences</p>
<h4><span id="output-software-gui-windows">Output Software: GUI Windows</span></h4><p>GUI（图形用户界面）有四个基本元素：窗口、图标、菜单和指点设备。</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041804159.png" alt="image-20220104180434062"></p>
<p>Draw points, lines, rectangles: The Win32 SDK contain many APIs for GUI development.</p>
<p>Bismap 位图: Copying bitmaps using Bitblt. </p>
<p>Fonts：每个 Truetype 字体由围绕其周边的一系列点定义。 所有的点都相对于 (0,0) 原点。</p>
<h4><span id="power-management">Power Management</span></h4><ul>
<li>最常见的节省电池的方法是将设备设计为具有多种状态：<ul>
<li>打开、睡眠和关闭。</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041814008.png" alt="image-20220104181454959"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041817571.png" alt="image-20220104181746518"></p>
<ul>
<li>以全时钟速度运行。</li>
<li>将电压降低 2 倍，时钟速度降低 2 倍，功耗降低 4 倍。</li>
<li>通过接受一些质量下降，用户可以使用给定的电池运行更长时间。<ul>
<li>放弃颜色信息，以黑白显示视频。</li>
<li>使用无线电链接将任务发送到其他设备。</li>
<li>交易图像质量以减少传输过载。</li>
</ul>
</li>
</ul>
<h3><span id="问题">问题</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041428023.png" alt="image-20220104142813946" style="zoom:80%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041429726.png" alt="image-20220104142917617" style="zoom:80%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041523165.png" alt="image-20220104152316119" style="zoom: 80%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041613295.png" alt="image-20220104161322261"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041617985.png" alt="image-20220104161727961"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041617893.png" alt="image-20220104161734860" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041821708.png" alt="image-20220104182108675"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041823361.png" alt="image-20220104182329331"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041823571.png" alt="image-20220104182340534"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041833167.png" alt="image-20220104183352121" style="zoom:67%;"></p>
<h3><span id="summary">Summary</span></h3><ol>
<li>Two kinds of I/O devices.</li>
<li>The components of I/O device.</li>
<li>Three ways to communicate with I/O.</li>
<li>Disks: Magnetic disks (components, disk arm scheduling), RAIDs</li>
<li>Clocks</li>
<li>Terminals: Text windows, GUI Windows</li>
<li>Power Management</li>
</ol>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>课程:操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统L15</title>
    <url>/2021/10/28/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9FL15/</url>
    <content><![CDATA[<h4><span id="长期存储信息的三个基本要求">长期存储信息的三个基本要求：</span></h4><ul>
<li><p>能够存储大量信息</p>
</li>
<li><p>使用信息的进程终止时，保存的信息仍旧存在</p>
</li>
<li><p>必须能使多个进程并发访问有关信息</p>
<p>解决方案：将信息以称为文件的单位存储在磁盘或其他外部媒体上。</p>
</li>
</ul>
<h3><span id="file-文件">File 文件</span></h3><ul>
<li>文件是进程创建的信息逻辑单元</li>
<li>文件是对磁盘的建模</li>
<li>可以把每个文件看成一个地址空间</li>
</ul>
<h4><span id="文件命名">文件命名</span></h4><ul>
<li>是一种抽象机制，提供了一种在磁盘上保存信息而且方便以后读取的方法</li>
<li>每一个文件至少有一个名字</li>
<li>名字可能包括了文件内容的信息，让人知道里面有什么，计算机可能会使用名字的一部分去决定文件类型</li>
</ul>
<h4><span id="文件结构">文件结构</span></h4><ul>
<li>Windows和UNIX：字节序列</li>
<li>Large mainframe computers 大型主机：Tree</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211028100859904.png" alt="image-20211028100859904"></p>
<h4><span id="文件类型">文件类型</span></h4><ul>
<li>普通文件<ul>
<li>ASCII文件：可以显示和打印以及在文本编辑器中编辑</li>
<li>二进制文件</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211028101105673.png" alt="image-20211028101105673" style="zoom:67%;"></p>
<h4><span id="文件访问">文件访问</span></h4><ul>
<li>顺序访问 Sequential access<ul>
<li>进程在系统中可从头按顺序读取文件的全部字节或记录</li>
<li>但不能跳过某一些内容，也不能不按顺序读取</li>
<li>可以返回到起点的，需要时可多次读取该文件</li>
<li>存储介质是磁带(magenetic tape)时比较方便</li>
</ul>
</li>
<li>随机访问文件 Random access<ul>
<li>用磁盘可以不按顺序读取文件，或者按照关键字</li>
<li>能够以任何次序读取其中字节或记录的文件</li>
<li>对数据库系统必不可少</li>
</ul>
</li>
<li>seek操作设置当前位置，之后从这个当前位置顺序地开始读文件</li>
</ul>
<h4><span id="文件属性">文件属性</span></h4><ul>
<li><p>attribute，也叫元数据(metadata)</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211028101832862.png" alt="image-20211028101832862"></p>
</li>
</ul>
<h4><span id="文件操作">文件操作</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041915188.png" alt="image-20220104191516128"></p>
<h3><span id="目录-directories">目录 Directories</span></h3><ul>
<li>文件系统有目录或文件夹来跟踪文件。<ul>
<li>一个单级目录有一个包含所有文件的目录（根）。</li>
<li>两级目录具有根目录和用户目录。</li>
<li>分层目录有一个根目录和任意数量的子目录。</li>
</ul>
</li>
</ul>
<h5><span id="a-single-level-directory-system-一级目录系统">A single level directory system 一级目录系统</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041918638.png" alt="image-20220104191854599"></p>
<p>优点：简单、并且能够快速定位文件</p>
<h5><span id="two-level-directory-systems-两级目录系统">Two-level Directory Systems 两级目录系统</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041920151.png" alt="image-20220104192019112" style="zoom:67%;"></p>
<h5><span id="hierarchical-directory-systems-层次目录系统">Hierarchical Directory Systems  层次目录系统</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041923568.png" alt="image-20220104192338524"></p>
<h5><span id="a-unix-directory-tree">A UNIX directory tree</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041924979.png" alt="image-20220104192427936" style="zoom:80%;"></p>
<ul>
<li>两种不同的方法用于在目录树中指定文件名：<ul>
<li>绝对路径名(absolute path name)由从根目录到文件的路径组成。 <ul>
<li>例如，cp /usr/ast/mailbox /usr/ast/mailbox.bak</li>
</ul>
</li>
<li>相对路径名(relative path name)由当前目录（工作目录）的路径组成。 <ul>
<li>例如，cp ../lib/dictionary → cp /usr/lib/dictionary</li>
</ul>
</li>
</ul>
</li>
<li>不同系统的路径名不同：<ul>
<li>Windows：\usr\ast\mailbox</li>
<li>UNIX：/usr/ast/邮箱</li>
<li>MULTICS：&gt;usr&gt;ast&gt;邮箱</li>
</ul>
</li>
<li>“.” 和“..”是文件系统中的两个特殊条目。<ul>
<li>点 (.) 指的是当前目录（工作目录）</li>
<li>点点 (..) 指的是它的父级</li>
</ul>
</li>
</ul>
<h4><span id="directory-operaitons">Directory Operaitons</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041931570.png" alt="image-20220104193102532" style="zoom:67%;"></p>
<h3><span id="文件系统的实现">文件系统的实现</span></h3><h4><span id="file-system-layout-文件系统布局">File System Layout 文件系统布局</span></h4><ul>
<li>文件系统布局：<ul>
<li>MBR（主引导记录）用于引导计算机。</li>
<li>分区表给出了每个分区的起始地址和结束地址。</li>
</ul>
</li>
</ul>
<p>MBR(Master Boot Record, 主引导记录)：</p>
<ul>
<li>磁盘的0号扇区</li>
<li>在MBR的结尾是分区表，给出了每个分区的起始和结束地址</li>
<li>表中的一个分区被标记为活动分区<ul>
<li>在计算机被引导时，BIOS读入并执行MBR</li>
<li>MBR做的第一件事是确定活动分区，读入它的第一个块，称为引导块(boot block)，并执行</li>
<li>为统一起见，每个分区都从一个引导块开始，即使它不含可启动的操作系统。</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041938227.png" alt="image-20220104193815161" style="zoom:80%;"></p>
<ul>
<li>Boot block 引导块：系统启动时由MBR程序读入。</li>
<li>Superblock 超级块：包含文件系统的关键参数。</li>
<li>Free blocks information 空闲块信息</li>
<li>I-nodes 告诉所有关于文件的信息。</li>
<li>Root directory 根目录</li>
<li>Directories and files 目录和文件</li>
</ul>
<h4><span id="file-allocation-文件的实现">File Allocation 文件的实现</span></h4><h5><span id="连续分配-contiguous-allocation">连续分配  Contiguous Allocation</span></h5><ul>
<li>将每个文件存储为连续的数据块。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041952570.png" alt="image-20220104195208500" style="zoom:67%;"></p>
<ul>
<li>好处：<ul>
<li>实施简单；</li>
<li>读取性能非常好。</li>
</ul>
</li>
<li>缺点：<ul>
<li>磁盘碎片 Disk fragmentation</li>
<li>创建文件时必须知道最大文件大小。</li>
</ul>
</li>
<li>示例：CD-ROM、DVD</li>
</ul>
<h5><span id="file-control-block-文件控制块">File Control Block 文件控制块</span></h5><ul>
<li>一个文件由文件控制块（FCB）和文件体组成。</li>
<li>FCB存储文件的属性信息<ul>
<li>例如，名称、路径、访问控制信息。</li>
</ul>
</li>
<li>在Unix中，FCB是由i-node实现的</li>
</ul>
<h3><span id="问题">问题</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041838725.png" alt="image-20220104183827688" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041841053.png" alt="image-20220104184149019" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041842892.png" alt="image-20220104184244864"></p>
<ol>
<li>FIFO</li>
<li>SSF</li>
<li>Elevator algorithm</li>
</ol>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041934531.png" alt="image-20220104193416495" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041935946.png" alt="image-20220104193521896" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041954821.png" alt="image-20220104195429781" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201041955002.png" alt="image-20220104195533966" style="zoom:67%;"></p>
<h3><span id="check-points">Check points</span></h3><ol>
<li>List three reasons for long-term information storage;</li>
<li>What is sequence of bytes file structure?</li>
<li>Please list at least five common file attributes.</li>
<li>没有文件名也没有文件类型</li>
<li>What is relative path name and why do we need relative path name?</li>
</ol>
<h4><span id="solution">Solution</span></h4><ol>
<li><p>三点 </p>
<ul>
<li>存储容量受虚拟地址空间大小的限制，不同的应用对地址空间的要求不同；</li>
<li>进程终止时，它保存的信息也随之丢失，但还是有些信息需要保存信息</li>
<li>经常需要多个进程同时访问同一信息或其中部分信息</li>
</ul>
</li>
<li><p>把文件看成字节序列</p>
</li>
<li>Creator、Owner、Key length、Current size、Maximum size</li>
<li>?</li>
<li>两问<ul>
<li>相对当前路径开始的路径</li>
<li>More convient</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>课程:操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统L16</title>
    <url>/2022/01/04/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9FL16/</url>
    <content><![CDATA[<h4><span id="file-allocation-文件的实现-续">File Allocation 文件的实现 续</span></h4><h5><span id="链表分配-linked-list-allocation">链表分配 Linked List Allocation</span></h5><ul>
<li>保持磁盘块的链表</li>
<li>缺点<ul>
<li>随机存取速度慢</li>
<li>一个块中的数据量不是2的幂</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201042018219.png" alt="image-20220104201822170" style="zoom:80%;"></p>
<p>由于指针占去了一些字节，每个磁盘块存储数据的字节数不再是2的整数次幂</p>
<h5><span id="采用内存中的表进行链表分配-linked-list-allocation-using-an-index">采用内存中的表进行链表分配 Linked List Allocation using an index</span></h5><ul>
<li>从每个块中取出表指针字并将它们放入内存中的索引表FAT（File Allocation Table 文件分配表）中。</li>
<li>好处<ul>
<li>整个块可用于数据</li>
<li>存储在内存中，速度快</li>
</ul>
</li>
<li>缺点<ul>
<li>占用大量内存。需要将整个表放在内存中</li>
<li>对于 200-GB 磁盘，该表将占用 600M 或 800M 内存。</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201042021424.png" alt="image-20220104202111372" style="zoom:80%;"></p>
<h5><span id="i-node-index-node">I-node (index-node)</span></h5><ul>
<li><p>是一种数据结构，给每个文件赋予一个i节点</p>
</li>
<li><p>列出文件块的属性和磁盘地址</p>
</li>
<li>给定i节点，就能找到文件的所有块</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201042025695.png" alt="image-20220104202517643" style="zoom:80%;"></p>
<ul>
<li><p>这种机制有很大的优势，即只有在对应文件打开时，其i节点才在内存中</p>
</li>
<li><p>占用空间比FAT小</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201042029882.png" alt="image-20220104202905840"></p>
<ul>
<li>i节点的问题</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201042030165.png" alt="image-20220104203000126"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201042030166.png" alt="image-20220104203012139"></p>
<h4><span id="directories-目录的实现">Directories 目录的实现</span></h4><ul>
<li>打开文件时，文件系统使用路径名来定位目录条目(directory entry)。</li>
<li>目录：提供查找磁盘块所需的信息。<ol>
<li>整个文件的磁盘地址（连续块）</li>
<li>第一个块的数量（链表）</li>
<li>I-node的数量（I-node）</li>
</ol>
</li>
<li>在哪里存储属性？ 在目录中还是在 I 节点中？</li>
</ul>
<h5><span id="两种存储属性的方法">两种存储属性的方法</span></h5><ul>
<li>目录条目中的固定大小条目、磁盘地址和属性 (MS-DOS/Windows)</li>
<li>每个条目仅引用一个 I 节点的目录 (UNIX)</li>
</ul>
<h5><span id="处理目录中的长文件名">处理目录中的长文件名</span></h5><ul>
<li>Fixed-length names 定长名称（浪费空间）</li>
<li>In-line 行（删除文件时，会引入一个可变大小的间隙（a））</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201042105983.png" alt="image-20220104210551937"></p>
<ul>
<li>Heap 堆（堆管理需要额外的努力（b））</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201042107130.png" alt="image-20220104210725089"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201042107198.png" alt="image-20220104210740164"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201042055517.png" alt="image-20220104205513420"></p>
<h5><span id="如何搜索每个目录中的文件">如何搜索每个目录中的文件？</span></h5><ul>
<li>Linearly 线性（慢）</li>
<li>Hash  table 哈希表（更快的查找但更复杂的管理）</li>
<li>Cache the results of searches 缓存搜索结果</li>
</ul>
<h5><span id="shared-files-共享文件">Shared files 共享文件</span></h5><ul>
<li>共享文件用于允许文件出现在多个目录中。</li>
<li>目录和共享文件之间的连接称为链接(link)。 文件系统是有向无环图 (DAG)。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201042112143.png" alt="image-20220104211223099"></p>
<ul>
<li>问题：<ul>
<li>如果目录包含磁盘地址，则必须在目录 B 中制作C目录中的磁盘地址的副本。如果 C 或 B 往文件中添加内容，新的数据块将仅出现在添加工作的用户的目录中。</li>
</ul>
</li>
<li>解决方案：<ul>
<li>不要在目录中列出磁盘块地址，而是在一个小的数据结构中，目录指向这个数据结构。例如，索引节点、i节点</li>
<li>创建一个类型为 link 的新文件，其中包含链接到的文件的路径名 → 符号链接(symbolic linking)</li>
</ul>
</li>
<li>两种方法的缺点</li>
</ul>
<p>数据结构</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201042121037.png" alt="image-20220104212101997"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201042121860.png" alt="image-20220104212111805"></p>
<p>符号链接</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201042122572.png" alt="image-20220104212212497"></p>
<h4><span id="virtual-file-systems-虚拟文件系统">Virtual File Systems 虚拟文件系统</span></h4><ul>
<li><p>定义：虚拟文件系统（或虚拟文件系统交换机）是内核中的软件层，为用户空间程序提供文件系统接口。</p>
<ul>
<li>从“the”文件系统到许多文件系统类型</li>
<li>示例 – Ext2、UFS(Solaris)、NFS、Ext3、Veritas、ReiserFS、XFS、ISO9660 (CD)、UDF (DVD) 等。</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201042129805.png" alt="image-20220104212955760"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201042127850.png" alt="image-20220104212716804"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201042130760.png" alt="image-20220104213018724"></p>
<ul>
<li><p>不同类型文件系统的相同 API</p>
<ul>
<li>将文件系统通用操作与实现细节分开</li>
<li>系统调用程序到 VFS API 而不是特定的 FS 接口</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201042131541.png" alt="image-20220104213115495"></p>
</li>
<li><p>非常灵活的用例：</p>
<ul>
<li>远程用户文件和本地系统文件？</li>
<li>从 USB 启动？ 网络？</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201042128691.png" alt="image-20220104212853648" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201042131355.png" alt="image-20220104213104282"></p>
<h3><span id="问题">问题</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201042015823.png" alt="image-20220104201524784" style="zoom: 80%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201042026360.png" alt="image-20220104202634326" style="zoom:80%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201042026410.png" alt="image-20220104202650375" style="zoom:80%;"></p>
<p>文件如果很大，i节点块的大小需要变大，可能还需要指向另一块包含额外块地址的块的地址，所以B、C、D有关</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201042032607.png" alt="image-20220104203231554"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201042040182.png" alt="image-20220104204037153"> </p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201042111328.png" alt="image-20220104211112286" style="zoom:80%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201042131166.png" alt="image-20220104213143133" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201042132690.png" alt="image-20220104213213657"></p>
<h3><span id="check-points">Check Points</span></h3><p>Please describe the advantages and disadvantages of contiguous allocation.</p>
<ul>
<li>随机读取速度快，实现简单，性能好（无需寻道）</li>
<li>需要提前知道文件大小，文件删除后留下碎片</li>
</ul>
<p>Please describe the advantages and disadvantages of linked listed allocation.</p>
<ul>
<li>文件大小可拓展，充分利用磁盘空间</li>
<li>随机存储慢，数据大小不是2的幂次</li>
</ul>
<p>Please describe the advantages and disadvantages of FAT.</p>
<ul>
<li>随机存储速度快，文件大小可拓展</li>
<li>占用内存大量空间，</li>
</ul>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>课程:操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统L17</title>
    <url>/2022/01/04/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9FL17/</url>
    <content><![CDATA[<h2><span id="文件系统管理类和优化">文件系统管理类和优化</span></h2><h3><span id="disk-space-management-磁盘空间管理">Disk space management　磁盘空间管理</span></h3><ul>
<li>文件通常存放在磁盘上</li>
<li>存储 n 字节文件的策略<ul>
<li>分配n个连续字节的磁盘空间<ul>
<li>如果文件增长，则必须将其移动到磁盘上，这是一项昂贵的操作并会导致外部碎片化。</li>
</ul>
</li>
<li>分配 [n/k] 个大小为 k 字节的块<ul>
<li>块不需要相邻。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4><span id="block-size-块大小">block size 块大小</span></h4><ul>
<li>当块大小增加时，磁盘空间利用率降低<ul>
<li>内部碎片化，空间效率降低</li>
<li>这意味着每个文件，甚至一个1字节的文件，都要占用一整个柱面，小的文件浪费了大量的磁盘空间</li>
</ul>
</li>
<li>当块大小减小时，数据传输速率降低<ul>
<li>时间效率降低</li>
<li>大文件会跨越多个块，需要多次寻道与旋转延迟才能读出它们</li>
<li>通常大小 k = 512 字节、1k (UNIX) 或 2k</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201042146036.png" alt="image-20220104214650985"></p>
<h5><span id="keeping-track-of-free-blocks-记录空闲块">Keeping Track of Free Blocks 记录空闲块</span></h5><p>使用位图 bit-map</p>
<ul>
<li>Free blocks -&gt;1,  Allocated blocks -&gt;  0</li>
<li>具有 (n) 个块的磁盘需要具有 (n) 位的位图<ul>
<li>空闲块由 1 表示</li>
<li>已分配块由 0 表示</li>
<li>16GB 磁盘有 $2^{24}$个 1-KB 并且需要 $2^{24}$ 位 → 2048 个块</li>
<li>使用链表 =$2^{24}$/255 = 65793 个块</li>
</ul>
</li>
</ul>
<p>使用磁盘块的链表</p>
<ul>
<li>具有 1 KB 块和 32 位磁盘块号。</li>
<li>每个块保存尽可能多的空闲磁盘块号。 <ul>
<li>→ 1024 * 8/32 = 256 个磁盘块编号 </li>
<li>→ 255 个空闲块（和）1 个下一个块指针.</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201042258278.png" alt="image-20220104225845148" style="zoom:80%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201050916865.png" alt="image-20220105091653820"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201042306257.png" alt="image-20220104230639150" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201042306811.png" alt="image-20220104230659708"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201050911818.png" alt="image-20220105091147717"></p>
<h5><span id="file-system-backup-文件系统备份">File System Backup 文件系统备份</span></h5><ul>
<li>备份是为了处理：从灾难或愚蠢中恢复。</li>
<li>备份的注意事项<ul>
<li>整个或部分文件系统</li>
<li>Incremental dumps 增量转储：仅转储已更改的文件</li>
<li>压缩 Compression</li>
<li>备份活动文件系统 </li>
<li>安全</li>
</ul>
</li>
</ul>
<p>转储磁盘的两种策略：</p>
<ul>
<li>Physical dump 物理转储：<ul>
<li>从块 0 开始到最后一个磁盘块，按序输出到磁带上</li>
<li>优点：简单快捷</li>
<li>缺点：备份一切</li>
</ul>
</li>
<li>Logical dump 逻辑转储：<ul>
<li>从一个或多个指定目录开始，并递归转储自某个给定基准日期以来已更改的所有文件和目录</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201042314885.png" alt="image-20220104231419717" style="zoom:80%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201042342607.png" alt="image-20220104234212510"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201050926482.png" alt="image-20220105092650403"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201050927591.png" alt="image-20220105092706537"></p>
<h5><span id="file-system-consistency-文件系统一致性">File System Consistency  文件系统一致性</span></h5><ul>
<li>大多数操作系统都有一个实用程序，称为文件系统检查器，用于测试文件系统的一致性。<ul>
<li>例如，UNIX 中的 fsck，Windows 中的 sfc</li>
</ul>
</li>
<li>可以进行两种类型的一致性检查：<ul>
<li>块的一致性检查</li>
<li>文件的一致性检查</li>
</ul>
</li>
</ul>
<p>块一致性检查</p>
<ul>
<li>构建两个表，每张表中为每个块设立一个计数器，都初始化为 0 <ul>
<li>第一个表中的计数器跟踪每个块在文件中出现的次数。 </li>
<li>第二个表的计数器记录在空闲表或空闲位图中的出现次数，</li>
</ul>
</li>
<li>然后，程序读取所有 i 节点并使用 i 节点构建文件中使用的所有块的列表（在读取每个块时在其文件计数器+1）。</li>
<li>检查空闲列表或位图以查找所有未使用的块（为空闲列表中的每个块在其空闲列表计数器+1）</li>
</ul>
<p>文件系统状态</p>
<ul>
<li><p>一致</p>
<ul>
<li>每一块在第一个表计数器中为1，或者在第二个表计数器中为1</li>
</ul>
</li>
<li><p>块丢失</p>
<ul>
<li>将丢失的块添加到空闲列表</li>
</ul>
</li>
<li><p>空闲列表中的重复块</p>
<ul>
<li>磁盘块4在空闲块中出现了两次，重新建立空闲表</li>
</ul>
</li>
<li><p>重复数据块</p>
<ul>
<li>将数据块复制到空闲块</li>
<li><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201050937910.png" alt="image-20220105093707866"></li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201042356795.png" alt="image-20220104235656669"></p>
<ul>
<li><p>检查目录</p>
<ul>
<li>使用一张计数器表，一个文件对应于一个计数器，从根目录开始检验，递归检查每个目录，对每个目录的每个文件，将文件使用计数器加1。完成后，会得到一张由i节点号索引的表，说明每个文件被多少个目录包围。</li>
<li>从根目录开始保留每个文件的计数器列表，递归检查每个目录。 </li>
<li>对于每个文件，增加文件 i-node 的计数器</li>
</ul>
</li>
<li><p>将计算值与存储在每个 i 节点中的链接计数进行比较。</p>
<ul>
<li>i-node 链接计数 &gt; 计算值 = 目录条目数。<ul>
<li>即使删除所有文件，i-node 链接计数 &gt; 0。因此不会删除 i-node。</li>
<li>解决方案：设置 i-node 链接计数 = 计算值</li>
</ul>
</li>
<li>i-node 链接计数 &lt; 计算值<ul>
<li><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201050947699.png" alt="image-20220105094721644"></li>
<li>目录将指向未使用的 i-node</li>
<li>解决方案：设置 inode 链接计数 = 计算值</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3><span id="问题">问题</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201042134901.png" alt="image-20220104213449868" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201042135043.png" alt="image-20220104213504013" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201042241739.png" alt="image-20220104224137623" style="zoom:80%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201050004586.png" alt="image-20220105000410457"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201050004308.png" alt="image-20220105000439203"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201050004033.png" alt="image-20220105000445942"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201050005958.png" alt="image-20220105000541865"></p>
<h3><span id="check-points">Check Points</span></h3><ul>
<li>Please describe the two methods for keeping tracks of free blocks. <ul>
<li>freelist bitmap</li>
</ul>
</li>
<li>Please describe the two strategies for dumping a disk.<ul>
<li>physical logical </li>
</ul>
</li>
<li>Please describe the two types of consistency checks .<ul>
<li>block file</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>课程:操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统L18</title>
    <url>/2022/01/05/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9FL18/</url>
    <content><![CDATA[<h3><span id="file-system-performance">File System Performance</span></h3><h4><span id="高速缓存">高速缓存</span></h4><ul>
<li><p><strong>块高速缓存(block cache)</strong>或<strong>缓冲区高速缓存(buffer cache)</strong>是逻辑上属于磁盘但保留在内存中以提高性能的块的集合。</p>
</li>
<li><p>以前的所有分页置换算法都可用于确定在需要新块且缓存已满时应写入哪个块。</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051012078.png" alt="image-20220105101217034"></p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051003610.png" alt="image-20220105100305562"></p>
<ul>
<li>不希望数据块在高速缓存中放很久之后才写入磁盘<ul>
<li>应定期写出所有数据块（例如，写出全天工作的）。</li>
<li>UNIX-系统调用syn会强制性地将修改的块立即写入磁盘。同步期间，更新每30秒在后台运行一次</li>
<li>MS-DOS-直写缓存=&gt;立即写入所有修改的块。<ul>
<li>写入一个1K的块，一次写入一个字符<ul>
<li>UNIX在高速缓存中保存全部字符，每30秒把该块写回磁盘一次</li>
<li>MS-DOS一次写入1B</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4><span id="块提前读-block-read-ahead">块提前读 Block read ahead</span></h4><ul>
<li>在需要用到块之前，将块放入高速缓存，从而提高命中率；</li>
<li>适用于按顺序读取的文件；</li>
<li>如果文件被随机访问，预读没有帮助；<ul>
<li>它会将磁盘带宽用于读取无用的块，并从缓存中删除可能有用的块；</li>
</ul>
</li>
</ul>
<h4><span id="减少磁盘臂运动">减少磁盘臂运动</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051015493.png" alt="image-20220105101551424"></p>
<p>读取块需要一个访问I-Node和一个用于块的访问。</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051016897.png" alt="image-20220105101623851"></p>
<h4><span id="磁盘碎片整理-defragmenting-disks">磁盘碎片整理 Defragmenting Disks</span></h4><ul>
<li>随着时间的推移，文件被创建和删除，磁盘变得碎片化，到处都是文件和漏洞。</li>
<li>创建新文件时，用于该文件的块可能分布在整个磁盘上，从而导致性能低下。</li>
<li>通过移动文件使其连续，并将所有（或至少大部分）可用空间放在磁盘上一个或多个大的连续区域中，可以恢复性能。</li>
<li>Windows有一个程序，defrag，正是这样做的。Windows用户应该定期运行它，SSD除外。</li>
</ul>
<h3><span id="文件系统实例">文件系统实例</span></h3><h4><span id="ms-dos文件系统">MS-DOS文件系统</span></h4><ul>
<li>许多数码相机和MP3播放器都使用它。</li>
<li>使用固定大小的32字节目录项。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051027923.png" alt="image-20220105102718879"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051027464.png" alt="image-20220105102743420"></p>
<ul>
<li>FAT文件系统总共有FAT-12、FAT-16、FAT-32三个版本，取决于磁盘地址包含有多少进制位<ul>
<li>FAT-32只用到了地址空间中的低28位</li>
<li>$0.5KB \ \cdot \ 2^{12} \ = \ 2MB$</li>
</ul>
</li>
</ul>
<h4><span id="the-unix-v7-file-system">The UNIX V7 File System</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051040441.png" alt="image-20220105104017399"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051040520.png" alt="image-20220105104033451" style="zoom:80%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051040356.png" alt="image-20220105104050298"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051057995.png" alt="image-20220105105730935"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051058588.png" alt="image-20220105105808544"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051100020.png" alt="image-20220105110046970"></p>
<h3><span id="问题">问题</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201050951094.png" alt="image-20220105095100054"></p>
<ul>
<li>每一个磁盘块：1KB</li>
<li>每一个磁盘块号大小：4B</li>
<li>一个磁盘块可索引的磁盘块数量：1KB/4B = $2^8$</li>
<li>使用的是二级间接索引，所以文件最大大小为：$2^8\cdot2^8\cdot1KB \ =2^6MB = 64 MB$</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051004553.png" alt="image-20220105100400519"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051023672.png" alt="image-20220105102306639"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051023278.png" alt="image-20220105102346246"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051100100.png" alt="image-20220105110011064"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051215420.png" alt="image-20220105121528284"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051228626.png" alt="image-20220105122853475"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051240563.png" alt="image-20220105124012512"></p>
<p>经过/读取一个块：27/9 = 3ms</p>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>课程:操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统L19</title>
    <url>/2022/01/05/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9FL19/</url>
    <content><![CDATA[<h3><span id="the-security-environment">The Security Environment</span></h3><h4><span id="threats-威胁">Threats 威胁</span></h4><ul>
<li>目标和威胁：<ul>
<li>Data confidentiality</li>
<li>Data integrity</li>
<li>System availablity</li>
<li>排除外来者：病毒接管系统</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051255970.png" alt="image-20220105125524875"></p>
<h4><span id="intruder-入侵者">Intruder 入侵者</span></h4><ul>
<li><p>入侵者：在他们没有生意的地方打听的人</p>
</li>
<li><blockquote>
<p>常见类别：</p>
</blockquote>
<ul>
<li>非技术用户的随意窥探。</li>
<li>被内部人士窥探。</li>
<li>下定决心要赚钱。</li>
<li>商业或军事间谍活动。</li>
</ul>
</li>
</ul>
<h4><span id="accidental-data-loss-意外数据丢失">Accidental Data Loss 意外数据丢失</span></h4><ul>
<li><p>常见的原因</p>
<ul>
<li><p>自然灾害：</p>
<ul>
<li>火灾，洪水，地震，战争</li>
</ul>
</li>
<li><p>硬件或软件错误：</p>
<ul>
<li>CPU故障，不可读的磁盘或磁带，程序错误。</li>
</ul>
</li>
<li><p>人类错误：</p>
<ul>
<li>数据输入不正确，丢失磁盘。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3><span id="basic-of-cryptography-密码学基础">Basic of Cryptography 密码学基础</span></h3><ul>
<li>编码： $C = E(P,K_E)$<ul>
<li>P：明文</li>
<li>$K_E$：加密密匙</li>
<li>C：秘文</li>
<li>E：加密算法</li>
</ul>
</li>
<li>解码：$P = D(C,K_D)$<ul>
<li>P：明文</li>
<li>$K_D$：解密密匙</li>
<li>C：秘文</li>
<li>D：解密算法</li>
</ul>
</li>
<li>Kerckhoffs的原则：加密算法应该是公开的，保密性应该只存在于密钥中。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051307395.png" alt="image-20220105130757171"></p>
<h4><span id="secret-key-cryptography-私钥加密技术">Secret-Key Cryptography 私钥加密技术</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051308016.png" alt="image-20220105130854803"></p>
<ul>
<li>单字母替换：使用键表将每个字符替换为新字符。</li>
<li>密钥加密也称为对称密钥加密，因为在给定加密密钥的情况下很容易找到解密密钥，反之亦然。</li>
<li>如果密钥足够长，则密钥加密是相对安全的。</li>
</ul>
<h4><span id="public-key-cryptography-公钥加密技术">Public-Key Cryptography 公钥加密技术</span></h4><ul>
<li>所有用户都使用一对加密密钥和解密密钥。加密密钥可以公开，而私有解密密钥可以保密。<ul>
<li>加密密匙和解密密匙是不同的</li>
</ul>
</li>
<li>给定一个精心选择的加密密钥，不可能发现相应的解密密钥。<ul>
<li>步骤1：发送方使用加密密钥对单据进行编码</li>
<li>步骤2：接收方使用解密密钥对文档进行解码。</li>
</ul>
</li>
<li>缺点：需要大量的计算成本。</li>
</ul>
<h5><span id="public-key-encryption-rsa">Public-Key Encryption (RSA)</span></h5><p>RSA：最着名的公钥加密算法</p>
<p>一种方法 单向函数：<img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051314360.png" alt="image-20220105131437224"></p>
<p>一个事实：对计算机来说，将真正大的数字相乘要比将真正大的数字因式分解容易得多。</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051316870.png" alt="image-20220105131641718" style="zoom:80%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051318022.png" alt="image-20220105131803884" style="zoom:80%;"></p>
<h4><span id="digital-signatures-数字签名">Digital Signatures  数字签名</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051407280.png" alt="image-20220105140730222"></p>
<ul>
<li><p>步骤1）发送方公开加密密钥并使用解密密钥对哈希值D进行编码</p>
</li>
<li><p>步骤2）接收器使用解码的加密密钥，并将其与计算的哈希值进行比较。如果值一致，则接受。</p>
</li>
</ul>
<h4><span id="authentication-认证">Authentication 认证</span></h4><ul>
<li>基本规则：<ul>
<li>唯一身份验证</li>
<li>在用户访问系统之前完成</li>
</ul>
</li>
<li>三项原则：<ul>
<li>用户知道的东西 Something the user knows</li>
<li>用户拥有的东西 Something the user has </li>
<li>用户是什么 Something the user is</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051417683.png" alt="image-20220105141710618"></p>
<ul>
<li>存储加密文件<ul>
<li>使用salt来阻止加密密码的预计算</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051427086.png" alt="image-20220105142712046"></p>
<ul>
<li>要检查用户拥有的某些物理对象，<ul>
<li>磁条卡、磁卡、IC卡</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051429540.png" alt="image-20220105142948490"></p>
<ul>
<li>测量用户难以伪造的物理特征。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051430476.png" alt="image-20220105143011447"></p>
<h3><span id="insider-attacks">Insider Attacks</span></h3><h4><span id="logic-bombs">Logic Bombs</span></h4><ul>
<li>逻辑炸弹：公司的程序员可能故意在程序中隐藏bug，<ul>
<li>例如，一种只要程序员输入每日密码就什么也不做的设备，而当程序员突然被炒鱿鱼而第二天又不输入密码时，它就会关机。</li>
</ul>
</li>
</ul>
<h4><span id="trap-door">Trap door</span></h4><p>插入到程序中的一段附加代码，以便绕过一些正常的检查。</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051431729.png" alt="image-20220105143145688"></p>
<h4><span id="login-spoofing">Login Spoofing</span></h4><p>一种通过提供类似但虚假的登录窗口窃取用户登录名和密码的方法</p>
<h3><span id="outsider-attacks">Outsider Attacks</span></h3><h4><span id="buffer-overflow-attacks">Buffer Overflow Attacks</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051433286.png" alt="image-20220105143301201"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051449705.png" alt="image-20220105144952661"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051452174.png" alt="image-20220105145202117"></p>
<h3><span id="问题">问题</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051245760.png" alt="image-20220105124551626" style="zoom:80%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051251367.png" alt="image-20220105125152228"></p>
<p>A：Data confidengially</p>
<p>B：Data integrity</p>
<p>C：System availability</p>
<p>D：System availability</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051414040.png" alt="image-20220105141451010"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051415703.png" alt="image-20220105141507665"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051452827.png" alt="image-20220105145211794"></p>
<p>C、B、A</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051453704.png" alt="image-20220105145349669"></p>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>课程:操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统L2</title>
    <url>/2021/09/28/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9FL2/</url>
    <content><![CDATA[<h3><span id="进程process">进程—Process</span></h3><h4><span id="进程的定义">进程的定义</span></h4><ol>
<li>是一个在运行的程序</li>
<li>是一个容纳运行一个程序所需要的所有信息的容器</li>
</ol>
<h4><span id="进程表process-table">进程表—Process table</span></h4><ul>
<li><p>存储进程的信息</p>
</li>
<li><p>PCB—Process control block</p>
<ul>
<li><p>UID</p>
</li>
<li><p>PID</p>
</li>
<li><p>GID</p>
</li>
</ul>
</li>
</ul>
<h4><span id="进程树process-tree">进程树—Process Tree</span></h4><p>父进程和子进程</p>
<p>IPC：协作(cooperate)和同步(synchronize)进程的通信称为进程间通信（IPC—Inter Process Connect）。</p>
<h4><span id="地址空间address-space">地址空间—Address Space</span></h4><ol>
<li>一个进程不能看到其他进程的地址空间</li>
<li>同样的地址指针在不同的进程里会指向不同的内存</li>
<li>可以动态地改变映射</li>
</ol>
<h4><span id="进程和程序的不同之处">进程和程序的不同之处</span></h4><ol>
<li>进程是动态的，程序是静态的。一个进程有一个确定的生命周期，一个程序是一个指令的集合体</li>
<li>一个程序可以同时对应多个进程，通过多个进程来实现一个进程，但是一个进程只能对应一个程序</li>
<li>除了程序代码外，进程还包含运行程序所需的资源。</li>
</ol>
<h3><span id="文件">文件</span></h3><ol>
<li>文件系统—file system</li>
<li>目录—directory</li>
<li>路径—path name</li>
<li>根目录—root directory：是目录 分级的最高端</li>
<li>工作目录—working directory(PWD)：每一个进程有一个当前的工作目录</li>
</ol>
<h4><span id="文件描述符file-descriptor">文件描述符—File descriptor</span></h4><ul>
<li>一个小的整型数字</li>
<li>在可移动介质中装入文件系统。</li>
</ul>
<h4><span id="保护">保护</span></h4><ul>
<li>操作系统的任务：保证文件对于有权限的使用者是可访问的</li>
</ul>
<h4><span id="shell">Shell</span></h4><ul>
<li>Shell是一个让使用者能够去接入操作系统服务的一个接口</li>
</ul>
<h4><span id="系统调用">系统调用</span></h4><p>是运行中的程序和操作系统间的接口</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202112301905345.png" alt="image-20211230190534281"></p>
<p>比较重要的系统调用</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202112301905747.png" alt="image-20211230190559717"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201012026909.png" alt="image-20220101202602431"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201012026764.png" alt="image-20220101202633547"></p>
<p>windows系统调用的特点</p>
<ol>
<li>程序往往是事件驱动的  event-driven</li>
<li>Unix和windows系统调用几乎是一一对应的，但是名字不同   one-to-one relationship</li>
<li>Windows使用<strong>Win32 API</strong>去取得OS的服务   </li>
<li>Win32 API调用的数量十分巨大，但是不是所有都在内核模式下运行</li>
</ol>
<h4><span id="操作系统结构">操作系统结构</span></h4><ol>
<li><p>单体结构—<strong>Monolithic System</strong></p>
<ul>
<li><p>所有的操作系统的操作被放入一个单独的文件中</p>
</li>
<li><p>操作系统是过程的集合，每一个都可调用其他的</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202112301907299.png" alt="image-20211230190725259"></p>
</li>
</ul>
</li>
<li><p>层次式结构—<strong>Layered System</strong></p>
<ul>
<li>操作系统被组织为进程层的层次结构</li>
<li>The operating system is organized as a hierarchy  of layers of processes</li>
</ul>
</li>
<li><p>微内核—<strong>Microkernels</strong></p>
<ul>
<li>将操作系统分成多个模块，只有一个以内核模式运行，其他的以使用者模式运行</li>
<li>尽可能少地投入到内核模式中，可以提高系统的稳定性</li>
</ul>
</li>
<li><p>客户端-服务器模式—<strong>Client-Server Model</strong></p>
<ul>
<li>包含两类进程：服务器和客户端。</li>
<li>服务器和客户端之间的通信是通过消息传递完成的。</li>
<li>它是一种可用于单个机器或机器网络的抽象</li>
</ul>
</li>
<li><p>虚拟机—Virtual Machine</p>
<ul>
<li>操作系统是提供多道程序设计的分时系统；VM监视器是裸硬件的精确副本，</li>
</ul>
<h3><span id="问题">问题</span></h3><ol>
<li><h4><span id="what-are-the-major-tasks-of-an-os">What are the major tasks of an OS?</span></h4><ol>
<li>通过资源管理，提高系统的使用效率；</li>
<li>改善人机界面，向用户提供友好的工作环境。</li>
</ol>
</li>
<li><h4><span id="what-is-multiprogramming">What is multiprogramming?</span></h4><p>多道程序设计是在计算机内存中同时存放几道相互独立的程序，使它们在管理程序控制之下，相互穿插的运行。</p>
<p>when the system is booted, many processes are running simultaneously, e.g., QQ, WeChat, etc.</p>
</li>
<li><h4><span id="a-computer-has-a-pipeline-with-4-stages-each-stage-takes-the-same-time-to-do-its-work-namely-1-nsec-how-many-instructions-per-second-can-this-machine-execute">A computer has a pipeline with 4 stages. Each stage takes the same time to do its work, namely 1 nsec. How many instructions per second can this machine execute?</span></h4><p>100000000 - 4 + 1</p>
</li>
<li><h4><span id="what-is-the-purpose-of-a-system-call-in-an-os">What is the purpose of a “system call” in an OS?</span></h4><p>使得用户可以使用操作系统提供的有关设备管理、输入/输入<em>系统</em>、文件系统和进程控制、通信以及存储管理 资源等方面的功能</p>
</li>
<li><h4><span id="what-are-monolithic-system-and-microkernel">What are monolithic system and microkernel?</span></h4></li>
<li><h4><span id="what-is-a-process">What is a process?</span></h4><ul>
<li><p>A program in execution</p>
</li>
<li><p>A container that include the information to run a program</p>
</li>
</ul>
</li>
</ol>
</li>
</ol>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201012030462.png" alt="image-20220101203049293"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201012034182.png" alt="image-20220101203158965"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201012056323.png" alt="image-20220101205623174"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201012056757.png" alt="image-20220101205638585"></p>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>课程:操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统L20</title>
    <url>/2022/01/05/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9FL20/</url>
    <content><![CDATA[<h4><span id="malicious-code-malware-恶意代码">Malicious code （Malware） 恶意代码</span></h4><ul>
<li>传统计算机病毒(viruses)的定义：一组可以破坏计算机功能或数据并自我复制的计算机指令或程序，这些指令或程序被编程为或插入到程序中。</li>
<li>计算机病毒的官方定义不包括新的恶意代码。</li>
<li>恶意代码的定义：旨在破坏硬件或软件、窃取用户信息或未经授权干扰用户的软件或代码。</li>
</ul>
<h4><span id="分类">分类</span></h4><ul>
<li>传统计算机病毒 viruses<ul>
<li>感染操作系统引导加载程序</li>
<li>感染可执行文件</li>
<li>感染数据文件</li>
</ul>
</li>
<li>其他恶意代码<ul>
<li>特洛伊木马，蠕虫，流氓软件，后门，移动恶意代码…</li>
</ul>
</li>
</ul>
<h4><span id="virus">Virus</span></h4><ul>
<li>病毒：一种特殊的程序，它可以通过将代码附加到另一个程序上而自我复制。一旦执行，病毒可以对受害者的计算机造成任何损害。<ul>
<li>病毒=可以自我复制的程序</li>
<li>附加到另一个程序</li>
<li>损害赔偿</li>
</ul>
</li>
<li>病毒作者的目的<ul>
<li>迅速蔓延</li>
<li>难以察觉</li>
<li>难以删除</li>
</ul>
</li>
</ul>
<h4><span id="worms">Worms</span></h4><ul>
<li>蠕虫：一种利用系统漏洞进行自我复制的恶意软件。无需附加到其他程序，它可以独立执行。</li>
<li><p>蠕虫会导致网络拥塞。</p>
</li>
<li><p>蠕虫由两个程序组成：</p>
<ul>
<li>引导 the bootstrap</li>
<li>蠕虫本身 the worm proper</li>
</ul>
</li>
<li>蠕虫首先隐藏其存在，然后试图将其引导传播到连接到主机的其他计算机。</li>
</ul>
<h4><span id="trojan-horses">Trojan Horses</span></h4><ul>
<li>通过名为特洛伊木马程序的特定程序控制受害者的计算机。</li>
<li>没有自我复制；没有自愿感染</li>
<li>通过隐藏在人们自愿下载的软件或网页中，闯入受害者的计算机。</li>
<li><p>一旦下载的特洛伊木马程序被执行，mal可以窃取受害者的文件，远程控制受害者的计算机</p>
</li>
<li><p>组成：</p>
<ul>
<li>控制终端程序、特洛伊木马程序和特洛伊木马配置程序</li>
</ul>
</li>
<li>特征：<ul>
<li>隐身性：主要特征；无图标，不显示在软件管理器中等。</li>
<li>自动运行</li>
<li>欺诈：欺骗性的名字，常用的图标</li>
<li>自动恢复</li>
<li>自动打开特定端口</li>
</ul>
</li>
</ul>
<h4><span id="mobile-malicious-code-移动恶意代码">Mobile malicious code 移动恶意代码</span></h4><p>新型病毒以手机为感染目标，以手机网络和计算机网络为平台，利用病毒信息攻击手机，造成异常。</p>
<h4><span id="how-viruses-work-i">How Viruses Work (I)</span></h4><ul>
<li>病毒通常用汇编语言编写，并使用一种称为“滴管”的工具插入程序</li>
<li>一旦安装在受害者的机器上，病毒就处于休眠状态，直到被感染的程序被执行。</li>
<li>一旦启动，它通常首先感染机器上的其他程序，然后执行其有效负载。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051521544.png" alt="image-20220105152135481"></p>
<h4><span id="how-to-spread-the-viruses">How to spread the viruses</span></h4><ul>
<li>将病毒放在经常进行复制操作的地方</li>
<li>复制后<ul>
<li>感染硬盘上的程序</li>
<li>可能会在局域网上传播</li>
</ul>
</li>
<li>作为电子邮件附件播放<ul>
<li>使用电子邮件列表传播病毒</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051522245.png" alt="image-20220105152210168"></p>
<h4><span id="反病毒和抑制反病毒技术">反病毒和抑制反病毒技术</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051527184.png" alt="image-20220105152751092"></p>
<ul>
<li>完整性检查 integrity checking</li>
<li>行为检查 behavioral checking</li>
<li>病毒规避<ul>
<li>提供高度安全性的操作系统</li>
<li>仅安装可靠制造商提供的软件</li>
<li>买一个好的防病毒软件包。</li>
<li>不要单击电子邮件的附件</li>
<li>对关键文件进行频繁备份</li>
</ul>
</li>
<li><p>从病毒攻击中恢复</p>
<ul>
<li>关闭计算机，在安全磁盘上重新启动计算机，然后运行防病毒软件</li>
</ul>
</li>
<li><p>构建一个安全的操作系统是可能的，但并不实用</p>
<ul>
<li>用户不愿意放弃原来的操作系统</li>
<li>用户希望拥有更多的功能，这意味着更复杂</li>
</ul>
</li>
<li>可信系统：正式声明的安全要求并满足这些要求</li>
<li>可信计算基础：由执行所有安全规则所需的硬件和软件组成</li>
</ul>
<h4><span id="covert-channels-隐蔽通道-隐写术">Covert Channels  隐蔽通道   隐写术</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051527982.png" alt="image-20220105152711942"></p>
<p>封装的服务器仍然可以通过隐蔽通道泄漏给协作者。</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051528009.png" alt="image-20220105152815973"></p>
<h3><span id="问题">问题</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051504813.png" alt="image-20220105150422783"></p>
<p>Data integrity</p>
<p>System available</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051505353.png" alt="image-20220105150506328"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051516690.png" alt="image-20220105151619652"></p>
<p>1.检查呼叫信息，不要接听异常号码的呼叫<br>2.小心地从网上下载文件<br>3.拒绝异常消息，尤其是带有链接的消息<br>4.在不必要时关闭无线和蓝牙<br>5.注意安全信息并采取预防措施</p>
<p>提高安全意识，使用保护工具并小心下载文件）<br>网络流量检测<br>更新软件并安装修补程序<br>备份重要文件</p>
<ol>
<li>Check calling information and do not answer calls from abnormal numbers</li>
<li>Download files from the Internet carefully</li>
<li>Reject abnormal messages, especially messages with links</li>
<li>Turn off wireless and Bluetooth when unnecessary</li>
<li>Pay attention to safety information and take precautions</li>
</ol>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051529183.png" alt="image-20220105152907151"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051530282.png" alt="image-20220105153004252"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051535114.png" alt="image-20220105153541073"></p>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>课程:操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统L21</title>
    <url>/2022/01/05/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9FL21/</url>
    <content><![CDATA[<h3><span id="the-layers-in-a-linux-system">The Layers in a Linux System</span></h3><ul>
<li>操作系统控制硬件并为用户程序提供系统调用；</li>
<li>Linux还提供POSIX所需的许多实用程序。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051605304.png" alt="image-20220105160502239"></p>
<h4><span id="linux集成程序">Linux集成程序</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051605715.png" alt="image-20220105160559647"></p>
<h4><span id="linux-kernel-内核">Linux Kernel 内核</span></h4><ul>
<li>内核直接位于硬件上，由以下部分组成：<ul>
<li>I/O设备组件 I/O devices Component</li>
<li>内存管理组件 Memory Management Component</li>
<li>进程管理组件 Processes Management Component</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051607283.png" alt="image-20220105160736197"></p>
<h4><span id="与linux进程相关的概念">与Linux进程相关的概念</span></h4><ul>
<li>守护进程 Daemon：后台运行的一种特殊进程；</li>
<li>父进程 Parent process：分叉进程；</li>
<li>子进程 Child process：fork系统调用创建的新进程；</li>
<li>PID：过程标识符，非零；</li>
<li>过程组 Process group：由其父代、后代、兄弟姐妹、子代和后代组成；</li>
<li>信号 signal：一个进程发送给另一个进程的信息、参数等。</li>
</ul>
<h5><span id="进程实现">进程实现</span></h5><h5><span id="由操作系统维护以实现流程模型的表-每个进程一个条目entry称为进程控制块">由操作系统维护以实现流程模型的表。（每个进程一个条目(entry)，称为进程控制块）</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051611060.png" alt="image-20220105161159018"></p>
<h5><span id="跟进程有关的系统调用">跟进程有关的系统调用</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051614830.png" alt="image-20220105161428742"></p>
<h5><span id="创建进程">创建进程</span></h5><ul>
<li>fork系统调用创建原始进程的精确副本</li>
<li>父进程和子进程中的文件描述符、寄存器和其他所有内容都是相同的</li>
<li>PID用于区分过程。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051616147.png" alt="image-20220105161656114"></p>
<ul>
<li>调用过程会捕获内核并创建一个任务结构和一些其他伴随的数据结构；</li>
<li>然后Linux查找可用的PID，并更新PID哈希表条目以指向新的任务结构；</li>
<li>内存分配给子级的数据和堆栈段，并制作父级段的精确副本；</li>
<li>子进程开始运行。</li>
</ul>
<h5><span id="posix-shell">POSIX Shell</span></h5><p>基于系统调用fork、waitpid和exec的shell实现</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051617341.png" alt="image-20220105161748298"></p>
<h5><span id="ls-commands">ls Commands</span></h5><p>shell通过分叉自身的克隆来创建一个新进程。然后，新的shell调用exec，用可执行文件ls的内容覆盖其内存</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051618407.png" alt="image-20220105161838331" style="zoom:80%;"></p>
<h5><span id="posix-threads">POSIX Threads</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051621589.png" alt="image-20220105162104540"></p>
<h5><span id="thread-scheduling">Thread Scheduling</span></h5><ul>
<li><p>Linux线程是内核线程，因此调度基于线程，而不是进程。</p>
</li>
<li><p>常见的进程/线程调度算法：</p>
<ul>
<li>先到先得</li>
<li>最短工作优先</li>
<li>循环调度</li>
<li><p>优先级调度</p>
</li>
<li><p>…</p>
</li>
</ul>
</li>
</ul>
<h4><span id="scheduling-in-linux-o1-scheduler">Scheduling in Linux: O(1) Scheduler</span></h4><ul>
<li>两种队列：活动队列、过期队列</li>
<li>O（1）时间复杂度：从活动队列中选择优先级最高的任务。如果任务的时间量过期，它将移动到过期列表。</li>
<li>高优先级任务具有更大的时间量。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051623359.png" alt="image-20220105162355319"></p>
<h4><span id="memory-management-in-linux">Memory Management in Linux</span></h4><ul>
<li>虚拟内存（VM）：<ul>
<li>允许多个进程共享物理内存；</li>
<li>允许执行大流程。</li>
</ul>
</li>
<li>提高虚拟机效率的技术：<ul>
<li>TLB，多级页表</li>
</ul>
</li>
</ul>
<h5><span id="multiple-level-page-table">Multiple Level Page Table</span></h5><ul>
<li>每个虚拟地址分为五个字段。每个目录项的值都是指向下一级目录之一的指针。</li>
<li>Linux中的内存管理是基于分页的；进程可以共享文本段。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051632202.png" alt="image-20220105163231136"></p>
<h5><span id="memory-mapped-files">Memory-mapped Files</span></h5><p>Linux中的进程可以通过内存映射文件访问文件数据，以便它们可以同时映射相同的文件。</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051626166.png" alt="image-20220105162623096"></p>
<h5><span id="memory-allocation-mechanism">Memory Allocation Mechanism</span></h5><ul>
<li>分配物理内存的新页帧的主要机制是页分配器。</li>
<li>页面分配器使用众所周知的buddy算法进行操作。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051627476.png" alt="image-20220105162700439"></p>
<h3><span id="问题">问题</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051538948.png" alt="image-20220105153843918"></p>
<p>Unix：1969</p>
<p>Linux：1991</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051609716.png" alt="image-20220105160910692"></p>
<p>A table include the process and all the information that process needs</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051619754.png" alt="image-20220105161924725"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051619851.png" alt="image-20220105161949816"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051624685.png" alt="image-20220105162456656"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051627943.png" alt="image-20220105162708909"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051627935.png" alt="image-20220105162758899"></p>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>课程:操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统L22</title>
    <url>/2022/01/05/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9FL22/</url>
    <content><![CDATA[<h4><span id="page-replacement-mechanism">Page Replacement Mechanism</span></h4><ul>
<li>页面守护进程在开始时初始化；</li>
<li>页面守护进程定期检查页面使用情况（100ms）；如果免费页面数量不足，它将释放更多页面</li>
<li>四种类型的页面：<ul>
<li>unreclaimable 不可恢复：例如，锁定的页面、内核模式堆栈；</li>
<li>swappable 可交换：回收前必须回写</li>
<li>syncable：脏的必须写回</li>
<li>discardable 可丢弃：可立即回收。</li>
</ul>
</li>
</ul>
<h4><span id="page-replacement-algorithm">Page Replacement Algorithm</span></h4><ul>
<li>使用增强的LRU算法，每页维护两个标志：活动/非活动和引用或未引用。</li>
<li>在第一次扫描中，页面的参考位被清除。</li>
<li>如果在第二次扫描期间，页面被引用，则页面将被移动到不太可能回收的状态。否则，页面将移动到更有可能回收的状态。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051632557.png" alt="image-20220105163245528"></p>
<h3><span id="linux-io">Linux I/O</span></h3><ul>
<li>Linux将设备(I/O)集成到文件系统中，称为特殊文件 special files</li>
<li>阻止特殊文件 block special files — 磁盘等。</li>
<li>字符特殊文件 character special files — 键盘、打印机、鼠标等。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051634688.png" alt="image-20220105163420656"></p>
<h5><span id="inputoutput-system-calls-in-linux">Input/Output System Calls in Linux</span></h5><ul>
<li>Linux系统中的每个I/O设备通常都有一个与之关联的特殊文件。</li>
<li>大多数I/O都可以通过使用适当的文件来完成。</li>
<li>某些特殊文件需要特殊的POSIX调用。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051641497.png" alt="image-20220105164151451"></p>
<h5><span id="implementation-of-inputoutput-in-linux">Implementation of Input/Output in Linux</span></h5><ul>
<li>每个特殊文件都与处理相应设备的设备驱动程序相关联。<ul>
<li>主要设备编号——用于识别设备类型</li>
<li>次要设备编号——用于识别相同类型的设备</li>
</ul>
</li>
<li>系统将索引到字符设备的哈希表中以选择适当的结构，然后调用相应的函数来执行工作。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051643561.png" alt="image-20220105164302495"></p>
<h4><span id="the-linux-file-system">The Linux File System</span></h4><ul>
<li>文件可以在目录中分组；目录存储为文件；目录可以包含子目录。</li>
<li>根目录名为/（斜杠），并且/字符也用于分隔目录名。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051642356.png" alt="image-20220105164255318"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051644670.png" alt="image-20220105164448591"></p>
<h5><span id="stat-system-call">Stat  System Call</span></h5><p>对于每个文件，Linux都会记录其文件类型、大小、上次修改时间等，可以使用stat系统调用查看这些文件</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051650532.png" alt="image-20220105165017486"></p>
<h5><span id="some-system-calls-for-directories">Some System Calls  for Directories</span></h5><p>mkdir，rmkdir：创建和销毁目录（目录只有在为空时才能删除）<br>link：创建链接；取消链接：删除链接<br>chdir:更改工作目录<br>opendir、closedir、readdir、rewinddir：用于读取目录</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051650886.png" alt="image-20220105165007826"></p>
<h5><span id="the-linux-ext2-file-system">The Linux Ext2 File System</span></h5><ul>
<li>block 0:包含启动计算机的代码</li>
<li>superblock：包含有关文件系统布局的信息（i节点数、磁盘块数等）</li>
<li>group descriptor：包含有关位图位置、组中空闲块和i节点的数量等信息。</li>
<li>two bitmaps：分别跟踪空闲块和空闲i节点</li>
<li>i-nodes：包含记帐信息以及足够的信息来定位保存文件数据的所有磁盘块</li>
<li>data blocks：存储所有文件和目录的区域</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051828228.png" alt="image-20220105182826185"></p>
<ul>
<li>目录文件允许最多255个字符的文件名。</li>
<li>每个目录都由整数个磁盘块组成，因此可以将目录以原子方式写入磁盘。</li>
<li>文件和目录的条目在目录中按未排序的顺序排列。</li>
<li>条目不能跨越磁盘块。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051654963.png" alt="image-20220105165453900" style="zoom:80%;"></p>
<h5><span id="the-structure-of-i-node">The Structure of I-Node</span></h5><p>i-node放在i-node表中，i-node表是一种内核数据结构，用于保存当前打开的文件和目录的所有i-node。</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051656215.png" alt="image-20220105165624177"></p>
<p>如果一个块大小为1KB，地址长度为4字节，那么一个文件最多可以包含以下i节点索引多大</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051657409.png" alt="image-20220105165702327" style="zoom:67%;"></p>
<p>Ans：<br>16843020KB<br>≈ 16448.3MB<br>≈ 16.1GB</p>
<h4><span id="security-in-linux">Security in Linux</span></h4><ul>
<li>Linux系统的用户社区由一定数量的注册用户组成，每个用户都有一个唯一的UID（用户ID），它是一个介于0和65535之间的整数。</li>
<li>用户可以被组织成多个组，这些组也用称为GID（组ID）的16位整数进行编号。</li>
<li>Linux中的基本安全机制很简单。每个进程都携带其所有者的UID和GID。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051845037.png" alt="image-20220105184547002"></p>
<h4><span id="security-system-calls-in-linux">Security System Calls in Linux</span></h4><ul>
<li>chmod：最常用的一种，用于更改保护模式</li>
<li>access：查看是否允许使用真实UID和GID进行特定访问</li>
<li>getuid、geteuid、getgid、getegid：返回真实有效的uid和gid</li>
<li>chown、setuid、setgid：仅允许超级用户更改文件的所有者，以及更改进程的UID和GID</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051903168.png" alt="image-20220105190338088"></p>
<h3><span id="问题">问题</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051629462.png" alt="image-20220105162913429"></p>
<p>守护进程优先级很低</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051657719.png" alt="image-20220105165733688"></p>
<ul>
<li>block 0</li>
<li>no</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051903620.png" alt="image-20220105190356583"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051904338.png" alt="image-20220105190423300"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051905586.png" alt="image-20220105190513545"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051911701.png" alt="image-20220105191120672"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201052003444.png" alt="image-20220105200320284"></p>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>课程:操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统L3</title>
    <url>/2021/09/13/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9FL3/</url>
    <content><![CDATA[<h2><span id="process">Process</span></h2><h3><span id="multiprogramming">Multiprogramming</span></h3><ul>
<li>CPU快速地在进程和进程间切换，每一个运行几十或几百毫秒</li>
<li>在任何时候，CPU只运行一个进程</li>
<li>when the system is booted, many processes are running simultaneously</li>
</ul>
<h3><span id="process-creation-进程创建">Process Creation 进程创建</span></h3><ul>
<li><p>事件会造成进程创建</p>
<p>1.System initialization</p>
<p>2.Created by a running process.</p>
<p>3.User request to create a new process</p>
<p>4.Initiation of a batch job</p>
</li>
<li><p><strong>Foreground processes</strong>：与用户交互并为其执行工作的流程</p>
</li>
<li><p>Background processes ：处理一些传入请求，称为守护进程 daemons。</p>
</li>
</ul>
<h3><span id="process-termination-进程中止">Process Termination 进程中止</span></h3><ul>
<li><p>造成进程中止地条件</p>
<ul>
<li>正常退出（自愿的）</li>
<li>出错退出（自愿的）</li>
<li>严重错误（非自愿）</li>
<li>被其他进程杀死（非自愿）</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201012113510.png" alt="image-20220101211305389"></p>
</li>
</ul>
<h3><span id="process-state-进程的状态">Process state 进程的状态</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210907110358089.png" alt="image-20210907110358089"></p>
<p>进程从阻塞状态出来后，会进入等待队列的末尾，等待进入运行状态</p>
<h3><span id="process-implement-进程的实现">Process implement 进程的实现</span></h3><ul>
<li><p>进程表—process table</p>
<ul>
<li><p>操作系统为每个进程维护一个进程表，其中包含一个条目（称为进程控制块 (PCB)）。</p>
<ul>
<li>process control block</li>
</ul>
</li>
<li><p>包含了进程状态的重要信息</p>
</li>
</ul>
</li>
<li><p>Context switch 上下文切换</p>
<ul>
<li>从P1切换到P2的时候，进程P1(Running)会保存在进程P1的PCB中，P2(Ready)会从P2的PCB中重新读取到CPU寄存器中</li>
</ul>
</li>
<li>伪并行：进程之间的快速切换产生了真正并行的假象，称为伪并行。<ul>
<li>Pseudo-parallelism</li>
</ul>
</li>
</ul>
<h3><span id="multiprogramming-多道程序设计模型">Multiprogramming 多道程序设计模型</span></h3><ul>
<li>n个进程，p概率等待<script type="math/tex; mode=display">
CPU利用率=1 - p^n</script></li>
</ul>
<h2><span id="thread-线程">Thread 线程</span></h2><ul>
<li><p>执行线程是可由调度程序独立管理的最小编程指令序列，调度程序通常是操作系统的一部分</p>
<ul>
<li>can be managed independently by a scheduler</li>
</ul>
</li>
<li><p>线程和进程的实现在操作系统之间有所不同，但在大多数情况下，线程是进程的一个组件。</p>
<ul>
<li>a thread is a component of a process</li>
</ul>
</li>
<li><p>一个进程中可以存在多个线程，并发执行并共享内存等资源，而不同的进程不共享这些资源。特别是，进程的线程在任何给定时间共享其可执行代码及其变量的值。</p>
<ul>
<li>can exist within one process, executing concurrently and sharing resources</li>
</ul>
</li>
</ul>
<h4><span id="需要线程的原因">需要线程的原因</span></h4><ul>
<li><p>响应能力：可以同时完成多个活动。</p>
</li>
<li><p>资源共享：线程共享进程的内存和资源。</p>
</li>
<li><p>经济性：线程很容易创建和销毁。</p>
</li>
<li><p>MP（多处理器）体系结构的利用：线程在多CPU系统上很有用。</p>
</li>
</ul>
<h4><span id="单线程进程和多线程进程">单线程进程和多线程进程</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210907113626946.png" alt="image-20210907113626946"></p>
<h4><span id="thread-model-线程模型">Thread Model 线程模型</span></h4><p>在一个进程中，一些项目被所有线程共享，一些项目对于每个线程来说是私密的</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210907113856917.png" alt="image-20210907113856917"></p>
<h4><span id="进程和线程的比较">进程和线程的比较</span></h4><ul>
<li>线程<ul>
<li>是轻量级的进程，是CPU利用的基本单位, 一个基本的CPU执行单元</li>
<li>线程包含一个线程ID、一个程序计数器、一组寄存器和一个栈</li>
<li>线程是进程中的一个实体，是被系统独立调度和分派的基本单位</li>
<li>线程自己不拥有系统资源，只拥有一点在运行中必不可少的资源，但它可与同属一个进程的其他线程共享进程所拥有的全部资源。</li>
</ul>
</li>
<li>进程<ul>
<li>传统的进程可控制单线程</li>
<li>如果进程有多线程的控制，可以在同一时间进行多个任务</li>
</ul>
</li>
<li>线程是调度执行的最小单位,进程是资源分配的最小单位(如虚拟内存资源)</li>
<li>Process：used to group resources together;</li>
<li>Thread：the entity scheduled for execution on the CPU</li>
<li>引入进程的目的，是为了使多道程序并发执行，以提高资源利用率和系统吞吐量；</li>
<li>而引入线程，则是为了减小程序在并发执行时所付出的时空开销，提高操作系统的并发性能。</li>
</ul>
<h4><span id="posix-thread">POSIX thread</span></h4><p><strong>POSIX (Portable Operating System Interface)</strong> 是一组基于Unix操作系统的标准操作系统接口</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210907114747281.png" alt="image-20210907114747281"></p>
<h4><span id="在用户空间中实现线程">在用户空间中实现线程</span></h4><ul>
<li><p>优点：</p>
<ul>
<li>快速，灵活的，可扩展</li>
<li>用户级线程包可以在不支持线程的操作系统上实现</li>
<li>允许每个进程有自己定制的调度算法</li>
</ul>
</li>
<li><p>缺点：</p>
<ul>
<li>阻塞进程中的所有线程；</li>
<li>多处理器上没有线程级并行。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210913175142827.png" alt="image-20210913175142827"></p>
</li>
</ul>
<h4><span id="在内核空间中实现线程">在内核空间中实现线程</span></h4><ul>
<li><p>优点：</p>
<ul>
<li>只阻塞进程中的适当线程;</li>
<li>支持多处理器上的线程级并行</li>
</ul>
</li>
<li><p>缺点：</p>
<ul>
<li>线程管理速度慢；</li>
<li>庞大的线程表</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210913175322079.png" alt="image-20210913175322079"></p>
</li>
</ul>
<h4><span id="混合使用">混合使用</span></h4><ul>
<li>在内核线程上多路复用用户级线程。</li>
<li>内核只知道内核级线程，并对其进行调度。</li>
<li>更灵活，但更复杂。</li>
</ul>
<p>System overhead: 系统开销</p>
<p>Cpu utilization: Cpu利用率</p>
<p>System throughput: 系统吞吐量</p>
<h3><span id="check-points">Check points</span></h3><ol>
<li>How many states can a process have?</li>
<li>How to create and terminate a process in Windows?</li>
<li>What is PCB?</li>
<li>What is Context Switch? </li>
<li>What are the differences between process and thread？</li>
</ol>
<h4><span id="solution">Solution</span></h4><ol>
<li><p>there are three states: running, block, ready</p>
</li>
<li><ol>
<li><p>CreateProcess是Windows下用于创建进程的API函数,用来创建一个新的进程和它的<a href="https://baike.baidu.com/item/主线程">主线程</a>，这个新进程运行指定的<a href="https://baike.baidu.com/item/可执行文件">可执行文件</a>。</p>
<p><strong>第一阶段：打开目标映像文件</strong></p>
<p><strong>第二阶段：创建内核中的进程对象</strong></p>
<p><strong>第三阶段：创建初始线程</strong></p>
<p><strong>第四阶段：通知windows子系统进程csrss.exe进程来对新进程进行管理</strong></p>
<p><strong>第五阶段：启动初始线程</strong></p>
<p><strong>第六阶段：用户空间的初始化和Dll连接</strong></p>
</li>
<li><p>TerminateProcess</p>
</li>
</ol>
</li>
<li><p>PCB is process control block, which includes the neccessary information that process needs and the process.</p>
</li>
<li><p>从P1切换到P2的时候，进程P1(Running)会保存在进程P1的PCB中，P2(Ready)会从P2的PCB中重新读取到CPU寄存器中</p>
</li>
<li><ul>
<li>Thread <ul>
<li>is the basic unit of CPU utilization and scheduler execution</li>
<li>is a part of the process, is the light process</li>
<li>can share some resourse of the process with the other threads in the process, but some items are private to each thread</li>
</ul>
</li>
<li>Process<ul>
<li>is the basic unit of resourse ditribution</li>
<li>can control single thread or multi thread</li>
</ul>
</li>
</ul>
</li>
</ol>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201012120389.png" alt="image-20220101212045225"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201012121540.png" alt="image-20220101212103398"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201012235757.png" alt="image-20220101223532721"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201012238186.png" alt="image-20220101223844146"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201012240563.png" alt="image-20220101224055526"></p>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>课程:操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统L5</title>
    <url>/2021/09/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9FL5/</url>
    <content><![CDATA[<h3><span id="process-behavior进程行为">Process Behavior—进程行为</span></h3><ul>
<li><p>几乎所有进程都会交替使用I/O请求进行计算</p>
</li>
<li><h4><span id="cpu-bound计算密集型">CPU-bound：计算密集型</span></h4><ul>
<li>花费大量时间在计算上</li>
</ul>
</li>
<li><h4><span id="io-boundio密集型">IO-bound：I/O密集型</span></h4><ul>
<li>在等待I/O上花费了绝大多数时间</li>
</ul>
</li>
</ul>
<h3><span id="process-scheduling进程调度">Process Scheduling—进程调度</span></h3><h4><span id="scheduler调度程序">Scheduler—调度程序</span></h4><ul>
<li>决定接下来要运行哪一个进程，是操作系统的一部分</li>
</ul>
<h4><span id="scheduling-algorithm调度算法">Scheduling Algorithm—调度算法</span></h4><ul>
<li>调度程序用于做出该决定的策略</li>
<li>为了确保进程不会运行太长时间，使用时钟来引起周期性中断（通常在50-60 Hz左右）；也就是说，大约每20毫秒。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201021406472.png" alt="image-20220102140617438"></p>
<h4><span id="preemptive-scheduling抢占式调度">Preemptive Scheduling—抢占式调度</span></h4><p>允许暂时挂起可运行的进程（<strong>将其变为ready状态</strong>），以便其他进程有机会使用CPU</p>
<h4><span id="什么时候进行调度">什么时候进行调度</span></h4><ul>
<li>当一个新的进程被创建</li>
<li>当一个进程退出</li>
<li>当一个进程阻塞在I/O</li>
<li>在一个I/O中断发生时</li>
</ul>
<h4><span id="scheduling-algorithm-goals">Scheduling Algorithm Goals</span></h4><ol>
<li>Fairness</li>
<li>Efficiency</li>
<li>Response Time</li>
<li>Turnaround Time 周转时间<ul>
<li>从<strong>提交</strong>批处理工作<strong>到完成的平均时间</strong></li>
</ul>
</li>
<li>Throughput 吞吐量<ul>
<li>每小时处理工作的数量</li>
</ul>
</li>
</ol>
<h4><span id="fcfs-scheduling-先来先服务">FCFS Scheduling 先来先服务</span></h4><ul>
<li>First-Come, First Served  </li>
<li>按顺序来</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201021414442.png" alt="image-20220102141459401" style="zoom:67%;"></p>
<h4><span id="sjf-scheduling-最短作业优先">SJF Scheduling 最短作业优先</span></h4><ul>
<li>Shortest-Job-First</li>
<li>与每个进程关联其下一个CPU突发的长度。选取最短的运行</li>
<li>缺点：确定下一个CPU请求的长度上有困难</li>
<li>有两种模式：<ol>
<li>nonpreemptive 非抢占<ul>
<li>一旦CPU给到进程，除非计算完成，否则其他进程不能抢占</li>
</ul>
</li>
<li>preemptive 抢占<ul>
<li>若新进程到达时，且新进程的CPU占用时长小于当前执行进程的剩余时间，则抢占。</li>
<li>这一模式称为SRTF ( Shortest-Remaining-Time-First) 最短剩余时间优先</li>
</ul>
</li>
</ol>
</li>
<li>SJF是最优的–为给定的一组进程提供最小的平均等待时间。</li>
</ul>
<p>非抢占</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201021426062.png" alt="image-20220102142606021" style="zoom:67%;"></p>
<p>抢占</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201021428767.png" alt="image-20220102142841727" style="zoom:67%;"></p>
<h4><span id="rr-scheduling-轮转调度">RR Scheduling 轮转调度</span></h4><ul>
<li>Round Robin</li>
<li>每个进程被分配一个时间段，称为时间片，允许该进程在该时间段中运行</li>
<li>所有进程都在等待队列中，切换后，原来的进程会进入到等待队列的末尾</li>
<li>通常，平均周转率高于SJF，但响应更好。</li>
<li>时间片<ul>
<li>时间片设得太短会导致过多的进程切换，降低了CPU效率</li>
<li>时间片设得太长可能引起对短的交互请求的响应时间变长。</li>
<li>将时间片设为20~50ms是一个比较合理的折中</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201021440856.png" alt="image-20220102144038782" style="zoom:67%;"></p>
<h4><span id="priority-scheduling-优先度调度">Priority Scheduling 优先度调度</span></h4><ul>
<li>给每一个进程一个优先级，允许优先级最高的可运行进程先运行</li>
<li>CPU会分配给优先级最高的进程</li>
<li>SJF就是一种优先级调度，优先级就是预测的下一个CPU突发时间</li>
<li>缺点：<ul>
<li><strong>Starvation</strong>：低优先级的进程永远不会运行</li>
</ul>
</li>
<li>解决：随着时间增加进程的优先级</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201021441375.png" alt="image-20220102144133319" style="zoom:67%;"></p>
<h4><span id="更多的调度">更多的调度</span></h4><ol>
<li><p>Shortest Process Next</p>
<ul>
<li>通过根据过去的行为估计运行时间来在交互式环境中使用</li>
<li>a <em>T0 + (1-a) </em> T1 其中 T0 是前一次估计，T1 是当前运行时间。</li>
</ul>
</li>
<li><p>Guaranteed Scheduling</p>
</li>
<li>Lottery Scheduling</li>
<li>Fair-Share Scheduling</li>
</ol>
<h3><span id="thread-scheduling">Thread Scheduling</span></h3><ul>
<li>进程调度的算法也可以用于在线程调度中。</li>
<li>在实践中，轮流调度和优先级调度是常用的。</li>
<li>用户级线程和内核级线程<ul>
<li>用户级线程和内核级线程的主要区别在于性能。</li>
<li>用户级线程可以采用特定于应用程序的线程调度器</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201021533228.png" alt="image-20220102153329173" style="zoom:67%;"></p>
<h4><span id="问题">问题</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201021402855.png" alt="image-20220102140226810" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201021403667.png" alt="image-20220102140330616" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201021441677.png" alt="image-20220102144106635" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201021442219.png" alt="image-20220102144238178" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201021443704.png" alt="image-20220102144318662" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201021538425.png" alt="image-20220102153854340"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201021541726.png" alt="image-20220102154130680"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201021541730.png" alt="image-20220102154145689"></p>
<h3><span id="check-points">Check points</span></h3><ol>
<li>What is IO-bound process? </li>
<li>When to schedule processes? </li>
<li>What are the goals of Scheduling algorithms? </li>
<li>What is the drawback of the SJF algorithm? </li>
<li>What is RR scheduling</li>
</ol>
<h5><span id="solution">Solution</span></h5><ol>
<li>Cost most time for waiting I/O</li>
<li>4个<ul>
<li>新进程建立</li>
<li>进程删除</li>
<li>进程阻塞在I/O</li>
<li>I/O中断</li>
</ul>
</li>
<li>5个<ul>
<li>Fairness</li>
<li>Effcient</li>
<li>Respond time</li>
<li>Turnaround time</li>
<li>Throughput</li>
</ul>
</li>
<li>可能会造成优先级问题</li>
<li>分发给每一个进程一个固定的时间片，进行不断地切换</li>
</ol>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>课程:操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统L4</title>
    <url>/2021/09/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9FL4/</url>
    <content><![CDATA[<h3><span id="进程间通信inter-process-communication">进程间通信—Inter Process Communication</span></h3><h4><span id="三个问题">三个问题</span></h4><ol>
<li>一个进程如何把信息传递给另一个   pass information among processes</li>
<li>确保两个或者更多的进程在Critical Region中不会出现交叉  get into each other’s way</li>
<li>存在依赖关系时的正确排序（如果该顺序是有关联的话）</li>
</ol>
<p>第一个问题：共享一个地址空间</p>
<h4><span id="竞争条件race-conditions">竞争条件—Race Conditions</span></h4><ul>
<li>两个或多个进程读写某些共享数据，而最后的结果取决于操作的顺序</li>
<li>随着内核数量的增加导致并行性的增加，竞争条件变得越来越普遍。</li>
</ul>
<h4><span id="临界区critical-region">临界区—Critical Region</span></h4><ul>
<li><p>避免竞争条件的关键：禁止超过一个进程同时对共享数据进行读取和写入，即<strong>互斥</strong></p>
</li>
<li><p>临界区：对共享内存进行访问的程序片段</p>
</li>
<li><p>满足4个条件的一个解决方案：</p>
<ol>
<li>任何两个进程不能同时(simultaneously)处于其临界区</li>
<li>不应对CPU的速度和数量做任何假设</li>
<li>临界区外运行的进程不得阻塞其他进程</li>
<li>不得使进程无限期等待进入临界区</li>
</ol>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210915004449802.png" alt="2"></p>
</li>
</ul>
<h4><span id="忙等待的互斥mutual-exclusion-solution">忙等待的互斥—Mutual Exclusion Solution</span></h4><p>mutux：互斥量</p>
<p>实现互斥的几种方案</p>
<ul>
<li><h4><span id="屏蔽中断disabling-interrupts">屏蔽中断—Disabling Interrupts</span></h4><ul>
<li>使每个进程在刚刚进入临界区后立即屏蔽所有中断，并在就要离开之前再打开中断</li>
<li>屏蔽中断后，时钟中断也被屏蔽</li>
<li>CPU只有发生时钟中断或其他中断后才会进行进程切换，屏蔽中断后，CPU将不会被切换到其他进程</li>
<li>缺点<ul>
<li>一个线程可能一直不会打开中断</li>
<li>多处理器系统中，屏蔽了一个CPU，其他CPU仍然能继续运行，可以访问共享内存</li>
</ul>
</li>
</ul>
</li>
<li><h4><span id="锁变量lock-variable">锁变量—Lock Variable</span></h4><ul>
<li>设置一个共享锁变量，其初始值为0</li>
<li>当一个进程想进入其临界区时，首先测试这把锁<ul>
<li>当锁值为0，则该进程将其设置为1并进入临界区</li>
<li>当锁值为1，则进程等待直到其值变为0</li>
</ul>
</li>
<li>疏漏<ul>
<li>一个进程发现锁值为0，恰好将值设置为1之前，另一个进程被调度运行，将锁值变为1，当第一个进程再次运行，同样也将该锁设置为1，此时同时有两个进程进入临界区</li>
</ul>
</li>
</ul>
</li>
<li><h4><span id="严格轮换法strict-alternation">严格轮换法—Strict Alternation</span></h4><ul>
<li>整形变量turn，初始值为0，用于记录哪个进程进入临界区，检查或更新共享内存</li>
<li>开始时，进程0检查turn，发现其值为0，进入临界区</li>
<li>进程1也发现其值为0，在一个等待循环中不断地测试turn，看其值何时变为1</li>
</ul>
<p>连续测试一个变量直到某个值出现为止，称为<strong>忙等待</strong>（busy waiting）</p>
<ul>
<li><p>浪费CPU时间。应避免</p>
</li>
<li><p>用于忙等待的锁，称为<strong>自旋锁</strong>（spin lock）</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210915092743336.png" alt="image-20210915092743336"></p>
<ul>
<li>一个进程比另一个慢了许多的情况下，轮流进入临界区不是一个好办法</li>
</ul>
</li>
<li><h4><span id="peterson解法">Peterson解法</span></h4><ul>
<li>将锁变量与警告变量的思想结合，提出一个不需要严格轮换的软件互斥算法</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210915093158111.png" alt="image-20210915093158111"></p>
</li>
<li><h4><span id="tsl指令">TSL指令</span></h4><ul>
<li><p>需要硬件支持</p>
</li>
<li><p>复制内存中的一个值（flag）到CPU的寄存器中，将这个值设为1</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210915093523473.png" alt="image-20210915093523473"></p>
</li>
</ul>
</li>
<li><h4><span id="mutual-exclusion-with-busy-waiting">Mutual Exclusion with Busy Waiting</span></h4><ul>
<li>Busy-Waiting: 执行代码的进程将处于紧密循环中，占用 CPU 周期，一遍又一遍地测试某些条件，直到它变成真的。</li>
<li>忙等待可能导致优先级倒置问题</li>
</ul>
</li>
</ul>
<h3><span id="睡眠与唤醒">睡眠与唤醒</span></h3><p>优先级反转问题—priority inversion problem,忙等待问题会导致这个问题</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201060917772.png" alt="image-20220106091725614"></p>
<ul>
<li>设置了两个参数：sleep、wakeup<ul>
<li>sleep:一个将引起调用进程阻塞的系统调用，即被挂起</li>
<li>wakeup:有一个参数，指定要被唤醒的进程</li>
</ul>
</li>
</ul>
<h3><span id="producer-consumer-problem">Producer-Consumer Problem</span></h3><p>生产者-消费者问题</p>
<ul>
<li>考虑一个可以容纳N个项目的循环缓冲区。</li>
<li>生产者将项目添加到缓冲区，消费者从缓冲区中删除项目</li>
<li>生产者消费者问题是限制对缓冲区的访问</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211203123208010.png" alt="image-20211203123208010"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211203123552952.png" alt="image-20211203123552952"></p>
<h3><span id="semaphores-信号量">Semaphores 信号量</span></h3><p>首先要知道，信号量有两种</p>
<ul>
<li>一种用于互斥，防止同时访问一些变量<ul>
<li>一般初始化为1，表示只有一个进程可以进入</li>
</ul>
</li>
<li>一种用于同步，用于通知其他的进程。<ul>
<li>一般初始化为0，有人释放，增加1，就可以被其他的进程检测知道</li>
</ul>
</li>
</ul>
<p>举一个简单例子：放水果给孩子吃，有两种水果：苹果和梨子，一次只能放一个</p>
<ul>
<li>放水果这个行为限定了次数，因此用互斥的信号量，防止放多个</li>
<li>孩子吃到水果，则使用同步的信号量，我放了一个苹果，通知他可以吃了</li>
</ul>
<h4><span id="信号量是一种结构包含两个部分">信号量是一种结构，包含两个部分</span></h4><ol>
<li>COUNT，一个用于计数的整数</li>
<li>Q，阻塞的进程的pid的队列</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sem_struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    <span class="built_in">queue</span> Q;</span><br><span class="line">&#125; semaphore;</span><br><span class="line"></span><br><span class="line">semaphore S;</span><br></pre></td></tr></table></figure>
<h4><span id="信号量的操作">信号量的操作</span></h4><ol>
<li>UP</li>
<li>DOWN</li>
</ol>
<p>这些操作必须原子性地执行(即互斥)。</p>
<p>假设P是进行系统调用的进程，操作定义为</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">DOWN(S):</span><br><span class="line">	<span class="keyword">if</span> (S.count &gt; <span class="number">0</span>)</span><br><span class="line">		S.count = S.count - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		block(P); <span class="comment">/*that is,</span></span><br><span class="line"><span class="comment">        (a) enqueue the pid of P in S.Q,</span></span><br><span class="line"><span class="comment">        (b) block process P (remove the pid from the ready queue)</span></span><br><span class="line"><span class="comment">        (c) pass control to the scheduler*/</span></span><br><span class="line"></span><br><span class="line">UP(S):</span><br><span class="line">	<span class="keyword">if</span> (S.Q is nonempty)</span><br><span class="line">		wakeup(P) <span class="comment">/*for some process P in S.Q; that is,</span></span><br><span class="line"><span class="comment">			(a) remove a pid from S.Q (the pid of P),</span></span><br><span class="line"><span class="comment">			(b) put the pid in the ready queue, and</span></span><br><span class="line"><span class="comment">			(c) pass control to the scheduler.*/</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		S.count = S.count + <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>Semaphores do not require busy-waiting, instead  they involve BLOCKING</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">semaphore mutex = <span class="number">1</span>; <span class="comment">// set mutex.count = 1</span></span><br><span class="line">DOWN(mutex);</span><br><span class="line">	- critical section -</span><br><span class="line">UP(mutex);</span><br></pre></td></tr></table></figure>
<h4><span id="mutexes-互斥量">Mutexes 互斥量</span></h4><p>A mutex is a semaphore that can be in one of two  states: unlocked (0) or locked (1)</p>
<ul>
<li>互斥量是一种信号量，有两种状态：unlocked (0) （临界区可用）和 locked (1)</li>
</ul>
<h4><span id="信号量解决生产者消费者问题">信号量解决生产者消费者问题</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201021057014.png" alt></p>
<h4><span id="使用信号量">使用信号量</span></h4><p>进程同步(Synchronization)</p>
<p>同步时的信号量初始化为0，当优先级高的进程执行完毕后，便会释放，即增加1。</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211203131038447.png" alt="image-20211203131038447"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211203131857931.png" alt="image-20211203131857931"></p>
<h3><span id="例题">例题</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204194928754.png" alt="image-20211204194928754"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204194940273.png" alt="image-20211204194940273"></p>
<h3><span id="check-points">Check Points</span></h3><ol>
<li>What is Race Condition? </li>
<li>What is Critical Region?  </li>
<li>What is Busy Waiting? </li>
<li>What is Semaphore? </li>
<li>What is Mutex</li>
</ol>
<h4><span id="solution">Solution</span></h4><ol>
<li>Two or more processes access shared resourse and the final result depend on the order of the process</li>
<li>The program that access the shared resourse</li>
<li><p>The process is running the program over and over again until some condition become true, the CPU is keep running</p>
<ul>
<li>a process executing the entry  code will sit in a tight loop using up CPU cycles,  testing some condition over and over, until it  becomes true</li>
</ul>
</li>
<li><p>A SEMAPHORE, S, is a structure consisting of two  parts: (a) an integer counter, COUNT (b) a queue of pids of blocked processes, Q</p>
</li>
<li>A kind of semaphore that has two status: locked and unlocked</li>
</ol>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201021040857.png" alt="image-20220102104012708"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201021357377.png" alt="image-20220102135743334"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201021358585.png" alt></p>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>课程:操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统L6</title>
    <url>/2021/09/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9FL6/</url>
    <content><![CDATA[<h2><span id="经典ipc问题">经典IPC问题</span></h2><h3><span id="readers-and-writers-problem-读者-写者问题"><strong>Readers and Writers Problem</strong> 读者-写者问题</span></h3><ul>
<li><p>例如，有一个飞机订票系统，有许多竞争的进程试图读写其中的数据</p>
</li>
<li><p>多个进程同时读数据库是可以接受的</p>
</li>
<li><p>但如果一个进程正在更新(写)数据库，则所有其他进程都不能访问数据库，即使读操作也不行</p>
</li>
<li><p>画作图表示：</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210926142208106.png" alt="image-20210926142208106"></p>
</li>
<li><p>Solution:</p>
<ol>
<li><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210926142239033.png" alt="image-20210926142239033"></p>
</li>
<li><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210926142322562.png" alt="image-20210926142322562"></p>
<p><strong>这里的竞争条件是指会同时有多个Reader来修改这个reader变量</strong></p>
</li>
<li><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210926142339744.png" alt="image-20210926142339744"></p>
</li>
</ol>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210926142007073.png" alt="image-20210926142007073"></p>
<p>例题：</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210926142426212.png" alt="image-20210926142426212"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210926142438246.png" alt="image-20210926142438246"></p>
<h3><span id="sleeping-barber-problem">Sleeping Barber Problem</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210926143111362.png" alt="image-20210926143111362"></p>
<ul>
<li>没有顾客，理发师睡觉</li>
<li>第一个顾客会叫醒理发师</li>
<li>后面顾客来了之后，会坐下或者离开</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210926143345858.png" alt="image-20210926143345858"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210926143354507.png" alt="image-20210926143354507"></p>
<h3><span id="dining-philosophers-problem哲学家就餐问题">Dining Philosophers Problem—哲学家就餐问题</span></h3><ul>
<li>五个哲学家围坐在一张圆桌周围，每个哲学家面前都有一盘通心粉，需要两把叉子才能夹住，相邻两个盘子之间放有一把叉子</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210926143700032.png" alt="image-20210926143700032"></p>
<ul>
<li>两个状态：吃饭和思考</li>
<li>饿了时，分两次去取其左边和右边的叉子，每次拿一把，但不分次序</li>
<li>得到两把则可以吃饭，后继续思考</li>
<li><strong>关键问题</strong>：使其不会造成死锁，即不会都在等待拿叉子</li>
</ul>
<h4><span id="错误解法1会造成死锁">错误解法1，会造成死锁：</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210926144256042.png" alt="image-20210926144256042"></p>
<p>同时拿起左叉子，都在等待右叉子，陷入等待中</p>
<h4><span id="错误解法2">错误解法2：</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210926144741831.png" alt="image-20210926144741831"></p>
<p>一个哲学家拿了两把叉子在吃，释放了锁，但是叉子还在使用，当其他哲学家需要这两把叉子中的一把便陷入了等待</p>
<h4><span id="正确解法">正确解法</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210926144944978.png" alt="image-20210926144944978"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210926145145968.png" alt="image-20210926145145968"></p>
<h4><span id="例子">例子</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201021631670.png" alt="image-20220102163140629"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201021634329.png" alt="image-20220102163407280"></p>
<h2><span id="monitor">Monitor</span></h2><ul>
<li>监视器是一组过程、变量和数据结构，一次只能由一个进程访问（出于互斥目的）。</li>
<li>为了允许进程在监视器内等待，必须声明一个条件变量（condition variable）<ul>
<li>条件变量只能与操作wait 和signal 一起使用（用于同步目的）<ul>
<li>x.wait():意味着调用此操作的进程被挂起，直到另一个进程调用</li>
<li>x.signal():x.signal 操作会恢复了一个挂起的进程。 如果没有进程被挂起，则信号操作无效</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>例子：</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210926150738790.png" alt="image-20210926150738790"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210926150746297.png" alt="image-20210926150746297"></p>
<ul>
<li>优点：易于编程</li>
<li>缺点：应用昂贵</li>
</ul>
<h4><span id="monitor和semaphores的对比">Monitor和Semaphores的对比</span></h4><ul>
<li>监视器中条件变量的等待和信号操作类似于计数信号量的 P 和 V 操作。</li>
<li>wait 语句可以阻塞一个进程的执行，而一个signal 语句可以导致另一个进程被解除阻塞。</li>
</ul>
<p>不同之处：</p>
<ol>
<li>当进程执行P操作时，它不一定会阻止该进程，因为计数信号量可能大于零。相反，当执行wait语句时，它总是阻塞进程</li>
<li>当任务对信号量执行V操作时，它要么取消阻止等待该信号量的任务，要么在没有要解锁的任务时增加信号量计数器。另一方面，如果一个进程在没有其他进程取消阻塞时执行signal语句，则对条件变量没有影响</li>
<li>信号量和监视器之间的另一个区别是，被V操作唤醒的用户可以毫不延迟地恢复执行。相反，被signal操作唤醒的用户只有在监视器解锁时才会重新启动</li>
</ol>
<h3><span id="message-passing">Message Passing</span></h3><p>为每个进程分配一个唯一的地址,然后直接向进程发送消息</p>
<p>消息传递通常用于并行编程系统。</p>
<h4><span id="message-passing-api">Message Passing API</span></h4><p>消息传递适用于：</p>
<ul>
<li><p>同一台计算机内的进程。</p>
</li>
<li><p>网络化/分布式系统中的进程</p>
</li>
</ul>
<h4><span id="synchronization-in-message-passing-消息传递中的同步">Synchronization in message passing 消息传递中的同步</span></h4><ul>
<li><p>消息传递可能是堵塞或者不堵塞的</p>
</li>
<li><p>阻塞(Blocking)被认为是同步（<strong>synchronous</strong>）的</p>
<ul>
<li>阻止发送(Blocking send)会阻止发送方，直到收到消息</li>
<li>阻塞接收(Blocking receive)会阻塞接收器，直到消息可用</li>
</ul>
</li>
<li><p>非阻塞(Non-blocking)被认为是异步(asynchronous)的</p>
<ul>
<li>非阻塞发送(non-blocking send)让发送方发送消息并继续</li>
<li>非阻塞接收(non-blocking receive)使接收器接收到有效消息或空</li>
</ul>
</li>
<li>Sender:发出send后不被阻止更自然<ul>
<li>可以向多个目的地发送多条消息。</li>
<li>但发送方通常期望收到消息确认（在接收方失败的情况下）</li>
</ul>
</li>
<li>Receiver: 发出receive后不被阻塞<ul>
<li>接受者通常在继续之前需要这些信息。</li>
<li>但如果发送方进程无法发送，则可能被无限期阻止。</li>
</ul>
</li>
<li>还有一些其他的方法：blocking send, blocking receive</li>
<li>总结，有三种组合<ul>
<li>Blocking send, Blocking receive;</li>
<li>Nonblocking send, Nonblocking receive;</li>
<li>Nonblocking send, Blocking receive – most popular </li>
</ul>
</li>
</ul>
<h3><span id="问题">问题</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201021550365.png" alt="image-20220102155036320" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201021551725.png" alt="image-20220102155118679" style="zoom:67%;"></p>
<h3><span id="check-points">Check points</span></h3><ol>
<li><p>What is Race Condition? </p>
</li>
<li><p>What is Critical Region? </p>
</li>
<li>What is IO-bound process? </li>
<li>What is Turnaround time?  </li>
<li>What is the drawback of the SJF algorithm? </li>
<li>What is the advantage of RR scheduling? </li>
<li>What is condition variable in monitor? </li>
<li>What are the two operations in monitor</li>
</ol>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>课程:操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统L7</title>
    <url>/2021/09/28/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9FL7/</url>
    <content><![CDATA[<h2><span id="死锁deadlock">死锁—deadlock</span></h2><p>定义：当一组进程中的每个进程都在等待只能由该组中的另一个进程释放的资源时，该组进程（例如）处于死锁状态。</p>
<h4><span id="资源resource">资源—Resource</span></h4><ul>
<li>资源是任何可以在一段时间内获得、使用和发布的东西。是需要<strong>排他性使用</strong>的对象。</li>
<li>分类：<ul>
<li>可抢占资源—preemptable resource<ul>
<li>可以从拥有它的进程中抢占而不会产生任何副作用<ul>
<li>例如：存储器</li>
</ul>
</li>
</ul>
</li>
<li>不可抢占资源—nonpreemptable resource<ul>
<li>是指在不引起相关的计算失败的情况下，无法把它从占有它的进程处抢占过来</li>
</ul>
</li>
</ul>
</li>
<li>涉及可抢占资源的潜在死锁通常可以通过将资源从一个进程重新分配到另一个进程来解决</li>
<li>一个资源所需要的事件顺序：<ul>
<li>请求资源—request</li>
<li>使用资源—use</li>
<li>释放资源—release</li>
</ul>
</li>
<li>如果请求被拒绝必须等待<ul>
<li>请求的进程可能被阻塞</li>
<li>可能因为错误代码失败</li>
</ul>
</li>
</ul>
<h4><span id="死锁的条件">死锁的条件</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210928101108156.png" alt="image-20210928101108156"></p>
<h4><span id="死锁建模">死锁建模</span></h4><ul>
<li>用圆形表示进程，用方形表示资源</li>
<li>从资源节点到进程节点的有向边代表该资源已被请求、授权并被进程占用</li>
<li>由进程节点到资源节点的有向边表明当前进程正在请求该资源</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211025203656422.png" alt="image-20211025203656422"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211025203711116.png" alt="image-20211025203711116"></p>
<ul>
<li>基本的判断<ul>
<li>图中没有环，没有死锁</li>
<li>如果有一个循环<ul>
<li>如果一个资源里只有一个实例，那么是死锁</li>
<li>如果一个资源里有多个实例，那么可能没被占用完，可能不是死锁</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211025204620457.png" alt="image-20211025204620457"></p>
<h4><span id="最简单的解决办法鸵鸟算法">最简单的解决办法：鸵鸟算法</span></h4><ul>
<li>忽略死锁</li>
<li>死锁发生的很少</li>
<li>维护的花费很高</li>
</ul>
<h4><span id="死锁检测和死锁恢复">死锁检测和死锁恢复</span></h4><ul>
<li>使用这种技术时，系统并不视图阻止死锁的产生，而是允许死锁发生，当死锁发生后，采取措施进行恢复</li>
</ul>
<h5><span id="每种类型一个资源的死锁检测">每种类型一个资源的死锁检测</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211025205629334.png" alt="image-20211025205629334"></p>
<ul>
<li><p>一个简单的算法</p>
<ul>
<li>对有向图进行检测，并在发现图中有环路存在或确定无环路时结束</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211025210342307.png" alt="image-20211025210342307"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211025210400103.png" alt="image-20211025210400103"></p>
</li>
</ul>
<h5><span id="每种类型多个资源的死锁检测">每种类型多个资源的死锁检测</span></h5><ul>
<li>提供一种基于矩阵的算法来检测从$P_1到P_n$这n个进程中的死锁</li>
<li>m为资源的类型数，$E_i$代表资源类型i</li>
<li>E是现有资源向量，代表每种已存在的资源总数；A是可用资源向量</li>
<li>C代表当前分配矩阵，R代表请求矩阵</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211025210927234.png" alt="image-20211025210927234"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211025211058763.png" alt="image-20211025211058763"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211025211025413.png" alt="image-20211025211025413"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211025211202963.png" alt="image-20211025211202963"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211025211306849.png" alt="image-20211025211306849"></p>
<h5><span id="从死锁中恢复">从死锁中恢复</span></h5><ul>
<li>利用抢占恢复   preemption<ul>
<li>从其他一些进程中获取资源</li>
<li>取决于资源的性质</li>
</ul>
</li>
<li><p>利用回滚恢复   rollback</p>
<ul>
<li>周期性地对进程进行检查点检查<ul>
<li>进程点检查就是将进程的状态写入一个文件以备重启</li>
</ul>
</li>
<li>检查点恢复进程，定期使用此保存状态</li>
<li>如果发现进程陷入僵局，则重新启动进程</li>
</ul>
</li>
<li><p>通过杀死进程恢复</p>
<ul>
<li>杀死一个或若干个进程<ul>
<li>一种方法：杀掉环中的一个进程</li>
<li>另一种方法：选一个环外的进程作为牺牲品来释放该进程的资源</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3><span id="问题">问题</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201021921318.png" alt="image-20220102192102270" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201021922696.png" alt="image-20220102192243652" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201021934327.png" alt="image-20220102193440283" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201022008777.png" alt="image-20220102200812731" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201022009842.png" alt="image-20220102200925801" style="zoom:67%;"></p>
<h4><span id="check-points">Check points</span></h4><ol>
<li>What is deadlock?<ul>
<li>A set of processes is in a deadlock state when  every process in the set is waiting for a resource that can only be  released by another process in the set</li>
</ul>
</li>
<li>What is resource in computer? <ul>
<li>A resource is anything that can be acquired,  used, and released over the course of time.</li>
</ul>
</li>
<li>What are the four conditions for a deadlock to occur? <ul>
<li>mutual</li>
<li>hold and wait</li>
<li>no preemption</li>
<li>circular wait</li>
</ul>
</li>
<li>How to detect deadlock? <ul>
<li>One resource of each type：cycle</li>
<li>Multi resource of each type:</li>
</ul>
</li>
<li>How to recovery from deadlock<ul>
<li>kill one process</li>
<li>preemption</li>
<li>rollback</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>课程:操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统L8</title>
    <url>/2022/01/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9FL8/</url>
    <content><![CDATA[<h2><span id="死锁避免">死锁避免</span></h2><h4><span id="动机">动机</span></h4><ul>
<li>在大多数系统中，一次请求一个资源。 希望系统可以决定授予资源是否安全</li>
<li>有没有一种算法可以做出正确的决定？<ul>
<li>我们可以避免死锁，但前提是可以提前获得某些信息</li>
</ul>
</li>
</ul>
<h4><span id="resource-trajectories-资源轨迹图">Resource Trajectories 资源轨迹图</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201022124164.png" alt="image-20220102212433111"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201022124322.png" alt="image-20220102212457228"></p>
<ul>
<li>进入I1、I2、I5、I6包围的矩形时，系统一定会向着造成死锁的矩形区域移动，从而造成死锁</li>
</ul>
<h4><span id="safe-and-unsafe-states-安全状态和不安全状态">Safe and Unsafe States 安全状态和不安全状态</span></h4><h5><span id="安全状态">安全状态</span></h5><p>定义</p>
<ul>
<li>如果存在某种调度顺序，即使所有进程突然请求最大数量的资源，每个进程都可以运行完成，（没有死锁发生），则状态是安全的</li>
</ul>
<p>a可以通过资源分配逐步完成所有进程，说明他是安全的</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201022130549.png" alt="image-20220102213054506"></p>
<p>b是不安全的，他不可以完成A和C</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201022131721.png" alt="image-20220102213138681"></p>
<p>安全状态和不安全状态的区别</p>
<ul>
<li>从安全状态，系统可以保证所有进程都将完成； </li>
<li>但是从不安全的状态，就不能给出这样的保证。</li>
</ul>
<h4><span id="单个资源的银行家问题">单个资源的银行家问题</span></h4><ul>
<li><p>银行家：操作系统</p>
</li>
<li><p>客户：进程</p>
</li>
<li><p>贷款项目：资源</p>
</li>
</ul>
<p>银行家向一群客户分别承诺了一定的贷款项目</p>
<p>判断对请求的满足是否会导致进入不安全状态</p>
<ul>
<li>如果是，就拒绝</li>
<li>如果不是，则分配</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201022141577.png" alt="image-20220102214145528"></p>
<p>a、b是安全的，b可以将空闲资源分配给C，从而获取其他进程所需要的资源</p>
<p>c是不安全的，此时没办法满足任何一个进程</p>
<h4><span id="多个资源的银行家系统">多个资源的银行家系统</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201022146024.png" alt="image-20220102214559967"></p>
<h5><span id="总结">总结</span></h5><p>银行家算法就是对每一个请求进行检查，检查满足后是否会进入不安全状态。</p>
<h4><span id="starvation">Starvation</span></h4><p>定义：一个进程永远被剥夺必要的资源来处理它的工作</p>
<p>即永远执行不了</p>
<h4><span id="starvation-vs-deadlock">Starvation vs Deadlock</span></h4><ul>
<li>Starvation：线程无限期等待<ul>
<li>可能结束，但没有外部干预，僵局无法结束</li>
</ul>
</li>
<li>Deadlock：循环等待资源。<ul>
<li>是Starvation，反之不成立</li>
<li>死锁并不总是确定性的</li>
</ul>
</li>
</ul>
<h4><span id="deadlock-detection-deadlock-avoidance-and-deadlock-prevention的比较">Deadlock Detection, Deadlock  Avoidance, and Deadlock Prevention的比较</span></h4><ul>
<li>Deadlock Detection: 确定是否有死锁</li>
<li><p>Deadlock Avoidance: 确定系统是否会进入不安全状态</p>
</li>
<li><p>Deadlock Prevention:确保至少一个死锁的必要条件永远不能成立</p>
</li>
</ul>
<h4><span id="deadlock-prevention-死锁预防">Deadlock Prevention 死锁预防</span></h4><p>确保至少一个死锁的必要条件永远不能成立</p>
<h5><span id="破坏互斥条件-attacking-the-mutual-exclusion-condition">破坏互斥条件  Attacking the Mutual Exclusion Condition</span></h5><p>如果资源不被一个进程所独占，那么死锁肯定不会产生。</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201022302891.png" alt="image-20220102230213846"></p>
<h5><span id="破坏占有并等待条件-attacking-the-hold-and-wait-condition">破坏占有并等待条件 Attacking the Hold and Wait Condition</span></h5><ul>
<li>要求进程在启动前请求所需要的所有资源<ul>
<li>问题：很难在运行开始知道需要多少资源</li>
</ul>
</li>
</ul>
<h5><span id="破坏不可抢占条件-attacking-the-no-preemption-condition">破坏不可抢占条件 Attacking the No Preemption Condition</span></h5><ul>
<li>如果一个进程持有一些资源并请求另一个无法分配给它的资源，那么所有资源都会被释放。<ul>
<li>问题：该方法可以应用于状态可以在以后保存和恢复的资源，例如内存。 不能应用于打印机等资源</li>
</ul>
</li>
</ul>
<h5><span id="破坏环路等待条件-attacking-the-circular-wait-condition">破坏环路等待条件 Attacking the Circular Wait Condition</span></h5><p>方法一：一个进程在任何时候都只能使用一个资源。</p>
<p>方法二：强加所有资源类型的总排序，并要求每个进程以枚举递增的顺序请求资源。</p>
<h4><span id="其他问题">其他问题</span></h4><h5><span id="两阶段加锁-two-phase-locking">两阶段加锁 two-phase locking</span></h5><p>第一阶段：</p>
<ul>
<li><p>进程试图对所有所需的记录进行加锁，一次锁一个记录</p>
<ul>
<li>如果发现需要的记录被锁了，重新启动</li>
</ul>
</li>
<li><p>加锁成功则开始第二阶段</p>
</li>
</ul>
<p>第二阶段：</p>
<ul>
<li>完成更新</li>
<li>释放锁</li>
</ul>
<h5><span id="非资源死锁-non-resource-deadlocks">非资源死锁  Non-resource Deadlocks</span></h5><ul>
<li><p>Communication Deadlock</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201022318627.png" alt="image-20220102231829592"></p>
</li>
<li><p>可能在信号量中发生</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201022319413.png" alt="image-20220102231901378"></p>
<h3><span id="问题">问题</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201022102932.png" alt="image-20220102210242886" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201022132956.png" alt="image-20220102213238917" style="zoom:67%;"></p>
<p>（1）D asks for one more unit：safe state</p>
<p>（2）C asks for one more unit：unsafe state</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201022134524.png" alt="image-20220102213441483" style="zoom:67%;"></p>
<ul>
<li>安全状态一定不会发生死锁</li>
<li>不安全状态可能是资源数不够满足所有进程造成的，不一定是死锁这种状态</li>
<li>死锁一定是不安全状态</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201022239301.png" alt="image-20220102223910252" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201022241563.png" alt="image-20220102224105514" style="zoom:67%;"></p>
<ul>
<li>死锁检测是看当前拥有的资源和请求的资源</li>
<li>死锁避免是看当前拥有的资源和进程所需要的最多资源</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201022320028.png" alt="image-20220102232053991"></p>
<p>a =  1， b = 2</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201022353051.png" alt="image-20220102235314015"></p>
<p>p*(m - 1) &lt; r </p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201022354318.png" alt="image-20220102235459279"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201022355295.png" alt="image-20220102235509235"></p>
<p>​</p>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>课程:操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统L9</title>
    <url>/2021/09/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9FL9/</url>
    <content><![CDATA[<h2><span id="memory-management-内存管理">Memory Management 内存管理</span></h2><p>理想情况下，程序员需要内存  </p>
<ul>
<li>大</li>
<li>快</li>
<li>非易失性</li>
</ul>
<p>Memory hierarchy 内存层次结构</p>
<ul>
<li>少量快速、昂贵的内存 – 缓存 (cache)</li>
<li>一些中速、中等价格的主内存 (main memory)</li>
<li>千兆字节的慢速、廉价磁盘存储 (disk storage)</li>
</ul>
<h3><span id="基本的内存管理只有操作系统和一个用户进程">基本的内存管理：只有操作系统和一个用户进程</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210930101706060.png" alt="image-20210930101706060"></p>
<p>第一种方案：操作系统位于RAM的底部，以前被用在大型机和小型计算机</p>
<p>第二种方案：用于一些掌上电脑和嵌入式系统中</p>
<p>第三种方案：用于早期的个人计算机中，在ROM中的系统部分称为BIOS</p>
<p>第一种和第三种方案的缺点是用户程序出现的错误可能摧毁操作系统</p>
<h4><span id="不使用存储器抽象的情况下运行多个程序重定位问题">不使用存储器抽象的情况下运行多个程序：重定位问题</span></h4><p>每个内存块有一个用于标记的4位的保护键，会进行识别，然而会有重定位问题，对于内存地址不正确访问</p>
<h4><span id><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211006190901818.png" alt="image-20211006190901818"></span></h4><ul>
<li>使用绝对物理地址，造成两个程序同时运行时冲突</li>
<li>可以使用静态重定位技术，给所有的可执行程序提供额外的信息来区别那些内存字中存有可重定位的地址</li>
</ul>
<h3><span id="地址空间">地址空间</span></h3><p>物理地址暴露给进程带来的问题：</p>
<ul>
<li>如果用户程序可以寻址内存的每个字节，他们就可以很容易的破坏操作系统，从而使系统慢慢地停止运行。除非使用特殊硬件进行保护，如IBM360的锁键模式</li>
<li>使用这种模型，想要同时运行多个程序比较困难</li>
</ul>
<h5><span id="概念">概念</span></h5><ul>
<li>解决问题的关键：保护和重定位</li>
<li>地址空间—新的存储器抽象<ul>
<li>是一个进程可用于寻址内存的一套地址集合</li>
<li>每个进程都有自己的一个地址空间，并且这个地址空间独立于其他进程的地址空间</li>
</ul>
</li>
</ul>
<h5><span id="基址寄存器和界限寄存器">基址寄存器和界限寄存器</span></h5><ul>
<li>使用了<strong>动态重定位</strong>，简单地把每个进程的地址空间映射到物理内存的不同部分</li>
<li>给每个CPU配置两个特殊硬件寄存器，基址寄存器和界限寄存器</li>
<li>使用这两个寄存器时，程序装载到内存中连续的空闲位置且装载期间无须重定位</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211007085003861.png" alt="image-20211007085003861" style="zoom:67%;"></p>
<ul>
<li><p>定位时，会将进程的地址值加上基址寄存器中的值，同时也会检查程序提供的地址是否大于等于界限寄存器里的值。</p>
</li>
<li><p>缺点：每次访问内存都需要进行加法和比较运算</p>
</li>
</ul>
<h3><span id="multiprogramming-with-fixed-partitions-固定分区的多道程序设计">Multiprogramming with Fixed Partitions 固定分区的多道程序设计</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201031421658.png" alt="image-20220103142158619"></p>
<ul>
<li>每个分区有单独的输入队列</li>
<li>单个输入队列 </li>
<li>由于分区大小是固定的，因此特定作业未使用的任何空间都会丢失。 </li>
<li>要说明特定作业需要多大的分区可能并不容易。</li>
</ul>
<h3><span id="swapping-amp-virtual-memory-交换和虚拟内存">Swapping &amp; Virtual Memory 交换和虚拟内存</span></h3><ul>
<li>是克服内存限制的两种方法<ul>
<li><strong>交换</strong>将进程在内存和磁盘上来回放置。</li>
<li><strong>虚拟内存</strong>允许程序运行，即使它们只是部分在主内存中</li>
</ul>
</li>
</ul>
<h4><span id="swapping">Swapping</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201031426686.png" alt="image-20220103142626621"></p>
<ul>
<li>交换在内存中产生了多个空闲区—称为空洞(hole)，这时候可以使用内存紧缩</li>
</ul>
<h5><span id="内存紧缩-memory-compaction">内存紧缩 memory compaction</span></h5><ul>
<li>通过把所有的进程尽可能向下移动，有可能将这些小的空闲区合成一大块</li>
<li>会耗费大量的CPU时间</li>
</ul>
<h4><span id="空闲内存管理">空闲内存管理</span></h4><p>有两种方法跟踪内存使用情况：位图和空闲区链表  </p>
<h5><span id="memory-management-with-bit-maps-amp-list-使用位图的存储管理">Memory Management with Bit Maps &amp; List 使用位图的存储管理</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201031507961.png" alt="image-20220103150749885"></p>
<ul>
<li>0表示空闲，1表示占用（或者相反）</li>
<li>缺点：在映射中查找连续的 0 位是耗时的</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201031509087.png" alt="image-20220103150917050"></p>
<h5><span id="memory-management-with-linked-lists-使用链表的存储管理">Memory Management with Linked Lists 使用链表的存储管理</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201031510930.png" alt="image-20220103151015886"></p>
<ul>
<li>链表中的每一个结点都包含以下域<ul>
<li>空闲区(H)或进程(P)的指示标志</li>
<li>起始地址</li>
<li>长度</li>
<li>指向下一结点的指针</li>
</ul>
</li>
<li>四种内存管理的算法<ul>
<li>First fit 首次适配：从头开始搜索适合的空洞。</li>
<li>Next fit 下次适配：从上次停止的地方搜索适合的空洞。 </li>
<li>Best fit 最佳适配：搜索整个列表并取适合的最小空洞。</li>
<li>Worst fit 最差适配：搜索适合的最大空洞。</li>
</ul>
</li>
<li>还有一种叫快速适配(quick fit)的算法，维护一个存储空闲区信息的链表</li>
</ul>
<h4><span id="virtual-memory">Virtual Memory</span></h4><ul>
<li>问题：程序太大，放不进内存中去</li>
<li><p>解决：虚拟内存 — 操作系统将当前正在使用的程序部分保留在内存中</p>
<ul>
<li>OS keeps the part of the program   currently in use in memory</li>
</ul>
</li>
<li><p><strong>Paging</strong> 分页是一种用于实现虚拟内存的技术。 </p>
</li>
<li><strong>Virtual Address</strong> 虚拟地址是程序生成的地址。 </li>
<li><strong>MMU</strong> (memory management unit)（内存管理单元）将虚拟地址转换为物理地址。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201031521320.png" alt="image-20220103152147230" style="zoom:80%;"></p>
<ul>
<li><p>虚拟地址空间(<strong>virtual address space</strong>)按照固定大小分为(虚拟)<strong>页面(pages)</strong>，物理内存中对应的为<strong>页框(page frames)</strong>，页面和页框大小通常是一样的</p>
</li>
<li><p>一个在/不在位跟踪页面是否被映射。</p>
</li>
<li><p>对未映射页面的引用会导致 CPU 陷入操作系统。</p>
</li>
<li><p>这个陷阱被称为页面错误<strong>(page fault)</strong>。 MMU 选择一个很少使用的页框，将其内容写入磁盘，获取刚刚引用的页面放到刚才回收的页框中，修改映射关系，并重新启动被捕获的指令</p>
</li>
</ul>
<h5><span id="pure-paging">Pure paging</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201031538574.png" alt="image-20220103153828541"></p>
<h5><span id="page-table-页表">Page Table 页表</span></h5><ul>
<li>给出的虚拟地址和物理内存地址的关系</li>
<li>用页号作为索引，以得出对应于该虚拟页面的页框号。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201031534254.png" alt="image-20220103153434191"></p>
<ul>
<li>“在/不在”位为0，则将引起一个操作系统陷阱</li>
</ul>
<p>两个主要问题： </p>
<ul>
<li>虚拟地址空间很大的话，页表也会非常大（例如大多数计算机使用）32 位地址，4k 页大小，12 位偏移<ul>
<li>20 位虚拟页号</li>
<li>100 万个条目</li>
</ul>
</li>
<li>映射必须很快，因为它是在每次内存访问时完成的</li>
</ul>
<h4><span id="针对大内存的页表">针对大内存的页表</span></h4><h5><span id="multilevel-page-tables-多级页表">Multilevel Page Tables 多级页表</span></h5><ul>
<li>减少表大小。 </li>
<li>另外，不要将不需要的页表保留在内存中</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201051927762.png" alt="image-20220103155251097"></p>
<ul>
<li>32位的虚拟地址被划分为<ul>
<li>10位的PT1域</li>
<li>10位的PT2域</li>
<li>12位的Offset(偏移量)域</li>
</ul>
</li>
<li>偏移量是12位，所以页面大小为4KB，共有$2^{20}$个页面</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201031622846.png" alt="image-20220103162238809"></p>
<ul>
<li>由索引顶级页表得到的表项中含有二级页表的地址或页框号。</li>
<li>顶级页表的表项0指向程序正文的页表，表项1指向数据的页表，表项1023指向堆栈的页表，其他的表项未用</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201031623581.png" alt="image-20220103162358544"></p>
<ul>
<li>示例<ul>
<li>32位虚拟地址：0x00403004（十进制为4206596）位于数据部分12292字节处</li>
<li>它的虚拟地址对应PT1 = 1, PT2 = 3, Offset = 4</li>
<li>首先用PT1作为索引访问顶级页表得到表项1<ul>
<li>对应地址范围为4M到8M-1</li>
</ul>
</li>
<li>然后用PT2作为索引访问刚刚找到的二级页表并得到表项3<ul>
<li>在他的4M块中的12288~16383</li>
</ul>
</li>
<li>如果该页面在内存中，从二级页表中得到的页框号与偏移量结合形成物理地址</li>
</ul>
</li>
</ul>
<h5><span id="inverted-page-table-倒排页表">Inverted page table 倒排页表</span></h5><ul>
<li>在这种设计中，实际内存中的每个页框对应一个表项，而不是每个虚拟页面对应一个表项</li>
<li><p>原因：一个进程对应一个页表，每一个页表中会包含大量的entries</p>
</li>
<li><p>使用倒排页表，一个entry能够对应一个内存中的页框</p>
<ul>
<li><p>表项中记录了哪一个（进程、虚拟页面）对定位于该页框</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201031852001.png" alt="image-20220103185208970"></p>
</li>
<li><p>表项： <process-id, page-number></process-id,></p>
</li>
<li><p>然后在反转页表中搜索匹配项。 如果找到匹配项 i，则生成物理地址 <i, offset>。 </i,></p>
</li>
<li>否则，已尝试非法地址访问</li>
</ul>
</li>
<li><p>虽然减少了存储每个页表所需的内存，但增加了发生页引用时查找表所需的时间</p>
</li>
<li><p>不足：从虚拟地址到物理地址的转换会变得很困难</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201031857497.png" alt="image-20220103185730459"></p>
<p>Page Tables</p>
<ul>
<li>大多数操作系统为每个进程分配一个页表。 </li>
<li>由一组硬件寄存器组成的单页表。 加载进程时，寄存器加载页表。 <ul>
<li>优点 - 简单 </li>
<li>缺点 - 如果表很大并且在每次上下文切换时加载完整页表会损害性能，则代价高昂。 </li>
</ul>
</li>
<li>将页表留在内存中——单个寄存器指向表<ul>
<li>优点 - 上下文切换便宜</li>
<li>缺点 - 一个或多个内存引用来读取表条目</li>
</ul>
</li>
</ul>
<p>页表结构</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201031630556.png" alt="image-20220103163020517"></p>
<ul>
<li>Page frame number 页框号：对应页框号</li>
<li>Present/absent bit 在/不在位：1/0对应有效/无效条目</li>
<li>Protection bit 保护位：允许什么类型的访问，使用三位，读、写、执行。</li>
<li>Modified 修改位：在修改和写入磁盘时设置，记录</li>
<li>Referenced 访问位： 页面被引用时设置（帮助决定要驱逐的页面），记录</li>
<li>Caching disabled 高速缓存禁止位：用于将逻辑上属于磁盘的数据保留在内存中以提高性能</li>
</ul>
<h4><span id="加速分页过程">加速分页过程</span></h4><h5><span id="tlb">TLB</span></h5><ul>
<li>观察：大多数程序对少量页面进行大量引用</li>
<li>为计算机配备一个小型硬件设备，称为转换检测缓冲区(Translation Look-aside Buffer，TLB)或关联内存，无需使用页表即可将虚拟地址映射到物理地址。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201031832286.png" alt="image-20220103183240240" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201031837365.png" alt="image-20220103183741328"></p>
<h3><span id="问题">问题</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201031300230.png" alt="image-20220103130054066" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201031541149.png" alt="image-20220103154159113" style="zoom:67%;"></p>
<p>虚拟地址空间总共大小为：$16 * 2048 = 2^{15}B=32KB$，所以需要至少15位来标记</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201031638130.png" alt="image-20220103163839090" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201031840947.png" alt="image-20220103184026900"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201031840639.png" alt="image-20220103184059601"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201031859077.png" alt="image-20220103185948040" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201031901893.png" alt="image-20220103190114854" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201031901668.png" alt="image-20220103190152626"></p>
<h3><span id="check-points">Check Points</span></h3><ol>
<li>What is the drawback of the bitmap method for free  memory management?</li>
<li>What is the purpose of virtual memory?</li>
<li>What is page table? </li>
<li>What is the purpose of using multi-level page table?</li>
<li>What is the purpose of using TLB？ </li>
<li>What is invert page table？</li>
</ol>
<h4><span id="solution">Solution</span></h4><ol>
<li>to find consecutive 0 bits in the  map is time-consuming.</li>
<li>在一定程度上缓解内存不足的压力</li>
<li>The relation between  virtual addresses and  physical memory  addresses given  by page table</li>
<li>reduce the table size. Also,  don’t keep page tables in memory that are not needed.</li>
</ol>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201031914146.png" alt="image-20220103191442113"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202201031911837.png" alt="image-20220103191127800"></p>
<ol>
<li>加快分页过程</li>
<li>There is one entry for each real page (frame) of  memory.</li>
</ol>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>课程:操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>数据分析L1</title>
    <url>/2021/11/02/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90L1/</url>
    <content><![CDATA[<h3><span id="数据分析的三个重要组成部分">数据分析的三个重要组成部分</span></h3><ol>
<li><strong>数据采集</strong></li>
<li><strong>数据挖掘</strong></li>
<li><strong>数据可视化</strong></li>
</ol>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211102224516790.png" alt="image-20211102224516790"></p>
<h4><span id="数据采集">数据采集</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211102224618637.png" alt="image-20211102224618637"></p>
<h4><span id="数据挖掘">数据挖掘</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211102224637553.png" alt="image-20211102224637553"></p>
<h4><span id="数据可视化">数据可视化</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211102224657459.png" alt="image-20211102224657459"></p>
<h3><span id="数据挖掘">数据挖掘</span></h3><h4><span id="基本流程">基本流程</span></h4><ol>
<li><strong>商业理解</strong>：从商业的角度理解项目需求，在这个基础上，再对数据挖掘的目标进行定义。</li>
<li><strong>数据理解</strong>：尝试收集部分数据，然后对数据进行探索，包括数据描述、数据质量验证等。对收集的数据有个初步的认知。</li>
<li><strong>数据准备</strong>：开始收集数据，并对数据进行清洗、数据集成等操作，完成数据挖掘前的准备工作。</li>
<li><strong>模型建立</strong>：选择和应用各种数据挖掘模型，并进行优化，以便得到更好的分类结果。</li>
<li><strong>模型评估</strong>：对模型进行评价，并检查构建模型的每个步骤，确认模型是否实现了预定的商业目标。</li>
<li><strong>上线发布</strong>：呈现的形式可以是一份报告，也可以是实现一个比较复杂的、可重复的数据挖掘过程</li>
</ol>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211102225026446.png" alt="image-20211102225026446"></p>
<h3><span id="numpy">Numpy</span></h3><h4><span id="为什么要使用numpy的数据结构而不是用python自带的list">为什么要使用numpy的数据结构，而不是用Python自带的list</span></h4><ul>
<li>list的元素在系统内存中是分散存储的，Numpy数组存储在一个均匀连续的内存块中，遍历可以节省计算资源</li>
<li>内存访问模式中，数据连续的存储在内存中，Numpy直接利用现在CPU的矢量化指令计算，加载寄存器中的多个连续浮点数</li>
<li>Numpy的矩阵计算可以采用多线程的方式，提升计算效率</li>
</ul>
<h4><span id="一个重要提升内存和计算资源的利用率的规则">一个重要提升内存和计算资源的利用率的规则</span></h4><ul>
<li>避免采用隐式拷贝，而是采用就地操作的方式</li>
</ul>
<h4><span id="自己创造类型">自己创造类型</span></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">persontype = np.dtype(&#123;</span><br><span class="line">    <span class="string">&#x27;names&#x27;</span>:[<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;chinese&#x27;</span>, <span class="string">&#x27;math&#x27;</span>, <span class="string">&#x27;english&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;formats&#x27;</span>:[<span class="string">&#x27;S32&#x27;</span>,<span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;f&#x27;</span>]&#125;)</span><br><span class="line">peoples = np.array([(<span class="string">&quot;ZhangFei&quot;</span>,<span class="number">32</span>,<span class="number">75</span>,<span class="number">100</span>, <span class="number">90</span>),(<span class="string">&quot;GuanYu&quot;</span>,<span class="number">24</span>,<span class="number">85</span>,<span class="number">96</span>,<span class="number">88.5</span>),</span><br><span class="line">       (<span class="string">&quot;ZhaoYun&quot;</span>,<span class="number">28</span>,<span class="number">85</span>,<span class="number">92</span>,<span class="number">96.5</span>),(<span class="string">&quot;HuangZhong&quot;</span>,<span class="number">29</span>,<span class="number">65</span>,<span class="number">85</span>,<span class="number">100</span>)],</span><br><span class="line">    dtype=persontype)</span><br></pre></td></tr></table></figure>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211103090630915.png" alt="image-20211103090630915"></p>
<h3><span id="pandas">Pandas</span></h3><h4><span id="series和dataframe">Series和DataFrame</span></h4><ul>
<li>分别代表着一维的序列和二维的表结构</li>
</ul>
<h5><span id="series">Series</span></h5><ul>
<li><strong>Series 是个定长的字典序列</strong>。说是定长是因为在存储的时候，相当于两个 ndarray</li>
<li><strong>Series</strong>有两个基本属性：index 和 values。<ul>
<li>在 Series 结构中，index 默认是 0,1,2,……递增的整数序列，当然我们也可以自己来指定索引</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series, DataFrame</span><br><span class="line">x1 = Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">x2 = Series(data=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>, <span class="string">&#x27;d&#x27;</span>:<span class="number">4</span>&#125;</span><br><span class="line">x3 = Series(d)</span><br></pre></td></tr></table></figure>
<h5><span id="dataframe">DataFrame</span></h5><ul>
<li>包括了行索引和列索引，我们可以将 DataFrame 看成是由相同索引的 Series 组成的字典类型。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series, DataFrame</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&#x27;Chinese&#x27;</span>: [<span class="number">66</span>, <span class="number">95</span>, <span class="number">93</span>, <span class="number">90</span>,<span class="number">80</span>],</span><br><span class="line">        <span class="string">&#x27;English&#x27;</span>: [<span class="number">65</span>, <span class="number">85</span>, <span class="number">92</span>, <span class="number">88</span>, <span class="number">90</span>],</span><br><span class="line">        <span class="string">&#x27;Math&#x27;</span>: [<span class="number">30</span>, <span class="number">98</span>, <span class="number">96</span>, <span class="number">77</span>, <span class="number">90</span>]&#125;</span><br><span class="line">df1= DataFrame(data)</span><br><span class="line">df2 = DataFrame(data, index=[<span class="string">&#x27;ZhangFei&#x27;</span>, <span class="string">&#x27;GuanYu&#x27;</span>, <span class="string">&#x27;ZhaoYun&#x27;</span>, <span class="string">&#x27;HuangZhong&#x27;</span>, <span class="string">&#x27;DianWei&#x27;</span>], columns=[<span class="string">&#x27;English&#x27;</span>, <span class="string">&#x27;Math&#x27;</span>, <span class="string">&#x27;Chinese&#x27;</span>])</span><br></pre></td></tr></table></figure>
<h4><span id="数据清洗">数据清洗</span></h4><ul>
<li><p><strong>删除 DataFrame 中的不必要的列或行</strong></p>
<ul>
<li>```python<br>df.drop(columns=[])<br>df.drop(index=[])<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **重命名列名 <span class="built_in">columns</span>，让列表名更容易识别**</span><br><span class="line"></span><br><span class="line">  - ```python</span><br><span class="line">    df2.<span class="built_in">rename</span>(<span class="built_in">columns</span>=&#123;<span class="built_in">origin</span>:change&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>去重复的值</strong></p>
<ul>
<li>```python<br>df.drop_duplicates()<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **格式问题**</span><br><span class="line"></span><br><span class="line">  - ```python</span><br><span class="line">    df.column.<span class="keyword">as</span><span class="keyword">type</span>(type)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>数据间的空格</strong></p>
<ul>
<li><p>```python</p>
<h1><span id="删除左右两边空格">删除左右两边空格</span></h1><p>df2[‘Chinese’]=df2[‘Chinese’].map(str.strip)</p>
<h1><span id="删除左边空格">删除左边空格</span></h1><p>df2[‘Chinese’]=df2[‘Chinese’].map(str.lstrip)</p>
<h1><span id="删除右边空格">删除右边空格</span></h1><p>df2[‘Chinese’]=df2[‘Chinese’].map(str.rstrip)</p>
<h1><span id="去除">去除$</span></h1><p>df2[‘Chinese’]=df2[‘Chinese’].str.strip(‘$’)</p>
<h1><span id="大小写转换">大小写转换</span></h1><h1><span id="全部大写">全部大写</span></h1><p>df2.columns = df2.columns.str.upper()</p>
<h1><span id="全部小写">全部小写</span></h1><p>df2.columns = df2.columns.str.lower()</p>
<h1><span id="首字母大写">首字母大写</span></h1><p>df2.columns = df2.columns.str.title()</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">-</span> **查找空值**</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">-</span> ```<span class="selector-tag">python</span></span><br><span class="line">    <span class="selector-tag">df</span><span class="selector-class">.isnull</span>()</span><br><span class="line">    </span><br><span class="line">    # 知道哪列存在空值</span><br><span class="line">    <span class="selector-tag">df</span><span class="selector-class">.isnull</span>()<span class="selector-class">.any</span>()</span><br><span class="line">    # 寻找非空值</span><br><span class="line">    <span class="selector-tag">df</span><span class="selector-class">.notnull</span>()</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>使用apply函数对数据进行清洗</strong></p>
<ul>
<li><p>```python<br>df[‘name’] = df[‘name’].apply(str.upper)</p>
<p>def double_df(x):</p>
<pre><code>return 2*x
</code></pre><p>df1[u’语文’] = df1[u’语文’].apply(double_df)</p>
<p>def plus(df,n,m):</p>
<pre><code>df[&#39;new1&#39;] = (df[u&#39;语文&#39;]+df[u&#39;英语&#39;]) * m
df[&#39;new2&#39;] = (df[u&#39;语文&#39;]+df[u&#39;英语&#39;]) * n
return df
</code></pre><p>df1 = df1.apply(plus,axis=1,args=(2,3,))</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">![image-<span class="number">20211103092114173</span>](https:<span class="regexp">//</span>fastly.jsdelivr.net<span class="regexp">/gh/</span>Ye2222<span class="regexp">/blogImage@main/im</span>ages/image-<span class="number">20211103092114173</span>.png)</span><br><span class="line"></span><br><span class="line"><span class="comment">### 数据分析的一些概念</span></span><br><span class="line"></span><br><span class="line">- 商业智能 BI、数据仓库 DW、数据挖掘 DM </span><br><span class="line">- 元数据 VS 数据元</span><br><span class="line">  - **元数据**（MetaData）：描述其它数据的数据，也称为“中介数据”。</span><br><span class="line">  - **数据元**（Data Element）：就是最小数据单元。</span><br><span class="line"></span><br><span class="line">![image-<span class="number">20211103101608794</span>](https:<span class="regexp">//</span>fastly.jsdelivr.net<span class="regexp">/gh/</span>Ye2222<span class="regexp">/blogImage@main/im</span>ages/image-<span class="number">20211103101608794</span>.png)</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 数据预处理</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. 数据清洗</span><br><span class="line">   - 主要是为了去除重复数据，去噪声（即干扰数据）以及填充缺失值。</span><br><span class="line"><span class="number">2</span>. 数据集成</span><br><span class="line">   - 是将多个数据源中的数据存放在一个统一的数据存储中。</span><br><span class="line"><span class="number">3</span>. 数据变换</span><br><span class="line">   - 就是将数据转换成适合数据挖掘的形式</span><br><span class="line"></span><br><span class="line"><span class="comment">### 用户画像：标签化</span></span><br><span class="line"></span><br><span class="line">![image-<span class="number">20211103190809281</span>](https:<span class="regexp">//</span>fastly.jsdelivr.net<span class="regexp">/gh/</span>Ye2222<span class="regexp">/blogImage@main/im</span>ages/image-<span class="number">20211103190809281</span>.png)</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 设计唯一标签</span></span><br><span class="line"></span><br><span class="line">- **用户唯一标识是整个用户画像的核心**。</span><br><span class="line">- 设计唯一标识可以从这些项中选择：用户名、注册手机号、联系人手机号、邮箱、设备号、CookieID 等。</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 给用户打标签</span></span><br><span class="line"></span><br><span class="line">**用户消费行为分析**</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. 用户标签：它包括了性别、年龄、地域、收入、学历、职业等。这些包括了用户的基础属性。</span><br><span class="line"><span class="number">2</span>. 消费标签：消费习惯、购买意向、是否对促销敏感。这些统计分析用户的消费习惯。</span><br><span class="line"><span class="number">3</span>. 行为标签：时间段、频次、时长、访问路径。这些是通过分析用户行为，来得到他们使用 App 的习惯。</span><br><span class="line"><span class="number">4</span>. 内容分析：对用户平时浏览的内容，尤其是停留时间长、浏览次数多的内容进行分析，分析出用户对哪些内容感兴趣，比如，金融、娱乐、教育、体育、时尚、科技等</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 用户生命周期</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. 获客：如何进行拉新，通过更精准的营销获取客户。</span><br><span class="line"><span class="number">2</span>. 粘客：个性化推荐，搜索排序，场景运营等。</span><br><span class="line"><span class="number">3</span>. 留客：流失率预测，分析关键节点降低流失率。</span><br><span class="line"></span><br><span class="line">![image-<span class="number">20211103191209718</span>](https:<span class="regexp">//</span>fastly.jsdelivr.net<span class="regexp">/gh/</span>Ye2222<span class="regexp">/blogImage@main/im</span>ages/image-<span class="number">20211103191209718</span>.png)</span><br><span class="line"></span><br><span class="line"><span class="comment">### 数据采集</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### 数据源</span></span><br><span class="line"></span><br><span class="line">![image-<span class="number">20211103191731121</span>](https:<span class="regexp">//</span>fastly.jsdelivr.net<span class="regexp">/gh/</span>Ye2222<span class="regexp">/blogImage@main/im</span>ages/image-<span class="number">20211103191731121</span>.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">开放数据源</span><br><span class="line"></span><br><span class="line">![image-<span class="number">20211103192228170</span>](https:<span class="regexp">//</span>fastly.jsdelivr.net<span class="regexp">/gh/</span>Ye2222<span class="regexp">/blogImage@main/im</span>ages/image-<span class="number">20211103192228170</span>.png)</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 爬虫抓取</span></span><br><span class="line"></span><br><span class="line">- 使用 Python 编写爬虫代码</span><br><span class="line">- **[火车采集器](http:<span class="regexp">//</span>www.locoy.com/)**</span><br><span class="line">- **[八爪鱼](http:<span class="regexp">//</span>www.bazhuayu.com/)**</span><br><span class="line">  - 可云采集</span><br><span class="line">- **[集搜客](http:<span class="regexp">//</span>www.gooseeker.com/)**</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 日志采集</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. 通过 Web 服务器采集，例如 httpd、Nginx、Tomcat 都自带日志记录功能。同时很多互联网企业都有自己的海量数据采集工具，多用于系统日志采集，如 Hadoop 的 Chukwa、Cloudera 的 Flume、Facebook 的 Scribe 等，这些工具均采用分布式架构，能够满足每秒数百 MB 的日志数据采集和传输需求。</span><br><span class="line"><span class="number">2</span>. 自定义采集用户行为，例如用 JavaScript 代码监听用户的行为、AJAX 异步请求后台记录日志等。<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##### 埋点</span></span><br><span class="line"></span><br><span class="line">- 埋点是日志采集的关键步骤</span><br><span class="line"></span><br><span class="line">- **埋点就是在有需要的位置采集相应的信息，进行上报**</span><br><span class="line">- 埋点就是在你需要统计数据的地方植入统计代码，当然植入代码可以自己写，也可以使用第三方统计工具</span><br><span class="line"></span><br><span class="line"><span class="comment">### 数据清洗</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### 4个关键点：完全合一</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. **完**整性：单条数据是否存在空值，统计的字段是否完善。</span><br><span class="line"><span class="number">2</span>. **全**面性：观察某一列的全部数值，比如在 Excel 表中，我们选中一列，可以看到该列的平均值、最大值、最小值。我们可以通过常识来判断该列是否有问题，比如：数据定义、单位标识、数值本身。</span><br><span class="line"><span class="number">3</span>. **合**法性：数据的类型、内容、大小的合法性。比如数据中存在非 ASCII 字符，性别存在了未知，年龄超过了 <span class="number">150</span> 岁等。</span><br><span class="line"><span class="number">4</span>. 唯**一**性：数据是否存在重复记录，因为数据通常来自不同渠道的汇总，重复的情况是常见的。行数据、列数据都需要是唯一的，比如一个人不能重复记录多次，且一个人的体重也不能在列指标中重复记录多次。</span><br><span class="line"></span><br><span class="line"><span class="comment">### 数据集成</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### 两种架构：ELT和ETL</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. ETL </span><br><span class="line">   - 提取 (Extract)——转换 (Transform)——加载 (Load)</span><br><span class="line">   - 在数据源抽取后首先进行转换，然后将转换的结果写入目的地。</span><br><span class="line"><span class="number">2</span>. ELT</span><br><span class="line">   - 提取 (Extract)——加载 (Load)——变换 (Transform)</span><br><span class="line">   - 在抽取后将结果先写入目的地，然后利用数据库的聚合分析能力或者外部计算框架</span><br><span class="line"></span><br><span class="line">![image-<span class="number">20211109211202429</span>](https:<span class="regexp">//</span>fastly.jsdelivr.net<span class="regexp">/gh/</span>Ye2222<span class="regexp">/blogImage@main/im</span>ages/image-<span class="number">20211109211202429</span>.png)</span><br><span class="line"></span><br><span class="line">- ELT 和 ETL 相比，最大的区别是“重抽取和加载，轻转换”，从而可以用更轻量的方案搭建起一个数据集成平台</span><br><span class="line">- ELT 架构中，数据变换这个过程根据后续使用的情况，需要在 SQL 中进行，好处是你可以从数据源中提取数据，经过少量预处理后进行加载</span><br><span class="line"></span><br><span class="line"><span class="comment">### 数据变换</span></span><br><span class="line"></span><br><span class="line">![image-<span class="number">20211110104502508</span>](https:<span class="regexp">//</span>fastly.jsdelivr.net<span class="regexp">/gh/</span>Ye2222<span class="regexp">/blogImage@main/im</span>ages/image-<span class="number">20211110104502508</span>.png)</span><br><span class="line"></span><br><span class="line">数据变换是数据准备的重要环节，它**通过数据平滑、数据聚集、数据概化和规范化等方式**将数据转换成适用于数据挖掘的形式。</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 常见的变换方式</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. **数据平滑**：去除数据中的噪声，将连续数据离散化。这里可以采用分箱、聚类和回归的方式进行数据平滑，我会在后面给你讲解聚类和回归这两个算法；</span><br><span class="line"><span class="number">2</span>. **数据聚集**：对数据进行汇总，在 SQL 中有一些聚集函数可以供我们操作，比如 Max() 反馈某个字段的数值最大值，Sum() 返回某个字段的数值总和；</span><br><span class="line"><span class="number">3</span>. **数据概化**：将数据由较低的概念抽象成为较高的概念，减少数据复杂度，即用更高的概念替代更低的概念。比如说上海、杭州、深圳、北京可以概化为中国。</span><br><span class="line"><span class="number">4</span>. **数据规范化**：使属性数据按比例缩放，这样就将原来的数值映射到一个新的特定区域中。常用的方法有最小—最大规范化、Z—score 规范化、按小数定标规范化等</span><br><span class="line"><span class="number">5</span>. **属性构造**：构造出新的属性并添加到属性集中。这里会用到特征工程的知识，因为通过属性与属性的连接构造新的属性，其实就是特征工程。比如说，数据表中统计每个人的英语、语文和数学成绩，你可以构造一个“总和”这个属性，来作为新属性。这样“总和”这个属性就可以用到后续的数据挖掘计算中。</span><br><span class="line"></span><br><span class="line">最简单易用的就是对数据进行规范化处理</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 数据规范化的几种方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### **1. Min-max 规范化**</span></span><br><span class="line"></span><br><span class="line">Min-max 规范化方法是将原始数据变换到 [<span class="number">0</span>,<span class="number">1</span>] 的空间中。用公式表示就是：</span><br><span class="line"></span><br><span class="line">新数值 =（原数值 - 极小值）/（极大值 - 极小值）。</span><br><span class="line"></span><br><span class="line">![image-<span class="number">20211110141838915</span>](https:<span class="regexp">//</span>fastly.jsdelivr.net<span class="regexp">/gh/</span>Ye2222<span class="regexp">/blogImage@main/im</span>ages/image-<span class="number">20211110141838915</span>.png)</span><br><span class="line"></span><br><span class="line">- 是在列上进行计算</span><br><span class="line">- 每一行表示一个样本，每一列表示一个特征</span><br><span class="line"></span><br><span class="line"><span class="comment">#### **2. Z-Score 规范化**</span></span><br><span class="line"></span><br><span class="line">可以使用相同的标准比价两个不同标准下的数值</span><br><span class="line"></span><br><span class="line">新数值 =（原数值 - 均值）/ 标准差</span><br><span class="line"></span><br><span class="line">![image-<span class="number">20211110105307778</span>](https:<span class="regexp">//</span>fastly.jsdelivr.net<span class="regexp">/gh/</span>Ye2222<span class="regexp">/blogImage@main/im</span>ages/image-<span class="number">20211110105307778</span>.png)</span><br><span class="line"></span><br><span class="line">![image-<span class="number">20211110105250916</span>](https:<span class="regexp">//</span>fastly.jsdelivr.net<span class="regexp">/gh/</span>Ye2222<span class="regexp">/blogImage@main/im</span>ages/image-<span class="number">20211110105250916</span>.png)</span><br><span class="line"></span><br><span class="line">![image-<span class="number">20211110142530601</span>](https:<span class="regexp">//</span>fastly.jsdelivr.net<span class="regexp">/gh/</span>Ye2222<span class="regexp">/blogImage@main/im</span>ages/image-<span class="number">20211110142530601</span>.png)</span><br><span class="line"></span><br><span class="line"><span class="comment">#### **3. 小数定标规范化**</span></span><br><span class="line"></span><br><span class="line">- 小数定标规范化就是通过移动小数点的位置来进行规范化。</span><br><span class="line"></span><br><span class="line">- 小数点移动多少位取决于属性 A 的取值中的最大绝对值。</span><br><span class="line"></span><br><span class="line">- 举个例子，比如属性 A 的取值范围是 -<span class="number">999</span> 到 <span class="number">88</span>，那么最大绝对值为 <span class="number">999</span>，小数点就会移动 <span class="number">3</span> 位，即新数值 = 原数值 /<span class="number">1000</span>。那么 A 的取值范围就被规范化为 -<span class="number">0.999</span> 到 <span class="number">0.088</span>。<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 数据可视化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### 使用视图背后的目的</span></span><br><span class="line"></span><br><span class="line">![image-<span class="number">20211110143436461</span>](https:<span class="regexp">//</span>fastly.jsdelivr.net<span class="regexp">/gh/</span>Ye2222<span class="regexp">/blogImage@main/im</span>ages/image-<span class="number">20211110143436461</span>.png)</span><br><span class="line"></span><br><span class="line">- 呈现某个变量的分布情况，就可以通过直方图的形式来呈现</span><br><span class="line">- 想要看两个变量之间的相关性及分布情况，可以采用散点图的形式呈现。</span><br><span class="line">- 散点图既可以表明两个变量之间的关系，也可以体现它们的分布情况</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 前端可视化组件</span></span><br><span class="line"></span><br><span class="line">**Canvas 和 SVG 是 HTML5 中主要的 <span class="number">2</span>D 图形技术，WebGL 是 <span class="number">3</span>D 框架。**</span><br><span class="line"></span><br><span class="line">- **Canvas 适用于位图**</span><br><span class="line">  - Canvas 技术可以绘制比较复杂的动画</span><br><span class="line">  - 就是给了你一张白板，需要你自己来画点</span><br><span class="line">- **SVG** 的中文是可缩放矢量图形，它是使用 XML 格式来定义图形的</span><br><span class="line">  - SVG 经常用于图标和图表上。它最大的特点就是支持大部分浏览器，动态交互性实现起来也很方便，比如在 SVG 中插入动画元素等。</span><br><span class="line">- **WebGL 是一种 <span class="number">3</span>D 绘图协议**，能在网页浏览器中呈现 <span class="number">3</span>D 画面技术，并且可以和用户进行交互。</span><br><span class="line"></span><br><span class="line">![image-<span class="number">20211110150319836</span>](https:<span class="regexp">//</span>fastly.jsdelivr.net<span class="regexp">/gh/</span>Ye2222<span class="regexp">/blogImage@main/im</span>ages/image-<span class="number">20211110150319836</span>.png)</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 可视化视图</span></span><br><span class="line"></span><br><span class="line">四种关系</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. 比较：比较数据间各类别的关系，或者是它们随着时间的变化趋势，比如折线图；</span><br><span class="line"><span class="number">2</span>. 联系：查看两个或两个以上变量之间的关系，比如散点图；</span><br><span class="line"><span class="number">3</span>. 构成：每个部分占整体的百分比，或者是随着时间的百分比变化，比如饼图；</span><br><span class="line"><span class="number">4</span>. 分布：关注单个变量，或者多个变量的分布情况，比如直方图。</span><br><span class="line"></span><br><span class="line">按照变量的个数，我们可以把可视化视图划分为单变量分析和多变量分析。</span><br><span class="line"></span><br><span class="line">散点图：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">import pandas as pd</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import seanborn as sns </span><br><span class="line"></span><br><span class="line"><span class="comment"># 散点图</span></span><br><span class="line">plt.scatter(x, y)</span><br><span class="line">sns.jointplot(x, y, data=, kind=<span class="string">&#x27;scatter&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 折线图</span></span><br><span class="line">plt.plot(x, y)</span><br><span class="line">sns.lineplot(x, y, data=)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直方图</span></span><br><span class="line">plt.hist(x)</span><br><span class="line">sns.distplot(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 条形图</span></span><br><span class="line">plt.bar(x, y)</span><br><span class="line">sns.barplot(x, y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 箱型图</span></span><br><span class="line">plt.boxplot(x)</span><br><span class="line">sns.boxplot(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 饼图</span></span><br><span class="line">plt.pie(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 热力图</span></span><br><span class="line">sns.heatmap()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 蜘蛛图</span></span><br><span class="line"><span class="comment"># 画图数据准备，角度、状态值</span></span><br><span class="line">labels=np.array([<span class="string">u&quot; 推进 &quot;</span>,<span class="string">&quot;KDA&quot;</span>,<span class="string">u&quot; 生存 &quot;</span>,<span class="string">u&quot; 团战 &quot;</span>,<span class="string">u&quot; 发育 &quot;</span>,<span class="string">u&quot; 输出 &quot;</span>])</span><br><span class="line">stats=[<span class="number">83</span>, <span class="number">61</span>, <span class="number">95</span>, <span class="number">67</span>, <span class="number">76</span>, <span class="number">88</span>]</span><br><span class="line">angles=np.linspace(<span class="number">0</span>, <span class="number">2</span>*np.pi, len(labels), endpoint=False)</span><br><span class="line">stats=np.concatenate((stats,[stats[<span class="number">0</span>]]))</span><br><span class="line">angles=np.concatenate((angles,[angles[<span class="number">0</span>]]))</span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>, polar=True)   </span><br><span class="line">ax.plot(angles, stats, <span class="string">&#x27;o-&#x27;</span>, linewidth=<span class="number">2</span>)</span><br><span class="line">ax.fill(angles, stats, alpha=<span class="number">0.25</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二元变量分布</span></span><br><span class="line"><span class="comment"># 用 Seaborn 画二元变量分布图（散点图，核密度图，Hexbin 图）</span></span><br><span class="line">sns.jointplot(x=<span class="string">&quot;total_bill&quot;</span>, y=<span class="string">&quot;tip&quot;</span>, data=tips, kind=<span class="string">&#x27;scatter&#x27;</span>)</span><br><span class="line">sns.jointplot(x=<span class="string">&quot;total_bill&quot;</span>, y=<span class="string">&quot;tip&quot;</span>, data=tips, kind=<span class="string">&#x27;kde&#x27;</span>)</span><br><span class="line">sns.jointplot(x=<span class="string">&quot;total_bill&quot;</span>, y=<span class="string">&quot;tip&quot;</span>, data=tips, kind=<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 成对关系</span></span><br><span class="line">sns.pairplot()</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211110155755120.png" alt="image-20211110155755120"></p>
]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
  </entry>
  <entry>
    <title>李宏毅深度学习L1</title>
    <url>/2022/05/07/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0L1/</url>
    <content><![CDATA[<h1><span id="机器学习">机器学习</span></h1><h2><span id="基本任务">基本任务</span></h2><h3><span id="regression">Regression</span></h3><ul>
<li>回归，预测一个值，期望其与实际值相等</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202204301026876.png" alt="image-20220430102659714"></p>
<ul>
<li>损失函数一般使用<strong>平均方差（Mean Square Error）</strong></li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202204301037725.png" alt="image-20220430103752590" style="zoom:67%;"></p>
<h3><span id="classification">Classification</span></h3><ul>
<li>分类，输出多个概率值，判断输入属于哪一个类别</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202204301028213.png" alt="image-20220430102849022"></p>
<ul>
<li><p>输出值可使用<strong>Soft-max</strong>将其转换为概率值</p>
</li>
<li><p>classfication的损失函数使用<strong>交叉熵</strong>（Cross-entropy）</p>
<ul>
<li>交叉熵可以很好地衡量两个概率值之间的差异</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202204301035279.png" alt="image-20220430103504153" style="zoom:67%;"></p>
</li>
</ul>
<h3><span id="一些概念">一些概念</span></h3><h4><span id="soft-max">Soft-max</span></h4><ul>
<li>将多个Classification的多个输出值转换为概率值</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202204301030352.png" alt="image-20220430103012220" style="zoom:67%;"></p>
<h4><span id="激活函数activation-function">激活函数（Activation function）</span></h4><h5><span id="sigmoid">Sigmoid</span></h5><p>函数：<img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202204301126515.png" alt="image-20220430112644374" style="zoom: 80%;"></p>
<p>导数：  <img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202204301127137.png" alt="image-20220430112710008" style="zoom:80%;"></p>
<p>图像：    <img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202204301127916.png" alt="image-20220430112752698" style="zoom:50%;"></p>
<h5><span id="relu">ReLU</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220517201248200.png" alt="image-20220517201248200"></p>
<p>函数：</p>
<script type="math/tex; mode=display">
f(X) = max(0,X)</script><p>图像：</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220517201458465.png" alt="image-20220517201458465"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220517201513033.png" alt="image-20220517201513033"></p>
<h2><span id="基本步骤">基本步骤</span></h2><h3><span id="functionmodel-with-unknown">Function(Model) with unknown</span></h3><p>函数的集合</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220507194526339.png" alt="image-20220507194526339"></p>
<h3><span id="define-loss-from-training-data">Define loss from training data</span></h3><ul>
<li><p>计算一个函数得到的输出与预期值的差距</p>
</li>
<li><p>输入：一个函数（参数）</p>
</li>
<li>输出：函数的优劣程度</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220507200058287.png" alt="image-20220507200058287"></p>
<h4><span id="error-surface"><strong>Error surface</strong></span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220507200155027.png" alt="image-20220507200155027"></p>
<p>图中的每一个点都是一个函数，颜色代表L(w,b)的大小</p>
<h3><span id="optimization">Optimization</span></h3><p>可以通过梯度下降来寻找使损失函数变得最小的参数w，b</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220507200252270.png" alt="image-20220507200252270"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510202943067.png" alt="image-20220510202943067"></p>
<h2><span id="一些概念">一些概念</span></h2><h3><span id="generalization-一般化">Generalization 一般化</span></h3><p>我们真正关心的是模型在新数据(testing data)上的错误率</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220507203825921.png" alt="image-20220507203825921"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220507203837016.png" alt="image-20220507203837016"></p>
<h4><span id="使用更加复杂的模型">使用更加复杂的模型</span></h4><p>使用更加复杂的模型会使我们在训练的数据上表现的更好</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509205959571.png" alt="image-20220509205959571"></p>
<p>但是这往往会造成在测试集数据上过拟合（overfitting）</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220509210204857.png" alt="image-20220509210204857"></p>
<h4><span id="使用sigmoid函数构建非线性模型">使用Sigmoid函数构建非线性模型</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510203104238.png" alt="image-20220510203104238" style="zoom:80%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510203527319.png" alt="image-20220510203527319"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510203646052.png" alt="image-20220510203646052"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510203843228.png" alt="image-20220510203843228"></p>
<h3><span id="gradient-descent">Gradient Descent</span></h3><script type="math/tex; mode=display">
\theta^* = arg \mathop{min}{\theta}L(\theta)</script><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510095736537.png" alt="image-20220510095736537"></p>
<h4><span id="考虑一个参数w"><strong>考虑一个参数w</strong></span></h4><script type="math/tex; mode=display">
\begin{equation}

    w^* = arg\mathop{\min}_{\theta}L(w) 

\end{equation}</script><p>步骤：</p>
<ul>
<li>随机选取一个初始值$w^0$</li>
<li>计算梯度(导数)$\frac{dL}{dw}|_{w=w0}$<ul>
<li>如果为负，增加w</li>
<li>如果为正，减少w</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220507200943024.png" alt="image-20220507200943024"></p>
<ul>
<li>更新参数：</li>
</ul>
<script type="math/tex; mode=display">
w^1 \leftarrow w^0 - \eta\frac{dL}{dw}|_{w=w0}</script><p>这里的$\eta$称为<strong>学习率（learning rate）</strong></p>
<h4><span id="考虑两个参数w和b"><strong>考虑两个参数w和b</strong></span></h4><script type="math/tex; mode=display">
w^*, b^* = arg \mathop{min}_{w, b}L(w, b)</script><p>它们的梯度：</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220507201359112.png" alt="image-20220507201359112"></p>
<p>步骤：</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220507201339625.png" alt="image-20220507201339625"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220507201820893.png" alt="image-20220507201820893"></p>
<p>在线性回归模型中，损失函数是凹的，没有局部最优点</p>
<p><strong>求梯度</strong></p>
<script type="math/tex; mode=display">
L(w, b)=\sum^{10}_{n=1} (\hat{y}^n-(b+w *x^n_{cp}))^2</script><script type="math/tex; mode=display">
\frac{\partial L}{\partial w} = \sum^{10}_{n=1}2(\hat y^n-(b+w*x^n_{cp}))(-x^n_{cp})</script><script type="math/tex; mode=display">
\frac{\partial L}{\partial w} = \sum^{10}_{n=1}2(\hat y^n-(b+w*x^n_{cp}))</script><h4><span id="learning-rate-学习率">Learning Rate 学习率</span></h4><ul>
<li>步子太大的话容易错过最优点</li>
<li>步子太小速度太慢</li>
</ul>
<h4><span id="adaptive-learning-rates-可调整的学习率">Adaptive Learning Rates 可调整的学习率</span></h4><ul>
<li>基本思想：在每一个epoch中通过一些因素来减小学习率<ul>
<li>一开始，我们离目标很远，所以要使用较大的学习率</li>
<li>在几个epoch之后，我们接近了目标，所以减少学习率</li>
</ul>
</li>
<li>学习率不可能是one-size-fits-all<ul>
<li>给了不同的参数，应该有不同的学习率</li>
</ul>
</li>
</ul>
<h5><span id="vanilla-gradient-descent">Vanilla Gradient descent</span></h5><script type="math/tex; mode=display">
\eta^t=\frac{\eta}{\sqrt{t+1}} \\
g^t=\frac{\partial L(\theta^t)}{\partial w} \\
w^{t+1} \leftarrow w^t - \eta^tg^t</script><h5><span id="adagrad">Adagrad</span></h5><ul>
<li><p>使用了root mean square</p>
<ul>
<li>将每个参数的学习率除以其<strong>先前导数的均方根</strong>（$\sigma^t$）</li>
</ul>
<script type="math/tex; mode=display">
\eta^t=\frac{\eta}{\sqrt{t+1}} \\
g^t=\frac{\partial L(\theta^t)}{\partial w} \\
\sigma^t = \sqrt{\frac{1}{t+1}\sum^t_{i=0}(g^i)^2} \\
w^{t+1} \leftarrow w^t - \frac{\eta^t}{\sigma^t}g^t \\</script><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510192236007.png" alt="image-20220510192236007" style="zoom:80%;"></p>
</li>
</ul>
<p>化简</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510192540560.png" alt="image-20220510192540560" style="zoom:80%;"></p>
<p>分子与分母作用相反，越大的梯度，我们应该走更大的步才对</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510192854921.png" alt="image-20220510192854921" style="zoom:80%;"></p>
<p>最佳的步骤</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510201221790.png" alt="image-20220510201221790" style="zoom:80%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510201236080.png" alt="image-20220510201236080" style="zoom:80%;"></p>
<p>Adagrad是在尝试用一阶导去估计二阶导</p>
<h4><span id="backpropagation">Backpropagation</span></h4><p>参数$\theta = {w_1, w_2, \dots, b_1, b_2, \dots}$，不断进行更新</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220518104803258.png" alt="image-20220518104803258"></p>
<h5><span id="链式法则">链式法则</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220518104902942.png" alt="image-20220518104902942"></p>
<h5><span id="向前传递">向前传递</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220518105244462.png" alt="image-20220518105244462"></p>
<h5><span id="向后传递">向后传递</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220518105525634.png" alt="image-20220518105525634"></p>
<script type="math/tex; mode=display">
\frac{\partial{C}}{\partial{z}} = \frac{\partial{a}}{\partial{z}}\frac{\partial{C}}{\partial{a}} \\ \\
\frac{\partial{C}}{\partial{a}} = \frac{\partial{z^`}}{\partial{a}}\frac{\partial{C}}{\partial{z^`}}+ \frac{\partial{z^{``}}}{\partial{a}}\frac{\partial{C}}{\partial{z^{``}}} \\ \\
\frac{\partial{z^`}}{\partial{a}} = w_3 \\ \frac{\partial{z^{``}}}{\partial{a}} = w_4 \\ \\ 
现在的问题是\frac{\partial{C}}{\partial{z^`}}和\frac{\partial{C}}{\partial{z^{``}}}的取值</script><p>情况一：有输出层</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220518110011768.png" alt="image-20220518110011768"></p>
<p>情况二：不是输出层，只是中间层</p>
<p>只能不断地往后算，直到输出层，然后向后传播</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220518110331193.png" alt="image-20220518110331193"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220518110346806.png" alt="image-20220518110346806"></p>
<h5><span id="小结">小结</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220518140215320.png" alt="image-20220518140215320"></p>
<script type="math/tex; mode=display">
在拥有\frac{\part z}{\part w}和\frac{\part C}{\part z}的条件下，我们可以通过链式法则得到输出关于参数的梯度\frac{\part C}{\part w}</script><h3><span id="stochastic-gradient-descentsgd">Stochastic Gradient Descent(SGD)</span></h3><p>随机梯度下降</p>
<h5><span id="对比">对比</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510201627870.png" alt="image-20220510201627870"></p>
<p>在每次更新时用1个样本来计算梯度，然后更新参数</p>
<p>随机也就是说我们用样本中的一个例子来近似我所有的样本，来调整<em>θ</em></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510201959183.png" alt="image-20220510201959183"></p>
<h3><span id="loss-function">Loss function</span></h3><ul>
<li><p>L(f) = L(w,b)</p>
<ul>
<li>衡量一组参数的好坏</li>
</ul>
</li>
<li><p>常用的损失函数</p>
<ul>
<li>Mean Square Error(MSE)</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202204301037725.png" alt="image-20220430103752590" style="zoom:67%;"></p>
<ul>
<li>Cross-entropy</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/202204301035279.png" alt="image-20220430103504153" style="zoom:67%;"></p>
</li>
</ul>
<h2><span id="classification-probabilistic-generative-model-概率生成模型">Classification: Probabilistic Generative Model 概率生成模型</span></h2><p>分类任务</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510204324748.png" alt="image-20220510204324748"></p>
<h3><span id="二元分类问题">二元分类问题</span></h3><p>给生成模型一个x，模型给出一个类别</p>
<h4><span id="regression">Regression</span></h4><ul>
<li>输出1代表类别1，输出-1代表类别2</li>
<li>靠近1代表更大可能属于类别1，反之则是类别二</li>
<li><p>实际上就是划分出一道线，左边为类别1，右边为类别2</p>
</li>
<li><p>但是如果有一些分布得太远的点，会造成更大的错误</p>
</li>
<li>且只能区分两个类别</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510204715065.png" alt="image-20220510204715065"></p>
<h4><span id="理想的选择">理想的选择</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510205004926.png" alt="image-20220510205004926"></p>
<p>假设两个类别分别为两个箱子</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510205102830.png" alt="image-20220510205102830"></p>
<ul>
<li>Box1是类别1，Box2是类别2</li>
<li>$P(B_1)$代表数据集中$B_1$占总数的比例，则$P(B_2)$代表数据集中$B_2$占总数的比例</li>
</ul>
<p>所以，我们拿到一个蓝色的球，它属于$B_1$的概率为</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510205422208.png" alt="image-20220510205422208"></p>
<h5><span id="使用高斯分布">使用高斯分布</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510213010955.png" alt="image-20220510213010955"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510205834595.png" alt="image-20220510205834595"></p>
<ul>
<li>输入：向量x</li>
<li>输出：采样x的概率</li>
<li>方程的形状取决于平均值$\mu$和协方差矩阵$\sum$</li>
</ul>
<p>假设我们数据集的点分布符合高斯分布</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510210513338.png" alt="image-20220510210513338"></p>
<p>选用不同的平均值和协方差矩阵，会有不同的可能（different likelihood）</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510210807568.png" alt="image-20220510210807568"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510210950666.png" alt="image-20220510210950666"></p>
<h5><span id="最大似然估计">最大似然估计</span></h5><p>最大似然原则就是选择使该概率最大的参数</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510212001519.png" alt="image-20220510212001519"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510212544677.png" alt="image-20220510212544677"></p>
<h5><span id="进行分类"><strong>进行分类</strong></span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510212616296.png" alt="image-20220510212616296"></p>
<h5><span id="改进"><strong>改进</strong></span></h5><ul>
<li>使用相同的协方差矩阵</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510212702118.png" alt="image-20220510212702118"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510212717566.png" alt="image-20220510212717566"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510212807747.png" alt="image-20220510212807747"></p>
<h5><span id="先验概率"><strong>先验概率</strong></span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510213150406.png" alt="image-20220510213150406" style="zoom:80%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510213734178.png" alt="image-20220510213734178" style="zoom:80%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510213810465.png" alt="image-20220510213810465" style="zoom:80%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510213848632.png" alt="image-20220510213848632" style="zoom:80%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220510213939359.png" alt="image-20220510213939359" style="zoom:80%;"></p>
<h2><span id="logistic-regression-逻辑回归">Logistic Regression 逻辑回归</span></h2><p>线性的二分类的分类模型</p>
<h3><span id="步骤一函数集function-set">步骤一：函数集（Function Set）</span></h3><ul>
<li>函数集：</li>
</ul>
<script type="math/tex; mode=display">
f_{w,b}(x)=P_{w,b}(C_1|x)</script><ul>
<li>寻找$P_{w,b}(C_1|x)$，即拿到x，x属于$C_1$的概率<ul>
<li>如果$P_{w,b}(C_1|x)\ge0.5$，输出$C_1$，否则输出$C_2$</li>
</ul>
</li>
</ul>
<script type="math/tex; mode=display">
z = w \cdot x +b \\ 
P_{w,b}(C_1|x) = \sigma(z)</script><script type="math/tex; mode=display">
\sigma(z) = \frac{1}{1+exp(-z)}</script><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220517145816632.png" alt="image-20220517145816632"></p>
<h3><span id="步骤二函数的优良程度goodness-of-a-function">步骤二：函数的优良程度（Goodness of a Function）</span></h3><p>我们拥有n个数据集和它们对应的标签</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220517151100007.png" alt="image-20220517151100007"></p>
<p>假设数据是根据$f_{w,b}(x)=P_{w,b}(C_1|x)$生成的，对应给定的w和b，生成这些数据的概率为</p>
<script type="math/tex; mode=display">
L(w,b) = f_{w,b}(x^1)f_{w,b}(x^2)(1-f_{w,b}(x^3))\cdots f_{w,b}(x^N)</script><p>根据最大似然估计，最好的参数$w^<em>$和$b^</em>$会使$L(w,b)$最大，即</p>
<script type="math/tex; mode=display">
w^*,b^*=arg \mathop{max}_{w,b}L(w,b)</script><p>为了计算，我们将两个标签$C_1和C_2 $转换为1和0，然后进行最大似然估计</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220517151742238.png" alt="image-20220517151742238"></p>
<p>转换为两个伯努利分布的交叉熵</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220517152914840.png" alt="image-20220517152914840"></p>
<h3><span id="步骤三找到最好的函数find-the-best-function">步骤三：找到最好的函数（Find the best function）</span></h3><p>求导数</p>
<ul>
<li>第一部分</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220517154453945.png" alt="image-20220517154453945"></p>
<ul>
<li>第二部分</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220517154608690.png" alt="image-20220517154608690"></p>
<ul>
<li>最后的结果</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220517154705157.png" alt="image-20220517154705157"></p>
<h3><span id="小结">小结</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220517155048402.png" alt="image-20220517155048402"></p>
<p>两种方法参数更新的式子是一样的，但是函数的输出和目标不一样</p>
<h3><span id="使用不同的损失函数">使用不同的损失函数</span></h3><p>如果我们使用的损失函数是Square Error</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220517155655685.png" alt="image-20220517155655685"></p>
<p>会出现一些问题</p>
<ul>
<li>当我们的输出接近目标时，导数接近0</li>
<li>当我们的输出远离目标时，导数接近0</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220517160124003.png" alt="image-20220517160124003"></p>
<p>使用Cross Entropy时，我们可以快速地朝目标地方向走，但是Square Error则会比较平坦</p>
<h3><span id="离散模型和生成模型的对比">离散模型和生成模型的对比</span></h3><ul>
<li>离散模型：直接寻找参数w和b</li>
<li>生成模型：学习到一个概率分布</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220517183223513.png" alt="image-20220517183223513"></p>
<p>相同的函数集，相同的数据集，但是会找到不同的函数</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220517183346790.png" alt="image-20220517183346790"></p>
<p>一个例子  使用Naive Bayes</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220517183602952.png" alt="image-20220517183602952"></p>
<h4><span id="生成模型的优点">生成模型的优点</span></h4><ul>
<li>在概率分布的假设下，需要的训练数据更少</li>
<li>在概率分布的假设下，对噪声更鲁棒</li>
<li>先验和类依赖概率可以从不同的来源估计</li>
</ul>
<h3><span id="多分类">多分类</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220517192906177.png" alt="image-20220517192906177"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220517193001751.png" alt="image-20220517193001751"></p>
<h3><span id="逻辑回归的局限性">逻辑回归的局限性</span></h3><p>逻辑回归是线性的分类模型</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220517193400452.png" alt="image-20220517193400452"></p>
<h1><span id="深度学习">深度学习</span></h1><h2><span id="基本步骤">基本步骤</span></h2><h3><span id="neural-network">Neural Network</span></h3><ul>
<li>不同的联系会指向不同的网络结构</li>
<li>网络的参数$\theta$：神经元中所有的权重(weights)和偏差(biases)</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220518140921917.png" alt="image-20220518140921917"></p>
<ul>
<li>给定网络结构，定义一个函数集</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220518141018771.png" alt="image-20220518141018771"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220518141308293.png" alt="image-20220518141308293"></p>
<p>矩阵的操作</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220518141357729.png" alt="image-20220518141357729"></p>
<p>输出层</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220518141438154.png" alt="image-20220518141438154" style="zoom:80%;"></p>
<h3><span id="goodness-of-function">goodness of function</span></h3><ul>
<li>定义一个损失函数，找到一个函数，能够使损失函数的值最小化，起始也就是找到合适的参数</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220518141615446.png" alt="image-20220518141615446" style="zoom:80%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220518141654644.png" alt="image-20220518141654644" style="zoom:80%;"></p>
<h3><span id="pick-the-best-function">pick the best function</span></h3><ul>
<li>使用梯度下降，来寻找能让损失函数降到最小的参数</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220518142038027.png" alt="yi"></p>
<h2><span id="深度学习的一些建议">深度学习的一些建议</span></h2><ul>
<li>在训练集上表现不好</li>
<li>在训练集上表现好，测试集上表现不好<ul>
<li>可能是Overfitting（过拟合）</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220518143549559.png" alt="image-20220518143549559"></p>
<h4><span id="各自的解决方法">各自的解决方法</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220518143818728.png" alt="image-20220518143818728"></p>
<h4><span id="新的激活函数">新的激活函数</span></h4><h5><span id="梯度消失问题">梯度消失问题</span></h5><ul>
<li>浅层的梯度较小，学习非常慢，几乎是随机的</li>
<li>与此同时，深层的梯度很大，学习很快，几乎要收敛了</li>
<li>这有可能是激活函数的原因，如图</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220518144726395.png" alt="image-20220518144726395"></p>
<ul>
<li>因为链式法则不断乘小于1的数，导致梯度非常小的现象</li>
<li>sigmoid函数的导数，是在0~0.25这个区间的，这意味着，当网络层数越深，那么对于前面几层的梯度，就会非常的小</li>
</ul>
<h5><span id="使用relu">使用ReLU</span></h5><p>ReLU：Rectified Linear Unit</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220518144918960.png" alt="image-20220518144918960"></p>
<ul>
<li>优点<ul>
<li>计算快</li>
<li>解决消失梯度问题</li>
</ul>
</li>
</ul>
<p>ReLU的变种</p>
<ul>
<li>Leaky ReLU</li>
<li>Parametric ReLU</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220518145133327.png" alt="image-20220518145133327" style="zoom:80%;"></p>
<h5><span id="使用maxout">使用Maxout</span></h5><p>ReLU是Maxout的一种特殊例子</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220518145222845.png" alt="image-20220518145222845"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220518145258066.png" alt="image-20220518145258066"></p>
<h4><span id="adaptive-learning-rate-可调整的学习率">Adaptive Learning Rate 可调整的学习率</span></h4><p>详情见L2</p>
<ul>
<li>RMSProp</li>
<li>Momentum</li>
<li>Adam</li>
</ul>
<h4><span id="early-stopping">Early stopping</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220518145535753.png" alt="image-20220518145535753"></p>
<h4><span id="regularization-正则化">Regularization 正则化</span></h4><ul>
<li>对参数进行惩罚—权重衰退<ul>
<li>防止过拟合</li>
</ul>
</li>
<li>L2 regularization</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220518151311013.png" alt="image-20220518151311013" style="zoom:80%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220518151336435.png" alt="image-20220518151336435" style="zoom:80%;"></p>
<ul>
<li>L1 regularization<script type="math/tex; mode=display">
\theta = |w_1| + |w_2| + \dots</script></li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220518151459336.png" alt="image-20220518151459336"></p>
<h4><span id="dropout">Dropout</span></h4><ul>
<li>在每一层丢弃一些神经元</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/image-20220518151817778.png" alt="image-20220518151817778"></p>
<ul>
<li>改变了网络的结构</li>
</ul>
<h2><span id="pytorch实战部分">pytorch实战部分</span></h2><h4><span id="数据集">数据集</span></h4><ul>
<li>pytorch中主要使用的是Dataset和DataLoader</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset, DataLoader</span><br></pre></td></tr></table></figure>
<ul>
<li>我们可以构建自己处理数据集的类(<strong>继承Dataset</strong>)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据集处理及读取</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">COVID19Dataset</span>(<span class="params">Dataset</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x, y=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> y <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.y = y</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.y = torch.FloatTensor(y)</span><br><span class="line">        self.x = torch.FloatTensor(x)</span><br><span class="line">    <span class="comment"># 这一部分读入并处理数据</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span>(<span class="params">self, idx</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.y <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> self.x[idx]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.x[idx], self.y[idx]</span><br><span class="line">    <span class="comment"># 这一部分提供为DataLoader返回一个数据的函数</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.x)</span><br><span class="line">    <span class="comment"># 这一部分为DataLoader返回数据集的长度</span></span><br><span class="line">    </span><br><span class="line">train_dataset = COVID19Dataset(x_train, y_train)</span><br></pre></td></tr></table></figure>
<ul>
<li>DataLoader可以构建一批一批的数据集合，批量加载数据</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据集的批量读取器</span></span><br><span class="line">train_loader = DataLoader(train_dataset, batch_size=<span class="number">32</span>,</span><br><span class="line">                           shuffle=<span class="literal">True</span>, pin_memory=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<h4><span id="模型结构">模型结构</span></h4><ul>
<li>pytorch中主要使用的是torch.nn</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br></pre></td></tr></table></figure>
<ul>
<li>我们可以构建自己模型结构的类(<strong>继承nn.Module</strong>)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 模型结构</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">My_model</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, input_dim</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(My_model, self).__init__()</span><br><span class="line">        self.layer1 = nn.Linear(input_dim, <span class="number">128</span>)</span><br><span class="line">        self.layer2 = nn.ReLU()</span><br><span class="line">        self.layer3 = nn.Linear(<span class="number">128</span>, <span class="number">32</span>)</span><br><span class="line">        self.layer4 = nn.ReLU()</span><br><span class="line">        self.layer5 = nn.Linear(<span class="number">32</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 模型的layers</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        out = self.layer1(x)</span><br><span class="line">        out = self.layer2(out)</span><br><span class="line">        out = self.layer3(out)</span><br><span class="line">        out = self.layer4(out)</span><br><span class="line">        out = self.layer5(out)</span><br><span class="line">        out = out.squeeze(<span class="number">1</span>) <span class="comment"># (B, 1) -&gt; (B)</span></span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line">   	<span class="comment"># 正向传播</span></span><br></pre></td></tr></table></figure>
<h4><span id="损失函数">损失函数</span></h4><ul>
<li>使用平均方差</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">criterion = nn.MSELoss(reduction=<span class="string">&#x27;mean&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h4><span id="优化器">优化器</span></h4><ul>
<li>更新参数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">optimizer = torch.optim.SGD(model.parameters(), lr=<span class="number">1e-5</span>, momentum=<span class="number">0.9</span>)</span><br></pre></td></tr></table></figure>
<h4><span id="训练过程">训练过程</span></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 训练过程</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3000</span>):</span><br><span class="line">    model.train()</span><br><span class="line">    train_pbar = tqdm(train_loader, position=<span class="number">0</span>, leave=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> x,y <span class="keyword">in</span> train_pbar:</span><br><span class="line">        pred = model(x)</span><br><span class="line">        loss = criterion(pred, y)</span><br><span class="line">        loss.backward() <span class="comment"># 计算梯度</span></span><br><span class="line">        optimizer.step() <span class="comment"># 更新参数</span></span><br><span class="line">        optimizer.zero_grad() <span class="comment"># 清零梯度</span></span><br></pre></td></tr></table></figure>
<h4><span id="简单的保存数据为csv文件">简单的保存数据为csv文件</span></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_in_csv</span>(<span class="params">file,res</span>):</span></span><br><span class="line">    file_csv = codecs.<span class="built_in">open</span>(file, <span class="string">&#x27;w+&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    writer = csv.writer(file_csv)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> res:</span><br><span class="line">        writer.writerow(x)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;保存成功&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>深度学习</category>
        <category>李宏毅</category>
      </categories>
      <tags>
        <tag>DeepLearning</tag>
      </tags>
  </entry>
  <entry>
    <title>李宏毅深度学习L4</title>
    <url>/2022/06/20/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0L4/</url>
    <content><![CDATA[<h2><span id="gan">GAN</span></h2><h4><span id="将网络作为生成器generator">将网络作为生成器(Generator)</span></h4><ul>
<li>给定一个分布，从分布sample出一些样本</li>
<li>网络作为generator，可以接收sample出来的样本和输入x，学习到一个复杂的分布，输出y。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201522909.png" alt="image-20220620152245797" style="zoom:80%;"></p>
<h5><span id="为什么需要一个分布">为什么需要一个分布</span></h5><p>以一个Video Prediction为例子</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201525726.png" alt="image-20220620152519633" style="zoom:80%;"></p>
<ul>
<li>给定之前的帧，网络需要输出下一帧</li>
<li>但是这样会出现一个问题，网络采用一个多分类问题的解决形式时，输出可能会结合多种可能性，生成一种包含所有情况，只是概率大小不同的图<ul>
<li>在这个例子中，你会看到小豆子分裂，一个往左，一个往右，网络没办法只选定一种可能</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201528854.png" alt="image-20220620152809649" style="zoom:80%;"></p>
<ul>
<li>当给定一个分布sample出来的数值，网络便可以学习到一个分布，进行一个特定的选择</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201545752.png" alt="image-20220620154550641" style="zoom:80%;"></p>
<h4><span id="所有种类的gan">所有种类的GAN</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201555147.png" alt="image-20220620155516033" style="zoom:80%;"></p>
<p><a href="https://github.com/hindupuravinash/the-gan-zoo">https://github.com/hindupuravinash/the-gan-zoo</a></p>
<h4><span id="gan的结构">GAN的结构</span></h4><ul>
<li>GAN包括Generator和Discriminator两个结构</li>
<li>Generator根据输入和sample来在一个复杂的分布中sample出一个输出</li>
<li>Discriminator对于给定的输入，进行打分，判断其是否为真实的</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201558718.png" alt="image-20220620155834504" style="zoom:80%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201558214.png" alt="image-20220620155843019" style="zoom:80%;"></p>
<h4><span id="gan的思想">GAN的思想</span></h4><ul>
<li>Generator想办法生成逼真的图片来骗过Discriminator</li>
<li>Discriminator想办法辨别出真假图片</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201559238.png" alt="image-20220620155944071" style="zoom:80%;"></p>
<h4><span id="gan的算法">GAN的算法</span></h4><ol>
<li>初始化generator和discriminator</li>
<li>在每一个训练步骤中</li>
</ol>
<h5><span id="step1">Step1</span></h5><ul>
<li>固定generator G，更新discriminator D</li>
<li>Discriminator学习给真实的图片高分，给生成的图片低分，即学会去分辨真假图片</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201608509.png" alt="image-20220620160847368" style="zoom:80%;"></p>
<h5><span id="step2">Step2</span></h5><ul>
<li>固定discrimator D，更新generator G</li>
<li>Generator要学会去欺骗discriminator</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201611928.png" alt="image-20220620161108827" style="zoom:80%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201611665.png" alt="image-20220620161157451" style="zoom:80%;"></p>
<h4><span id="gan背后的理论">GAN背后的理论</span></h4><h5><span id="目标">目标</span></h5><ul>
<li>让Generator生成的分布尽可能向数据的分布靠近</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201616856.png" alt="image-20220620161655751" style="zoom:80%;"></p>
<p>即</p>
<script type="math/tex; mode=display">
G^* = arg\min_{G}Div(P_G,P_{data})</script><p>这里的$Div(P_G,P_{data})$是指两个分布之间的divergence(散度)</p>
<h6><span id="sampling">Sampling</span></h6><p>尽管我们不能确切地知道$P_G$和$P_{data}$的分布，但是我们从两个分布中sample出一些样本</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201620547.png" alt="image-20220620162034425" style="zoom:80%;"></p>
<h5><span id="discriminator">Discriminator</span></h5><p>这里的Discriminator是一个二分类的分类器</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201621874.png" alt="image-20220620162143764" style="zoom:80%;"></p>
<p><strong>Training</strong>：</p>
<script type="math/tex; mode=display">
D^* = arg\max_{D}V(D,G)</script><p>其实后面的$\max_DV(D,G)$相当于一个JS散度</p>
<p><strong>Objective Function</strong>:</p>
<script type="math/tex; mode=display">
V(G,D)=E_{y\sim P_{data}}[logD(y)]+E_{y\sim P_G}[log(1-D(y))]</script><p>其中，我们希望$logD(y)$能够尽可能地大，这样能够认出真实的图片；$log(1-D(y))$能够尽可能地小，这样可以辨别出生成地图片</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201627838.png" alt="image-20220620162722742" style="zoom:80%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201629793.png" alt="image-20220620162945694" style="zoom:80%;"></p>
<p>我们可以将Generator中需要的散度换成Discriminator的目标函数，联合训练</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201630402.png" alt="image-20220620163033264" style="zoom:80%;"></p>
<p>其他的一些divergence</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201630227.png" alt="image-20220620163058118" style="zoom:80%;"></p>
<h4><span id="tips-for-gan">Tips for GAN</span></h4><h5><span id="js-divergence并不适合gan">JS divergence并不适合GAN</span></h5><h6><span id="在大部分情况下p_g和p_data并不是重叠的overlapped">在大部分情况下，$P_G$和$P_{data}$并不是重叠的(overlapped)</span></h6><ul>
<li>两者都是高维空间在低维空间的流形(manifold)，重叠部分可以忽略</li>
<li>取样问题，尽管两者之间有重叠但是取样不够多的话</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201845025.png" alt="image-20220620184554919" style="zoom:80%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201846683.png" alt="image-20220620184601523" style="zoom:80%;"></p>
<h6><span id="js-divergence的问题">JS divergence的问题</span></h6><ul>
<li>当两个分布不重叠的话，JS divergence总是$log_2$</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201851921.png" alt="image-20220620185159789" style="zoom:80%;"></p>
<p>这样会出现一个很严重的问题，当两个分布不重叠的时候，discriminator总是会实现百分百精度的分类，但这样GAN的训练就无法有一个明确的方向去优化了，因为只要不重叠，都是一样差的</p>
<h5><span id="wasserstein-distance">Wasserstein distance</span></h5><p>Wasserstein distance可以用来衡量一个分布变换到目标分布的<strong>最小距离</strong></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201859084.png" alt="image-20220620185906943" style="zoom:80%;"></p>
<p>这样GAN的优化就有一个明确的方向</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201901989.png" alt="image-20220620190153844" style="zoom:80%;"></p>
<h4><span id="wgan">WGAN</span></h4><h5><span id="使用wasserstein-distance来优化p_data和p_g">使用Wasserstein distance来优化$P_{data}$和$P_G$</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201905869.png" alt="image-20220620190549765" style="zoom:80%;"></p>
<p>如果没有D函数光滑的限制，D的训练将不会收敛</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201909399.png" alt="image-20220620190901300" style="zoom:80%;"></p>
<ul>
<li>如上图所示，生成分布和数据分布没有重叠，discriminator可能会不断往无穷处进行打分，来更好地区分两者，无法收敛</li>
<li>让discriminator的函数保持光滑可以强制$D(y)$位于正无穷和负无穷之间</li>
</ul>
<h6><span id="不同的做法">不同的做法</span></h6><ul>
<li><p>Origin WGAN -&gt;  Weight</p>
<ul>
<li><p>强制参数w位于c和-c之间</p>
</li>
<li><p>参数更新后，如果$w&gt;c$，$w = c$；如果$w &lt; -c$，$w = -c$</p>
</li>
</ul>
</li>
<li><p>Improved WGAN -&gt; Gradient Penalty 梯度惩罚</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201919203.png" alt="image-20220620191900047" style="zoom:80%;"></p>
<ul>
<li>Spectral Normalization-&gt;Keep gradient norm  smaller than 1 everywhere</li>
</ul>
<p>GAN仍然很难训练，Generator和Discriminator需要棋逢对手，不能有一方独大</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201921403.png" alt="image-20220620192120275" style="zoom:80%;"></p>
<h4><span id="用于序列生成的gan">用于序列生成的GAN</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201922723.png" alt="image-20220620192202569" style="zoom:80%;"></p>
<ul>
<li>通常，generator是从一个从其他方法中学习的模型微调(fine-tuned)得到的</li>
<li>但是，通过足够的超参数调整和提示，ScarchGAN可以从头开始训练</li>
</ul>
]]></content>
      <categories>
        <category>深度学习</category>
        <category>李宏毅</category>
      </categories>
      <tags>
        <tag>DeepLearning</tag>
      </tags>
  </entry>
  <entry>
    <title>李宏毅深度学习L2</title>
    <url>/2022/05/07/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0L2/</url>
    <content><![CDATA[<h2><span id="机器学习的任务攻略">机器学习的任务攻略</span></h2><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220504153801254.png" alt="image-20220504153801254" style="zoom:80%;"></p>
<p>对于我们的模型，首先要保证训练损失在一个可接受的范围，才去考虑测试集损失的问题</p>
<h3><span id="根据训练损失过大做出的模型调整">根据训练损失过大做出的模型调整</span></h3><p>当查看我们的训练损失过大的时候，需要调整我们的模型，有几个方向可以考虑</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220504153553382.png" alt="image-20220504153553382" style="zoom:80%;"></p>
<h4><span id="model-bias-模型偏差">Model bias 模型偏差</span></h4><h5><span id="问题">问题</span></h5><p>我们的模型可能过于简单，模型的参数取值范围内只能构建一个比较小的函数集，没办法满足我们的需求，也就是模型的弹性不够</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220504153845905.png" alt="image-20220504153845905"></p>
<p>我们的最优解只是<strong>小范围函数集内的最优解</strong></p>
<h5><span id="解决方案">解决方案</span></h5><p>重新设计模型，让它更加具有弹性，也就是范围更大</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220504154038638.png" alt="image-20220504154038638"></p>
<h4><span id="optimization-issue-优化问题">Optimization Issue 优化问题</span></h4><h5><span id="问题">问题</span></h5><p>我们的模型使用优化方法是梯度下降，但是模型只是找到局部的最低点便停下来了</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220504154429868.png" alt="image-20220504154429868"></p>
<h5><span id="判断是model-bias或者是optimization-issue">判断是Model Bias或者是Optimization Issue</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220504155047799.png" alt="image-20220504155047799"></p>
<ul>
<li><p>这并不是过拟合，因为在训练的数据集上，深层的损失也比浅层的损失大</p>
</li>
<li><p>在构建模型的过程中，我们可以先尝试浅层的模型，它们比较容易优化，再尝试比较深层的模型</p>
</li>
<li>如果深层的模型的损失比浅层的损失要大，说明是优化问题</li>
</ul>
<h3><span id="根据测试集损失过大做出的模型调整">根据测试集损失过大做出的模型调整</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220504155612581.png" alt="image-20220504155612581" style="zoom:80%;"></p>
<h4><span id="overfitting-过拟合">Overfitting 过拟合</span></h4><p>在训练损失小，测试集损失很大的情况下，就是<strong>overfitting（过拟合）</strong>发生了</p>
<h5><span id="一个极端的例子">一个极端的例子</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220504155842513.png" alt="image-20220504155842513"></p>
<h5><span id="分析">分析</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220504160942222.png" alt="image-20220504160942222"></p>
<p>我们的数据是来自一个分布的，模型得到的函数会尝试根据所给的分布上的训练点集去拟合这个分布</p>
<h5><span id="解决">解决</span></h5><p><strong>More training data 更多的训练数据集</strong></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220504161254749.png" alt="image-20220504161254749"></p>
<p><strong>Data augmentation 数据增强</strong></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220504161259428.png" alt="image-20220504161259428"></p>
<p>要合理，不要让模型学到奇怪的特征</p>
<p><strong>constrained model 限制模型</strong></p>
<p>我们知道数据的分布是二次函数时，可以限制模型为二次函数，得到比较好的结果</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220504161630132.png" alt="image-20220504161630132"></p>
<p><strong>方法：</strong></p>
<ol>
<li>更少的参数，或者共享参数</li>
<li>更少的features</li>
<li>Early stopping</li>
<li>Regularization</li>
<li>Dropout</li>
</ol>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220504161823295.png" alt="image-20220504161823295" style="zoom: 80%;"></p>
<p>CNN限制比较大，针对图片和影像</p>
<p>但是也不能给模型太大的限制</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220504162049166.png" alt="image-20220504162049166"></p>
<p><strong>偏差-复杂度的权衡</strong></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220504183943324.png" alt="image-20220504183943324"></p>
<h5><span id="validation-set">Validation set</span></h5><p><strong>起因</strong></p>
<p>Testing Set 有公开的和保密的，在训练模型时，大家会拿公开的Testing Set跑模型看结果怎么样，然后来调整模型，但是因为公开的Testing Set可以多次使用，可能会使你的模型对于公开的Testing Set更好地拟合，但是放到保密的Testing Set会得到比较糟糕的结果</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220504204638614.png" alt="image-20220504204638614"></p>
<p><strong>解决</strong></p>
<p>可以将用于训练模型的数据Training Set分为两部分，即Training Set和Validation Set，在Training Set上跑了之后，用Validation Set作为验证来调整参数，其实它相当于前面公开的Testing Set，然后再用来跑公开的Testing Set，就是说不要去过度地根据公开的Testing Set去调整模型，这样，用来跑保密的Testing Set结果基本能够跟公开的保持一致</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220504205118318.png" alt="image-20220504205118318"></p>
<p><strong>如何划分Training Set</strong></p>
<p>方法：N fold Cross Validation</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220504205157651.png" alt="image-20220504205157651"></p>
<p>分成n段，轮流当Validation Set来进行训练</p>
<h4><span id="mismatching-不一致">Mismatching 不一致</span></h4><p>训练集和测试集的分布是不一致的</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220504205651548.png" alt="image-20220504205651548"></p>
<h2><span id="critical-point">Critical Point</span></h2><p>当梯度变得十分小的时候，Optimization会变得十分困难，这时候有两种情况：</p>
<ul>
<li><strong>local minima</strong>  局部最小值</li>
<li><strong>saddle point</strong>  鞍点</li>
</ul>
<p>它们统称为<strong>critical point</strong></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220505204351618.png" alt="image-20220505204351618"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220505204418006.png" alt="image-20220505204418006"></p>
<h4><span id="数学推导">数学推导</span></h4><h5><span id="泰勒近似">泰勒近似</span></h5><p>当$\theta=\theta^{`}$时，根据泰勒公式</p>
<script type="math/tex; mode=display">
L(\theta) \approx L(\theta^{`}) + (\theta - \theta^{`})^{T}g + \frac{1}{2}(\theta-\theta^{`})^{T}H(\theta-\theta^{`})</script><p>相当于函数泰勒公式中，f(x)在$x_1$处</p>
<script type="math/tex; mode=display">
f(x) = f(x_1) + \frac{f^{`}(x_1)}{1!} (x-x_1) + \frac{f^{``}(x_1)}{2!}(x-x_1)^2 + o((x-x_1)^2)</script><p>其中，</p>
<ul>
<li><p>g：Gradient(梯度) （下图中绿色部分）</p>
<ul>
<li><p>是一个向量</p>
</li>
<li><script type="math/tex; mode=display">
g = \nabla L(\theta^{`}) \\
g_i = \frac{\partial L(\theta^{`})}{\partial\theta_i}</script></li>
<li><p>$g_i$是损失函数对某一个参数的梯度</p>
</li>
</ul>
</li>
<li><p>H：Hessian（下图中红色部分）</p>
<ul>
<li><p>是一个矩阵</p>
</li>
<li><script type="math/tex; mode=display">
H_{ij} = \frac{\partial^{2}}{\partial\theta_i\partial\theta_j}L(\theta^{`})</script></li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220505210657956.png" alt="image-20220505210657956"></p>
<p>而在Critical point上，g的部分等于0</p>
<script type="math/tex; mode=display">
L(\theta) \approx L(\theta^{`}) + \frac{1}{2}(\theta-\theta^`)^TH(\theta - \theta^`)</script><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220505224358808.png" alt="image-20220505224358808"></p>
<p>有三种情况：</p>
<ul>
<li>Local minima</li>
<li>Local maxima</li>
<li>Saddle point</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220505224711954.png" alt="image-20220505224711954"></p>
<h6><span id="local-minima">Local minima</span></h6><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220506100740910.png" alt="image-20220506100740910"></p>
<p>所有的特征值是正的</p>
<h6><span id="local-maxima">Local maxima</span></h6><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220506100014626.png" alt="image-20220506100014626"></p>
<p>所有的特征值是负的</p>
<h6><span id="saddle-point">Saddle point</span></h6><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220506100151818.png" alt="image-20220506100151818"></p>
<p>特征值有正有负</p>
<h4><span id="一个例子">一个例子</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220506100545124.png" alt="image-20220506100545124"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220506100629611.png" alt="image-20220506100629611"></p>
<ul>
<li>最优点(L最小)在(1, 1)和(-1, -1)这两个位置上</li>
</ul>
<p><strong>损失函数</strong></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220506101058647.png" alt="image-20220506101058647"></p>
<p>在(0, 0)处，</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20220506101135667.png" alt="image-20220506101135667"></p>
<p>​    </p>
<h2><span id="宝可梦-数码宝贝分类器">宝可梦、数码宝贝分类器</span></h2><ul>
<li>根据宝可梦和数码宝贝原画线条数目的多少可以来进行区分</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220523152218349.png" alt="image-20220523152218349"></p>
<ul>
<li>我们可以找到一个阈值h大于这个值为数码宝贝，小于这个值为宝可梦</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220523152357920.png" alt="image-20220523152357920"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220523152444023.png" alt="image-20220523152444023"></p>
<p>$H$是指候选函数的数目，即这个模型的复杂度，能够表达的函数集的大小</p>
<h3><span id="损失函数">损失函数</span></h3><p>使用的是错误率，也可以使用交叉熵</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220523153202022.png" alt="image-20220523153202022" style="zoom:80%;"></p>
<h3><span id="数据集和训练">数据集和训练</span></h3><ul>
<li>数据集的形式</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220523153033261.png" alt="image-20220523153033261" style="zoom:80%;"></p>
<ul>
<li>如果我们收集了所有的宝可梦和数码宝贝(记为$D_{all}$)，我们可以找到最好的阈值(记为$h^{all}$)，即</li>
</ul>
<script type="math/tex; mode=display">
h^{all} = arg \mathop{min}_{h}(h,D_{all})</script><ul>
<li>但现实是，我们一般只能从所有数据中获取到一部分数据，将其作为训练数据(记为$D_{train}$)(独立且相同的分布)</li>
</ul>
<script type="math/tex; mode=display">
D_{train} = {(x^1, \hat{y}^1), (x^2, \hat{y}^2),\cdots (x^N, \hat{y}^N)} \\ \\
h^{train} = arg \mathop{min}_{h}(h, D_{train})</script><ul>
<li>我们希望的是训练得到的阈值$h^{train}$能够在整体的表现上能够接近$h^{all}$，即</li>
</ul>
<script type="math/tex; mode=display">
L(h^{train}, D_{all}) \rightarrow L(h^{all}, D_{all})</script><ul>
<li>从所有的数据中我们得到$h^{all}=4824$</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220523191044210.png" alt="image-20220523191044210" style="zoom:80%;"></p>
<ul>
<li>随机采样200个数据样本作为$D_{train1}$，得到$h_{train1}$</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220523192005933.png" alt="image-20220523192005933" style="zoom:80%;"></p>
<p>在总体上数据表现较好</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220523192033944.png" alt="image-20220523192033944" style="zoom:80%;"></p>
<ul>
<li>再随机采样200个数据样本作为$D_{train2}$，得到$h_{train2}$</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220523192406050.png" alt="image-20220523192406050" style="zoom:80%;"></p>
<p>总体表现较差</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220523192511072.png" alt="image-20220523192511072" style="zoom:80%;"></p>
<ul>
<li><p>我们想要的是在训练集上训练得到的$h^{train}$能够在总体数据上表现能够接近理想中的$h_{all}$</p>
<script type="math/tex; mode=display">
L(h^{train}, D_{all}) \rightarrow L(h^{all}, D_{all})</script><p>可以转化为</p>
<script type="math/tex; mode=display">
L(h^{train}, D_{all}) - L(h^{all}, D_{all}) \le \delta</script></li>
<li><p>那么$D_{train}$要满足 </p>
<script type="math/tex; mode=display">
\forall h \in H, |L(h, D_{train}) - L(h, D_{all})| \le \delta/2</script><p>上述公式的推导</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220523201033185.png" alt="image-20220523201033185" style="zoom:80%;"></p>
</li>
<li><p>我们想要的是好的$D_{train}$，即</p>
</li>
</ul>
<script type="math/tex; mode=display">
\forall h \in H, |L(h, D_{train}) - L(h, D_{all})| \le \epsilon \\
\epsilon = \delta/2</script><h4><span id="训练失败的概率">训练失败的概率</span></h4><ul>
<li>每一个点都是一个训练集</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220523201954527.png" alt="image-20220523201954527" style="zoom:80%;"></p>
<ul>
<li>如果一个训练集$D_{train}$是坏的，至少有一个$h$会让</li>
</ul>
<script type="math/tex; mode=display">
 |L(h, D_{train}) - L(h, D_{all})| \gt \epsilon</script><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220523202244436.png" alt="image-20220523202244436" style="zoom:80%;"></p>
<script type="math/tex; mode=display">
P(D_{train}\  is \ bad) = \mathop\cup_{h\in H}P(D_{train} \ is \ bad \ due \ to \ h) \\
\le \mathop\sum_{h\in H}P(D_{train} \ is \ bad \ due \ to \ h)</script><p>这里概率加起来是会大于1的，那说明会经常发生</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220523203031249.png" alt="image-20220523203031249" style="zoom: 67%;"></p>
<p>可以推导出</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220523203134838.png" alt="image-20220523203134838" style="zoom:80%;"></p>
<ul>
<li><p>怎么使$P(D_{train} \ is \ bad)$变小</p>
<ul>
<li>更大的N和更小的H</li>
<li>即更大的样本容量和更加简单或者说限制比较多的模型</li>
</ul>
</li>
<li><p>更大的N</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220523203653408.png" alt="image-20220523203653408" style="zoom:80%;"></p>
<p>样本容量越大，越能够更好地接近总体的分布情况</p>
<ul>
<li>更小的H</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220523203754428.png" alt="image-20220523203754428"></p>
<p>H变小了，那么参数h的数目就会变少，一些表现较差的参数也会被筛除</p>
<ul>
<li>一个例子</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220523204246299.png" alt="image-20220523204246299" style="zoom: 67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220523204544385.png" alt="image-20220523204544385" style="zoom:67%;"></p>
<ul>
<li>那如果模型的参数是连续的，该怎么选择<ul>
<li>计算机内的一切都是离散的</li>
</ul>
</li>
<li>如果使用更小的H就可以获取好的结果，那么为什么不直接使用很小的H</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220523204832373.png" alt="image-20220523204832373"></p>
<p>使用很小的H，我们的模型可能在数据上表现就是很差，去接近理想状态也没有意义</p>
<ul>
<li>陷入了两难的境地</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220523205008774.png" alt="image-20220523205008774" style="zoom:80%;"></p>
<p>可以使用深度学习</p>
<h2><span id="训练的建议-batch和momentum">训练的建议 — Batch和Momentum</span></h2><h3><span id="batch-批量">Batch 批量</span></h3><h4><span id="批量优化">批量优化</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220523205739344.png" alt="image-20220523205739344"></p>
<p>将一个数据集分成多个batch，可以多次更新参数</p>
<h5><span id="小的batch和大的batch">小的batch和大的batch</span></h5><p>现在我们有20个样本(N=20)</p>
<ul>
<li>batch size = N = 20，即整个数据集</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220523210749299.png" alt="image-20220523210749299"></p>
<ul>
<li>batch size = 1</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220523210803041.png" alt="image-20220523210803041"></p>
<ul>
<li>大的batch一般不需要更长的时间来计算梯度，除非batch实在太大了</li>
<li>小的batch需要更多的时间，在每一个epoch中计算梯度，即需要更多的时间来查看整个数据集</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220523210903339.png" alt="image-20220523210903339" style="zoom:80%;"></p>
<ul>
<li>实例</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220524101005244.png" alt="image-20220524101005244"></p>
<p>小的batch有着更好的表现，而大的batch可能会导致Optimizaiton Fails    </p>
<h3><span id="momentum">Momentum</span></h3><ul>
<li>让梯度下降保持一个动量，可以跨过平坦的Local minima</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220524102423192.png" alt="image-20220524102423192" style="zoom:80%;"></p>
<ul>
<li>当前参数的变化不仅取决当前的梯度，还取决于之前的变化</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220524102657886.png" alt="image-20220524102657886"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220524103016126.png" alt="image-20220524103016126"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220524103055785.png" alt="image-20220524103055785"></p>
<p>在损失函数到达一个比较平缓的梯度区间时，可以因为之前向右移动的趋势，而向右边移动</p>
<h3><span id="小结">小结</span></h3><p>小的batch size和Momentum可以帮助逃离critical points</p>
<h2><span id="optimization的总结">Optimization的总结</span></h2><p>一些符号标记</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220524104512668.png" alt="image-20220524104512668" style="zoom:80%;"></p>
<h3><span id="sgd">SGD</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220524104702145.png" alt="image-20220524104702145"></p>
<h3><span id="sgd-with-momentum">SGD with Momentum</span></h3><script type="math/tex; mode=display">
\theta_t = \theta_{t-1} - \eta m_t \\
m_t = \beta_1m_{t-1}+(1-\beta_1)g_{t-1}</script><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220524143839566.png" alt="image-20220524143839566"></p>
<h3><span id="adagrad">Adagrad</span></h3><script type="math/tex; mode=display">
\theta_t = \theta_{t-1} - \frac{\eta}{\sqrt{\sum^{t-1}_{i=0}(g_i)^2}}g_{t-1}</script><p>这种会累积之前所有的梯度，遇到一些需要你Learning Rate大的情况处理不了(如RMSProp中的图)</p>
<h3><span id="rmsprop">RMSProp</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220524144314440.png" alt="image-20220524144314440"></p>
<script type="math/tex; mode=display">
\theta_t = \theta_{t-1} - \frac{\eta}{\sqrt{v_t}}g_{t-1} \\
v_1 = g^2_0 \\
v_t = \alpha v_{t-1} + (1-\alpha)(g_{t-1})^2</script><h3><span id="adam">Adam</span></h3><ul>
<li>是SGDM和RMSProp的结合</li>
</ul>
<script type="math/tex; mode=display">
\theta_t = \theta_{t-1} - \frac{\eta}{\sqrt{\hat{v_t}}+\epsilon}\hat{m_t}</script><script type="math/tex; mode=display">
\hat{m_t} = \frac{m_t}{1-\beta_1^t} \\
\hat{v_t} = \frac{v_t}{1-\beta_2^t}</script><script type="math/tex; mode=display">
\beta_1 = 0.9 \\
\beta_2 = 0.999 \\
\epsilon = 10^{-8}</script><h3><span id="adam和sgdm的对比">Adam和SGDM的对比</span></h3><ul>
<li>Adam<ul>
<li>训练快速</li>
<li>较大的差别（训练集和测试集）</li>
<li>不稳定</li>
</ul>
</li>
<li>SGDM<ul>
<li>稳定</li>
<li>很小的差别</li>
<li>更好的收敛</li>
</ul>
</li>
</ul>
<h2><span id="深度学习">深度学习</span></h2><p>我们想要的是</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220524195845107.png" alt="image-20220524195845107"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220524200558865.png" alt="image-20220524200558865"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220524200643266.png" alt="image-20220524200643266"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220524200714687.png" alt="image-20220524200714687"></p>
<p>深度和宽度的对比</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/image-20220524200735691.png" alt="image-20220524200735691"></p>
]]></content>
      <categories>
        <category>深度学习</category>
        <category>李宏毅</category>
      </categories>
      <tags>
        <tag>DeepLearning</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式--1</title>
    <url>/2021/09/10/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-1/</url>
    <content><![CDATA[<ul>
<li>正则表达式<ul>
<li>Regular Expression（regex）</li>
<li>是一种字符串匹配的模式(pattern)，更像是一种逻辑公式</li>
</ul>
</li>
</ul>
<span id="more"></span>
<ul>
<li>可以用来检查一个串是否含有某种子串<br>配的子串替换<ul>
<li>从某个串中取出符合某个条件的子串</li>
</ul>
</li>
</ul>
<ul>
<li><p>语法</p>
<ul>
<li>java中一些特殊的地方：<ul>
<li>在Java中，\\表示：我要插入一个正则表达式的反斜线，所有其后的字符具有特殊的意义</li>
<li>在其他语言中，\\ 表示：我想要在正则表达式中插入一个普通的（字面上的）反斜杠，请不要给它任何特殊的意义。</li>
<li>在 Java 中正则表达式中则需要有两个反斜杠才能被解析为其他语言中的转义作用</li>
<li>简单的理解在 Java 的正则表达式中，两个 \\ 代表其他语言中的一个 \，这也就是为什么表示一位数字的正则表达式是<code>\\d</code>，而<strong>表示一个普通的反斜杠是 <code>\\\\</code></strong><ul>
<li><code>\\\\</code>预编译会变成<code>\\</code>，而这个在正则表达式中就是一个<code>\</code>的意思</li>
</ul>
</li>
</ul>
</li>
<li><p>由两种字符构成：</p>
<ul>
<li><p>元字符（特殊字符）：表示正则表达式功能的最小单元，如*^$\等</p>
<ul>
<li>$：匹配输入字符串的结尾位置<ul>
<li>如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\n’ 或 ‘\r’。要匹配 $ 字符本身，请使用 $。</li>
</ul>
</li>
<li>()：标记一个子表达式的开始和结束位置。</li>
<li><em>：匹配前面的子表达式<em>*零次或多次</em></em>。</li>
<li>+：匹配前面的子表达式<strong>一次或多次</strong></li>
<li><p>.：匹配除换行符 \n 之外的任何单字符</p>
</li>
<li><p>？：匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。</p>
</li>
<li>\：将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符<ul>
<li>例如， ‘n’ 匹配字符 ‘n’。’\n’ 匹配换行符。序列<code>&#39;\\&#39;</code> 匹配<code>&quot;\&quot;</code>，而 <code>&#39;\(&#39;</code>则匹配 <code>&quot;(&quot;</code>。</li>
</ul>
</li>
<li>^：如果不是在方括号内使用，是匹配输入字符串的开始位置；该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。            </li>
<li>[：标记一个中括号表达式的开始。</li>
<li>{：标记限定符表达式的开始。</li>
<li>|：指明两项之间的一个选择。</li>
</ul>
</li>
<li>普通字符<ul>
<li>[]：匹配括号中的所有字符<ul>
<li>例如 [aeiou] 匹配字符串 “google runoob taobao” 中所有的 e o u a 字母。</li>
</ul>
</li>
<li><sup><a href="#fn_" id="reffn_"></a></sup>：匹配除了括号内字符的所有字符<ul>
<li>例如 <sup><a href="#fn_aeiou" id="reffn_aeiou">aeiou</a></sup> 匹配字符串 “google runoob taobao” 中除了 e o u a 字母的所有字母。</li>
</ul>
</li>
<li>[-]：表示一个区间<ul>
<li>例如[A-Z] 表示一个区间，匹配所有大写字母，[a-z] 表示所有小写字母</li>
<li>匹配除换行符（\n、\r）之外的任何单个字符，相等于 <sup><a href="#fn_\n\r" id="reffn_\n\r">\n\r</a></sup></li>
</ul>
</li>
<li>[\s]：匹配所有空白符，包括换行</li>
<li>[\S]：匹配任何非空白符</li>
<li>\w：匹配字母、数字、下划线<ul>
<li>等价于 [A-Za-z0-9_]</li>
</ul>
</li>
<li>\d：数字字符匹配。等效于 [0-9]</li>
<li>\D：非数字字符匹配。等效于 <sup><a href="#fn_0-9" id="reffn_0-9">0-9</a></sup></li>
<li>\b：匹配一个字边界，即字与空格间的位置。</li>
<li>\B：非字边界匹配。</li>
<li>\cx：匹配由x指明的控制字符</li>
<li>\f：匹配一个换页符。</li>
<li>\n：匹配一个换行符。</li>
<li>\r：匹配一个回车符。</li>
<li>\t：匹配一个制表符</li>
<li>\v：匹配一个垂直制表符。</li>
</ul>
</li>
<li>限定符(有6种)<ul>
<li>*：匹配前面的子表达式零次或多次。等价于{0,}</li>
<li>+：匹配前面的子表达式一次或多次。等价于 {1,}</li>
<li>？：匹配前面的子表达式零次或一次。等价于 {0,1}</li>
<li>{n}：n 是一个非负整数。匹配确定的 n 次。</li>
<li>{n, }：n 是一个非负整数。至少匹配n 次。</li>
<li>{n,m}：最少匹配 n 次且最多匹配 m 次。<strong>请注意在逗号和两个数之间不能有空格。</strong></li>
<li>贪婪和非贪婪：<ul>
<li>前提条件：整个表达式匹配成功</li>
<li>贪婪：* +，它们会尽可能地多匹配字符，在它们的后面加上一个 ? 就可以实现非贪婪或最小匹配。<ul>
<li>就是在整个表达式匹配成功的前提下，尽可能多的匹配。</li>
<li>比如：<code>&lt;div&gt;.*&lt;/div&gt;</code>在适配<code>&lt;/div&gt;</code>后仍然会向后匹配直到末尾</li>
<li>而非贪婪模式：<code>&lt;div&gt;.*?&lt;/div&gt;</code>在适配到<code>&lt;/div&gt;</code>便停止，重新开始从第一个字符开始匹配</li>
</ul>
</li>
<li>非贪婪：可以限定匹配，通过在 *、+ 或 ? 限定符之后放置 ?将表达式转换为”非贪婪”表达式或者最小匹配。</li>
<li>例子1：匹配两位数数字：<ul>
<li>[1-9][0-9]?</li>
<li>[1-9][0-9]{0,1}</li>
</ul>
</li>
<li>例子2：匹配h1标签：<code>&lt;h1&gt;RUNOOB-菜鸟教程&lt;/h1&gt;</code><ul>
<li><code>&lt;.*&gt;</code>匹配整个标签</li>
<li><code>&lt;.*?&gt;</code>匹配<code>&lt;h1&gt;和&lt;\h1&gt;</code></li>
<li><code>&lt;\w+?&gt;</code>匹配<code>&lt;h1&gt;</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>定位符<ul>
<li>定位符使您能够将正则表达式固定到行首或行尾</li>
<li>这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾。</li>
<li>定位符用来描述字符串或单词的边界</li>
<li>^ 和 $ 分别指字符串的开始与结束，\b 描述单词的前或后边界，\B 表示非单词边界。<ul>
<li>^：匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \n 或 \r 之后的位置匹配。</li>
<li>$：匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \n 或 \r 之前的位置匹配。</li>
<li>\b：匹配一个单词边界，即字与空格间的位置</li>
<li>\B：非单词边界匹配</li>
</ul>
</li>
<li>注意：不能将限定符与定位符一起使用。由于在紧靠换行或者单词边界的前面或后面不能有一个以上位置，因此不允许诸如 ^* 之类的表达式。</li>
<li>若要匹配一行文本开始处的文本，请在正则表达式的开始使用 ^ 字符。不要将 ^ 的这种用法与中括号表达式内的用法混淆。</li>
<li>若要匹配一行文本的结束处的文本，请在正则表达式的结束处使用 $ 字符。</li>
<li>若要在搜索章节标题时使用定位点，下面的正则表达式匹配一个章节标题，该标题只包含两个尾随数字，并且出现在行首：<ul>
<li>/^Chapter [1-9][0-9]{0,1}$/</li>
</ul>
</li>
<li>\b 字符的位置是非常重要的。<ul>
<li>如果它位于要匹配的字符串的开始，它在单词的开始处查找匹配项。如：/\bCha/</li>
<li>如果它位于字符串的结尾，它在单词的结尾处查找匹配项。如：/ter\b/</li>
</ul>
</li>
<li>关于/b<ul>
<li>It’s a nice day today.</li>
<li>‘I’ 占一个位置，’t’ 占一个位置，所有的单个字符（包括不可见的空白字符）都会占一个位置，这样的位置我给它取个名字叫“显式位置”。</li>
<li>注意：字符与字符之间还有一个位置，例如 ‘I’ 和 ‘t’ 之间就有一个位置（没有任何东西），这样的位置我给它取个名字叫“隐式位置”。</li>
<li>“隐式位置”就是 \b 的关键！通俗的理解，\b 就是“隐式位置”。</li>
<li>“隐式位置” \b，匹配这样的位置：它的前一个“显式位置”字符和后一个“显式位置”字符不全是 \w。</li>
<li>匹配a nice：a\b.\bnice</li>
</ul>
</li>
</ul>
</li>
<li>选择<ul>
<li>用圆括号()将所有选择项括起来</li>
<li>相邻的选择项之间用|分隔</li>
<li>()捕获分组，会把每个分组里的匹配的值保存起来<ul>
<li>多个匹配值可以通过数字n来查看，n是一个数字，表示第n个捕获组的内容 </li>
</ul>
</li>
<li>?=、?&lt;=、?!、?&lt;! 的使用区别<ul>
<li>exp1(?=exp2)：查找 exp2 前面的 exp1。<ul>
<li>字符：123455runoob123runoob456</li>
<li>正则表达式runoob(?=[\d+])</li>
<li>匹配数组前面的runoob字符串</li>
</ul>
</li>
<li>(?&lt;=exp2)exp1：查找exp2后面的exp1<ul>
<li>字符：123456google123runoob456</li>
<li>正则表达式：(?&lt;=[0-9]+)runoob</li>
<li>匹配数字后面的runoob字符串</li>
</ul>
</li>
<li>exp1(?!exp2)：查找后面不是 exp2 的 exp1<ul>
<li>字符：123456google123runoob-456</li>
<li>正则表达式：runoob(?![0-9]+)</li>
<li>匹配后面不是数字的runoob</li>
</ul>
</li>
<li>(?&lt;!exp2)exp1：查找前面不是 exp2 的 exp1<ul>
<li>字符：123456googlerunoob456</li>
<li>正则表达式：(?&lt;![0-9]+)runoob</li>
<li>匹配前面不是数字的runoob</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>反向引用<ul>
<li>对一个正则表达式模式或部分模式两边添加圆括号将导致相关匹配存储到一个临时缓冲区中，就是在java中matcher的group中</li>
<li>所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储</li>
<li>缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。</li>
<li>每个缓冲区都可以使用 \n 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。</li>
<li>可以使用非捕获元字符 ?:、?= 或 ?! 来重写捕获，忽略对相关匹配的保存。</li>
<li>反向引用的最简单的、最有用的应用之一，是提供查找文本中两个相同的相邻单词的匹配项的能力。<ul>
<li>例子：  Is is the cost of of gasoline going up up?</li>
<li>设计一种方法定位该句子，而不必查找每个单词的相邻重复出现</li>
<li>正则表达式：<code>&quot;\\b(?i)(\\w+)\\b\\s+\\1&quot;</code><ul>
<li>\1 指定第一个子匹配项：要与第一个匹配到的相同</li>
<li>(?i)：忽略大小写</li>
</ul>
</li>
</ul>
</li>
<li>反向引用还可以将通用资源指示符 (URI) 分解为其组件。<ul>
<li>例子：将下面的 URI 分解为协议（ftp、http 等等）、域地址和页/路径：</li>
<li><a href="http://www.runoob.com:80/html/html-tutorial.html">http://www.runoob.com:80/html/html-tutorial.html</a><ul>
<li>http</li>
<li>www.runoob.com</li>
<li>:80</li>
<li>/html/html-tutorial.html</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>杂学</category>
        <category>正则表达式</category>
      </categories>
  </entry>
  <entry>
    <title>李宏毅深度学习L3</title>
    <url>/2022/06/01/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0L3/</url>
    <content><![CDATA[<h2><span id="convolutional-neural-network-cnn">Convolutional Neural  Network （CNN）</span></h2><ul>
<li>CNN，即卷积神经网络，主要适用于图片处理</li>
</ul>
<h3><span id="图片分类">图片分类</span></h3><ul>
<li>假设我们现在有一张彩色的图片，在电脑中它有<strong>红绿蓝</strong>三个通道，每个通道是一个100*100的矩阵</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202205252103858.png" alt="image-20220525210355635" style="zoom:67%;"></p>
<ul>
<li>但是对于图片来说，如果我们使用全连接层的模型，参数会变得特别多</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202205252104016.png" alt="image-20220525210410836" style="zoom:67%;"></p>
<h3><span id="感受野">感受野</span></h3><ul>
<li>我们观察到对于图像分类来说，要抓住的是图像中物体的特征，需要去捕捉图片的<strong>局部信息</strong><ul>
<li>如图中鸟的特征：鸟喙、眼睛、鸟爪</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202205252104884.png" alt="image-20220525210454682" style="zoom:67%;"></p>
<ul>
<li>所以我们设置一个<strong>感受野(Receptive field)</strong>区域，来提取这一区域覆盖的图片信息(局部信息)，并将信息给予一个神经元<ul>
<li><strong>kernel size</strong>(感受野或者叫卷积核的大小)：$n \times n$，一般为$3\times3$</li>
<li>区域可以重叠</li>
<li><strong>stride</strong>：移动感受野到图片的下一个区域的跨步</li>
<li><strong>padding</strong>：当感受野来到图片边界，剩下区域不够大时的填充</li>
<li>常规设置：每一个感受野有一组神经元（例如64个神经元）</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202205252105684.png" alt="image-20220525210535560" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202205252105098.png" alt="image-20220525210548972" style="zoom:67%;"></p>
<h5><span id="相同特征在不同区域">相同特征在不同区域</span></h5><ul>
<li><p>给我们两张鸟的图片，它们都有鸟喙，但是它们的鸟喙在图片上的不同区域上，那对于每一个感受野来说，都需要配置一个专门的鸟喙检测的神经元吗？</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202205252106259.png" alt="image-20220525210639090" style="zoom:67%;"></p>
</li>
<li><p>可以让所有感受野中相应的神经元来共享参数</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202205252115474.png" alt="image-20220525211512165" style="zoom:67%;"></p>
</li>
</ul>
<h5><span id="好处">好处</span></h5><ul>
<li>可以很好地处理图片<ul>
<li>在图片中，一些重要的pattern比整张图片要小得多</li>
<li>在不同的图片中，相同的pattern会出现在图片的不同区域</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202205252103648.png" alt="image-20220525210322504" style="zoom:80%;"></p>
<h3><span id="卷积层">卷积层</span></h3><ul>
<li>彩色：3个通道</li>
<li>黑白/灰：1个通道</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202205252122120.png" alt="image-20220525212211875" style="zoom:80%;"></p>
<p>假设我们的通道为1，现在我们拥有一张6*6图片，在给定的filter中，它们的值是不确定的，需要训练得到</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206011540275.png" alt="image-20220601153426273" style="zoom:80%;"></p>
<p>进行卷积操作后得到的数据的结构</p>
<ul>
<li><p>列数：</p>
<script type="math/tex; mode=display">
(c - c_f + 1 + padding*2)\ / \ stride</script></li>
<li><p>行数：</p>
<script type="math/tex; mode=display">
(r - r_f + 1 + padding * 2)\  / \ stride</script></li>
<li><p>其中，</p>
<ul>
<li><p>$c$: 当前输入矩阵的列数 </p>
</li>
<li><p>$c_f$: filter的列数 </p>
</li>
<li><p>$r$: 当前输入矩阵的行数 </p>
</li>
<li><p>$r_f$: filter的行数</p>
</li>
<li><p>padding: 指在输入矩阵外圈填充的圈数</p>
</li>
<li>stride: 指filter在移动时跨越的步数</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206011554197.png" alt="image-20220601155454992" style="zoom:80%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206011557435.png" alt="image-20220601155736322" style="zoom:80%;"></p>
<p>当所有的filter都对输入进行处理后，我们便获得了<strong>Feature Map</strong>，每一个filter都是对图片的不同解读，即拓展了查看图片的角度</p>
<ul>
<li>我们可以将Feature Map投入到下一个卷积层中</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206011559173.png" alt="image-20220601155918024" style="zoom:80%;"></p>
<h3><span id="感受野和滤波器的比较">感受野和滤波器的比较</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206011602332.png" alt="image-20220601160244225" style="zoom:67%;"></p>
<ul>
<li>拥有不同感受野的神经元会共享相同的参数</li>
<li>每个滤波器会在整张输入图片上进行卷积操作</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206011606741.png" alt="image-20220601160611633" style="zoom:80%;"></p>
<h3><span id="pooling">Pooling</span></h3><p>对像素进行子采样不会更改对象</p>
<ul>
<li>子采样是一种选取原始数据的子集的方法，用来减小数据的大小</li>
<li>子采样会改变数据集的拓扑，当某些部分没有被选取时，会留下拓扑上的洞</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206011608798.png" alt="image-20220601160842617"></p>
<h4><span id="max-pooling">Max Pooling</span></h4><p>选取Filter中最大的值作为感受野的取值</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206011609590.png" alt="image-20220601160911474" style="zoom:80%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206011609029.png" alt="image-20220601160954861" style="zoom:80%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206011610577.png" alt="image-20220601161048459" style="zoom:80%;"></p>
<h3><span id="小结">小结</span></h3><ul>
<li><p>CNN能够捕捉局部信息，当使用CNN时，我们应该考虑我们的数据集和目标，是否适用CNN</p>
<ul>
<li>例如Alpha Go中，在围棋中，我们需要去考虑局部的信息，而且在这种具体的情况中，pooling并不适用，子采样会损失围棋分布的信息</li>
</ul>
</li>
<li><p>CNN在图像的放缩和旋转后，不能够正常的识别，需要我们进行数据增强(data augmentation)</p>
</li>
</ul>
<h2><span id="recurent-neural-networkrnn">Recurent Neural Network(RNN)</span></h2><h3><span id="slot-filling">Slot Filling</span></h3><ul>
<li>输入一段语句，给出填空的答案</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206121525234.png" alt="image-20220612152453286"></p>
<ul>
<li>可不可以使用前向网络(Feedforward network)来实现<ul>
<li>输入单词（使用单词编码），每一个单词用一个向量来表示</li>
<li>输出单词属于某一个空的概率</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206121537487.png" alt="image-20220612153756328"></p>
<ul>
<li>问题：网络无法结合上下单词，理解词汇的意义，如到达和离开的区别，只能捕捉到目的地单词<ul>
<li>我们需要网络具有记忆的功能，能够记住前后的单词</li>
</ul>
</li>
</ul>
<h4><span id="单词编码">单词编码</span></h4><h5><span id="1-of-n-encoding">1-of-N encoding</span></h5><ul>
<li>向量长度为整个词库的词语数量</li>
<li>一个维度标记词库中的一个单词</li>
<li>对于某一个单词，它所在维度为1，其他维度为0</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206121530986.png" alt="image-20220612153012893" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206121529997.png" alt="image-20220612152953887" style="zoom:67%;"></p>
<h5><span id="改进">改进</span></h5><h6><span id="others">Others</span></h6><ul>
<li>将其他不存在词库中的单词设置为“other”</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206121531532.png" alt="image-20220612153112422" style="zoom:67%;"></p>
<h6><span id="word-hashing">Word hashing</span></h6><ul>
<li>维度用来标记字母组合</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206121532801.png" alt="image-20220612153228675" style="zoom:80%;"></p>
<h3><span id="rnn">RNN</span></h3><h4><span id="存储前一个输入的信息">存储前一个输入的信息</span></h4><ul>
<li>将隐藏层的信息存储起来，将该信息作为输入，让网络可以学习</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206121547500.png" alt="image-20220612154709343" style="zoom:67%;"></p>
<h5><span id="例子">例子</span></h5><ul>
<li><p>假设所有的权重为1，没有bias，激活函数都是线性的</p>
</li>
<li><p>输入序列：</p>
<script type="math/tex; mode=display">
\begin{equation}
    \begin{bmatrix}
    1 \\
    1
    \end{bmatrix}
    \begin{bmatrix}
    1 \\
    1
    \end{bmatrix}
    \begin{bmatrix}
    2 \\
    2
    \end{bmatrix}
\end{equation}</script></li>
<li><p>初始的存储值为0</p>
</li>
</ul>
<p>第一次输入:</p>
<script type="math/tex; mode=display">
\begin{bmatrix}
    1 \\
    1
\end{bmatrix}</script><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206121554397.png" alt="image-20220612155431239"></p>
<ul>
<li><p>两个存储值都会变为2</p>
</li>
<li><p>输出为</p>
<script type="math/tex; mode=display">
\begin{bmatrix}
    4 \\
    4
\end{bmatrix}</script></li>
</ul>
<p>第二次输入：</p>
<script type="math/tex; mode=display">
\begin{bmatrix}
    1 \\
    1
\end{bmatrix}</script><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206121557234.png" alt="image-20220612155724080"></p>
<ul>
<li>两个存储值会变为6</li>
<li>输出为</li>
</ul>
<script type="math/tex; mode=display">
\begin{bmatrix}
    12 \\
    12
\end{bmatrix}</script><h5><span id="小结">小结</span></h5><ul>
<li>改变输入序列的顺序，会改变输出</li>
<li>反复使用这样的结构</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206121559818.png" alt="image-20220612155900617" style="zoom:80%;"></p>
<p>如上图所示，当前输入，可以获得前一个输入的信息，可以简单区分出一些不同</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206121604746.png" alt="image-20220612160431558" style="zoom:80%;"></p>
<ul>
<li>可以将网络做深</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206121605857.png" alt="image-20220612160526711"></p>
<h5><span id="类别">类别</span></h5><ul>
<li>Elman Network：传递前一个输入的隐藏层信息</li>
<li>Jordan Network：传递前一个输出的信息</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206121607014.png" alt="image-20220612160711768"></p>
<h4><span id="双向rnn">双向RNN</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206121608475.png" alt="image-20220612160845326"></p>
<p>将前向输入和逆向输入相同位置上的隐藏信息拼合到一个，存储当前单词前后的信息</p>
<h4><span id="lstm">LSTM</span></h4><h5><span id="结构">结构</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206121617309.png" alt="image-20220612161713899"></p>
<ul>
<li><p>由4个部分组成</p>
<ul>
<li>Input Gate：由信号控制是否接收输入</li>
<li>Memory Cell：存储记忆的信息</li>
<li>Forget Gate：由信号控制是否清除现在存储的信息</li>
<li>Output Gate：由信号控制是否输出</li>
</ul>
</li>
<li><p>一共有4个输入，1个输出</p>
<ul>
<li>输入：3个signal，1个正常输入</li>
</ul>
</li>
</ul>
<h5><span id="计算过程">计算过程</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206121626766.png" alt="image-20220612162608543"></p>
<ul>
<li>激活函数f输出为0到1，可以用来控制是否接收信息</li>
<li>输入$z$和$z_i$，经过激活函数得到$g(z)$和$f(z_i)$，将两者相乘，即为$g(z)f(z_i)$<ul>
<li>这一步用来控制输入</li>
</ul>
</li>
<li>输入$z_f$，经过激活函数得到$f(z_f)$，与Memory Cell中存储的信息c进行相乘，即为$cf(z_f)$<ul>
<li>这一步用来控制是否要清楚当前信息c</li>
</ul>
</li>
<li>将前两步获得的数据相加获得新的存储信息$c^\prime$</li>
</ul>
<script type="math/tex; mode=display">
c^\prime = g(z)f(z_i) + cf(z_f)</script><ul>
<li><p>输入$c^\prime$和$z_o$，经过激活函数得到$h(c^\prime)$和$f(z_o)$，将两者相乘，得到输出a，即</p>
<script type="math/tex; mode=display">
a = h(c^\prime)f(z_0)</script><ul>
<li>这一步用来控制输出</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206121852288.png" alt="image-20220612185203076"></p>
<p>在RNN网络架构中，一般用LSTM代替神经元</p>
<h5><span id="缺点">缺点</span></h5><ul>
<li><p>参数过多</p>
<ul>
<li>每一个LSTM都需要4个输入，需要4倍的参数*LSTM数目</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206121908775.png" alt="image-20220612190853570"></p>
<ul>
<li>解决方案：利用当前输入，生成4个向量，所有的LSTM使用对应位置上的同一向量</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206121918618.png" alt="image-20220612191837425"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206121921657.png" alt="image-20220612192100452"></p>
<ul>
<li>可以将上一个LSTM网络中的c拼合输入中</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206121927804.png" alt="image-20220612192703602" style="zoom: 80%;"></p>
</li>
</ul>
<h5><span id="多层lstm">多层LSTM</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206121933005.png" alt="image-20220612193342779" style="zoom: 67%;"></p>
<h5><span id="学习目标">学习目标</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206121935566.png" alt="image-20220612193533363" style="zoom:67%;"></p>
<ul>
<li>BPTT（Backpropagation  through time）</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206121937184.png" alt="image-20220612193711051"></p>
<h4><span id="rnn训练较为困难">RNN训练较为困难</span></h4><ul>
<li>RNN参数的损失曲面十分陡峭</li>
<li>可以采用clip，剪切掉超过某一范围的参数，强制在一定范围内</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206121939602.png" alt="image-20220612193916228"></p>
<ul>
<li>损失曲面会抖动严重的原因</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206121943377.png" alt="image-20220612194306243"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206121945280.png" alt="image-20220612194510135"></p>
<p>参数的细微改变，会导致后面的输出发生巨大变化（梯度爆炸），或者一直为0（梯度消失），学习率无法调节</p>
<h4><span id="lstm的优势">LSTM的优势</span></h4><ul>
<li>可以解决梯度消失的问题（不是梯度爆炸）<ul>
<li>fotget gate关闭可以消除前面记录信息的影响，摆脱梯度消失</li>
</ul>
</li>
<li>记录的信息和输入可以拼合</li>
</ul>
<h4><span id="rnn的应用场景">RNN的应用场景</span></h4><h5><span id="many-to-one">Many to one</span></h5><h6><span id="sentiment-analysis">Sentiment Analysis</span></h6><ul>
<li>语句分析，将其分类</li>
<li>输入：向量序列</li>
<li>输出：向量标签</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206121957183.png" alt="image-20220612195715995"></p>
<h6><span id="key-term-extraction">Key Term Extraction</span></h6><ul>
<li>关键词的提取</li>
<li>输入：向量序列</li>
<li>输出：一个向量</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206122000086.png" alt="image-20220612200003882"></p>
<h5><span id="many-to-many输出序列较短">Many to Many（输出序列较短）</span></h5><p>输入和输出都是序列，输出序列较短</p>
<h6><span id="speech-recognition">Speech Recognition</span></h6><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206122005975.png" alt="image-20220612200542842"></p>
<p>好棒棒这种叠词，可能无法识别</p>
<p>Connectionist Temporal Classification (CTC)</p>
<ul>
<li>加入了额外的符号$\phi$来代表空</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206122008246.png" alt="image-20220612200826119"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206122010241.png" alt="image-20220612201016973"></p>
<ul>
<li>CTC是识别每一个字母的</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206122010310.png" alt="image-20220612201049173"></p>
<h5><span id="many-to-many-没有限制">Many to Many （没有限制）</span></h5><p>输入和输出都是序列，且长度没有限制，可以不一样 -&gt; Sequence to sequence learning</p>
<h6><span id="machine-translation">Machine Translation</span></h6><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206150959111.png" alt="image-20220615095955057" style="zoom:80%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206151009677.png" alt="image-20220615100913625" style="zoom:80%;"></p>
<h5><span id="beyond-sequence">Beyond Sequence</span></h5><h6><span id="syntactic-parsing">Syntactic parsing</span></h6><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206151011308.png" alt="image-20220615101152260" style="zoom:80%;"></p>
<h5><span id="sequence-to-sequence-auto-encoder-text">Sequence-to-sequence Auto-encoder  Text</span></h5><p>要理解一个句子的意思，单词的顺序不可以忽略</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206151014571.png" alt="image-20220615101426521" style="zoom:80%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206151015496.png" alt="image-20220615101517419" style="zoom: 80%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206151016619.png" alt="image-20220615101624543" style="zoom:80%;"></p>
<h5><span id="sequence-to-sequence-auto-encoder-speech">Sequence-to-sequence Auto-encoder  Speech</span></h5><ul>
<li>不定长度的序列的降维</li>
<li>发音相近的词语转换为向量后，会聚集在一定区域</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206151022522.png" alt="image-20220615102242458" style="zoom:80%;"></p>
<p>音频归档分为可变长度的音频段，然后可以对语音进行检索</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206151026948.png" alt="image-20220615102627894" style="zoom:80%;"></p>
<p>将语音片段转换为向量后，我们希望向量能够表示这个语音片段</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206151029985.png" alt="image-20220615102914925" style="zoom:80%;"></p>
<p>Encoder和Decoder是联合训练的</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206151030015.png" alt="image-20220615103050956" style="zoom:80%;"></p>
<h4><span id="attention-based-model">Attention-based Model</span></h4><ul>
<li>DNN/RNN可以通过Reading Head Controller在Memory中找到自己想要的相关信息</li>
<li>就像人类的大脑一样，可以去记忆中去搜索相关的知识</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206151034669.png" alt="image-20220615103430622" style="zoom:80%;"></p>
<ul>
<li>DNN/RNN同时也可以写入Memory</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206151035798.png" alt="image-20220615103542742" style="zoom:80%;"></p>
<h5><span id="应用">应用</span></h5><h6><span id="reading-comprehension">Reading Comprehension</span></h6><ul>
<li>对文本进行语义分析，每一个句子转换为一个向量</li>
<li>DNN/RNN读取向量信息</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206151242792.png" alt="image-20220615124241256"></p>
<h6><span id="visual-question-answering">Visual Question Answering</span></h6><ul>
<li>输入一张图片和一个问题，输出问题的答案</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206151244411.png" alt="image-20220615124449212"></p>
<ul>
<li>利用CNN将图片的每一个区域转换为一个向量</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206151245876.png" alt="image-20220615124538682"></p>
<h6><span id="speech-question-answering">Speech Question Answering</span></h6><p>听力考试</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206151251480.png" alt="image-20220615125117301"></p>
<h4><span id="rnn和structured-learning的比较">RNN和Structured Learning的比较</span></h4><p>RNN，LSTM</p>
<ul>
<li>非双向的RNN不能够考虑整个序列</li>
<li>Cost和eroor总是相关的</li>
<li>deep</li>
</ul>
<p>HMM，CRF，Structured Perceptron/SVM</p>
<ul>
<li>使用了Viterbi，考虑了整个序列<ul>
<li>但双向的RNN也可考虑</li>
</ul>
</li>
<li>可以明确考虑标签依赖关系</li>
<li>Cost是error的下界</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206151300653.png" alt="image-20220615130016461"></p>
<h5><span id="一起使用">一起使用</span></h5><h6><span id="speech-recognition-cnnlstmdnn-hmm">Speech Recognition:  CNN/LSTM/DNN + HMM</span></h6><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206151308161.png" alt="image-20220615130854017" style="zoom:80%;"></p>
<h6><span id="semantic-tagging-bi-directional-lstm-crfstructured-svm">Semantic Tagging: Bi-directional LSTM +  CRF/Structured SVM</span></h6><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206151310882.png" alt></p>
<h2><span id="self-attention">Self-Attention</span></h2><h4><span id="输入">输入</span></h4><ul>
<li>输入是一个向量，经过模型后输出一个数字或者类别</li>
<li>输入时一组向量，经过模型后输出一组数字或者类别</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206011932332.png" alt="image-20220601193201217" style="zoom:80%;"></p>
<p><strong>输入时是一组向量</strong></p>
<ul>
<li>语句</li>
<li>语音</li>
<li>图（如关系图）</li>
</ul>
<p><strong>语句</strong></p>
<p>如一句话“this is a cat”，我们需要对数据集进行编码处理，以便识别各个单词</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206011936886.png" alt="image-20220601193609800" style="zoom:50%;"></p>
<ul>
<li>One-hot Encoding 一键编码<ul>
<li>有多少个单词，就构建一个多长的向量</li>
<li>这样做的后果是模型不知道单词之间的关系，它们是割裂的</li>
</ul>
</li>
<li>Word Embedding 词嵌入<ul>
<li>对词语进行编码处理，相似意义的词会聚集</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206011933411.png" alt="image-20220601193358288" style="zoom:80%;"></p>
<p><strong>语音</strong></p>
<p>进行加窗处理</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206011939047.png" alt="image-20220601193925885" style="zoom:80%;"></p>
<p><strong>图</strong></p>
<p>将每一个节点都视为一个向量</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206011940622.png" alt="image-20220601194028478"></p>
<h4><span id="输出">输出</span></h4><ul>
<li>每一个向量都有一个标签</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206011942420.png" alt="image-20220601194100359" style="zoom:80%;"></p>
<p>例子</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206011941403.png" alt="image-20220601194147282" style="zoom:80%;"></p>
<ul>
<li>整个序列有一个标签</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206011942658.png" alt="image-20220601194232485" style="zoom:80%;"></p>
<p>例子</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206011943264.png" alt="image-20220601194305157"></p>
<ul>
<li>模型自己决定有多少个标签（seq2seq）</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206011946215.png" alt="image-20220601194616106" style="zoom:80%;"></p>
<h4><span id="思考">思考</span></h4><ul>
<li>对于一段文本，我们需要考虑前后文，如判断”I saw a saw”中各个单词的词性<ul>
<li>对于前后文问题，我们可以将一个窗口内的单词都输入一个全连接层中，但是这样较前面的和较后面的很难一起考虑</li>
<li>考虑整个句子，可以将整个句子丢入一个全连接层中，但是这样模型会变得很复杂</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206012004752.png" alt="image-20220601200457644"></p>
<ul>
<li>可以使用自注意力机制</li>
</ul>
<h3><span id="自注意力">自注意力</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206012006615.png" alt="image-20220601200646438" style="zoom: 67%;"></p>
<h4><span id="实现">实现</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206012007564.png" alt="image-20220601200757296" style="zoom: 67%;"></p>
<h5><span id="考虑当前向量和序列中其他向量的关系">考虑当前向量和序列中其他向量的关系</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206012008036.png" alt="image-20220601200854852" style="zoom:67%;"></p>
<h5><span id="可以对两个要关联的向量进行某种运算">可以对两个要关联的向量进行某种运算</span></h5><ul>
<li><strong>Dot-product</strong></li>
<li>Additive</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206012010332.png" alt="image-20220601201001156" style="zoom:67%;"></p>
<p>对于当前向量，计算出一个query向量，对于其他的向量，各有一个key向量，可以分别计算得出注意力分数(attention score)</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206012012018.png" alt="image-20220601201235782" style="zoom: 67%;"></p>
<p>可以对注意力分数(attention score)进行softmax运算</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206012013572.png" alt="image-20220601201352413" style="zoom:50%;"></p>
<p>然后基于注意力分数(attention score)，利用value向量，提取出信息</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206012015446.png" alt="image-20220601201509303" style="zoom:50%;"></p>
<p>对于所有的向量，平行地进行运算</p>
<p><img src="C:/Users/12554/AppData/Roaming/Typora/typora-user-images/image-20220601201612541.png" alt="image-20220601201612541" style="zoom:50%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206012016199.png" alt="image-20220601201657068" style="zoom:67%;"></p>
<h5><span id="对于这样相同的运算我们可以将这些向量拼合成矩阵进行矩阵运算加快运算">对于这样相同的运算，我们可以将这些向量拼合成矩阵，进行矩阵运算，加快运算</span></h5><ul>
<li>q，k，v的获取<ul>
<li>query：$Q = W^q I$</li>
<li>key：$K = W^k I$</li>
<li>value：$V = W^vI$</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206012018858.png" alt="image-20220601201802665" style="zoom: 80%;"></p>
<ul>
<li>注意力分数的获取</li>
</ul>
<script type="math/tex; mode=display">
A = K^T  Q \\
A \mathop\rightarrow^{softmax} A^`</script><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206012020665.png" alt="image-20220601202048570"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206012024761.png" alt="image-20220601202424637"></p>
<ul>
<li>信息的获取</li>
</ul>
<script type="math/tex; mode=display">
O = V A^`</script><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206012026689.png" alt="image-20220601202604535"></p>
<ul>
<li>小结</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206012027497.png" alt="image-20220601202744354" style="zoom:67%;"></p>
<h3><span id="multi-head-self-attention">Multi-head Self-attention</span></h3><ul>
<li>多头注意力机制</li>
<li>可以探索不同类型之间的联系</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206012031288.png" alt="image-20220601203142163" style="zoom: 67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206012032401.png" alt="image-20220601203214301"></p>
<h3><span id="positional-encoding">Positional Encoding</span></h3><ul>
<li>在注意力机制中，序列输入后，模型没有对于位置的信息，不同距离的两个向量对于模型来说是一样的</li>
<li>我们可以在向量中加入位置信息，每一个位置有一个独一无二的向量$e^i$<ul>
<li>手工制作</li>
<li>从数据中学习</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206012039598.png" alt="image-20220601203933181"></p>
<h3><span id="自注意力的应用">自注意力的应用</span></h3><ul>
<li><p>NLP 自然语言处理</p>
</li>
<li><p>语音处理：Truncated Self-attention</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206012043669.png" alt="image-20220601204318387" style="zoom:67%;"></p>
<ul>
<li>图像</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206012047516.png" alt="image-20220601204706231" style="zoom: 67%;"></p>
<ul>
<li>Self-attention GAN</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206012047338.png" alt="image-20220601204743139"></p>
<ul>
<li>DEtection Transformer(DETR)</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206012048033.png" alt="image-20220601204816742"></p>
<h3><span id="self-attention和cnn的比较">Self-attention和CNN的比较</span></h3><ul>
<li>CNN是简化版的self-attention<ul>
<li>CNN是可以只关注一个感受野的self-attention</li>
</ul>
</li>
<li>self-attention是复杂版的CNN<ul>
<li>Self-attention是具有可学习感受野的CNN</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206012100697.png" alt="image-20220601210038552"></p>
<ul>
<li>Self-attention适合更多的数据，而CNN适合比较少的数据</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206012102106.png" alt="image-20220601210243798" style="zoom:80%;"></p>
<h3><span id="self-attention和rnn的比较">Self-attention和RNN的比较</span></h3><p>RNN不可以平行处理，而自注意力可以</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206012103414.png" alt="image-20220601210357104" style="zoom:80%;"></p>
<h3><span id="self-attention-for-graph">Self-attention for Graph</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206012104168.png" alt="image-20220601210432017" style="zoom:80%;"></p>
<h3><span id="transformer">Transformer</span></h3><h4><span id="seq2seq">Seq2seq</span></h4><ul>
<li>对于序列到序列的模型，我们输入一段序列，模型会输出一段序列，且输出序列的长度取决于模型<ul>
<li>语音识别(Speech Recognition)</li>
<li>机器翻译(Machine Translation)</li>
<li>语音翻译(Speech Translation)</li>
<li>文本转语音合成器(Text-to-Speech(TTS) Synthesis)</li>
<li>Seq2seq for Chatbot</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201016079.png" alt="image-20220620101610237" style="zoom:80%;"></p>
<ul>
<li><p>其他的一些应用</p>
<ul>
<li>Seq2seq for Syntactic Parsing</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201020094.png" alt="image-20220620102011952" style="zoom:80%;"></p>
<ul>
<li>Seq2seq for  Multi-label Classification</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201021238.png" alt="image-20220620102042105" style="zoom:80%;"></p>
<ul>
<li>Seq2seq for  Object Detection</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201021586.png" alt="image-20220620102118403" style="zoom:80%;"></p>
</li>
</ul>
<h4><span id="transformer">Transformer</span></h4><p>Encoder-Decoder架构</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201023469.png" alt="image-20220620102300323" style="zoom:80%;"></p>
<p>结构</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201026730.png" alt="image-20220620102633567" style="zoom: 80%;"></p>
<h5><span id="encoder">Encoder</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201027152.png" alt="image-20220620102723001" style="zoom:80%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201031355.png" alt="image-20220620103105168" style="zoom:80%;"></p>
<p>Layer Norm的调整</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201031877.png" alt="image-20220620103151696" style="zoom:80%;"></p>
<h5><span id="decoder">Decoder</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201038711.png" alt="image-20220620103857554" style="zoom: 67%;"></p>
<p>Transformer的Decoder是一个自回归的Decoder（Autoregressive Decoder）</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201036338.png" alt="image-20220620103624171" style="zoom:80%;"></p>
<h5><span id="masked-self-attention">Masked Self-attention</span></h5><ul>
<li>在解码器中，第一个注意力机制是一个掩码的自注意力</li>
<li>这是因为解码器需要输出一个序列，它需要在不知道后面的信息的情况下，根据前面的信息，来预测当前的输出</li>
<li>所以我们在训练时，需要将后面的序列盖住</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201042918.png" alt="image-20220620104239749" style="zoom:80%;"></p>
<ul>
<li>在训练时，我们给解码器的输入都是正确答案，帮助其完成训练</li>
</ul>
<p><strong>停止符号</strong></p>
<p>为了让输出停止，我们需要定义一个停止符号，提示解码器停止输出</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201043748.png" alt="image-20220620104334428" style="zoom:80%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201044384.png" alt="image-20220620104422226" style="zoom:80%;"></p>
<h5><span id="nat-非自回归">NAT 非自回归</span></h5><ul>
<li>AT需要前面的输出信息，才能给出当前的输出</li>
<li>NAT可以并行地给出输出，速度比AT要快，生成更加稳定</li>
</ul>
<p>NAT解码器如何决定输出的长度</p>
<ul>
<li>预测输出序列的长度(predictor)</li>
<li>输出一个固定长度的长序列，忽略终止符END后面的Token</li>
</ul>
<h5><span id="cross-attention">Cross attention</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201057230.png" alt="image-20220620105702079" style="zoom:80%;"></p>
<p>Cross attention部分会将Encoder的最后一个输出转换为Decoder部分的$k$和$v$矩阵</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201416702.png" alt="image-20220620141608521" style="zoom:80%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201421768.png" alt="image-20220620142157510" style="zoom:80%;"></p>
<h6><span id="不同的连接方式">不同的连接方式</span></h6><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201422724.png" alt="image-20220620142232490"></p>
<h4><span id="训练transformer">训练Transformer</span></h4><ul>
<li>Encoder和Decoder联合训练</li>
<li>使用softmax和cross entropy进行训练</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201437245.png" alt="image-20220620143749025" style="zoom:80%;"></p>
<h5><span id="teacher-forcing模式">Teacher Forcing模式</span></h5><p>将输出数据作为Decoder的输入，使其向正确输出靠近</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201439938.png" alt="image-20220620143936719"></p>
<h4><span id="tips">Tips</span></h4><h5><span id="copy-machanism-复制机制">Copy Machanism 复制机制</span></h5><p>将一些不太需要翻译的人名、地名等直接复制</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201441878.png" alt="image-20220620144123673" style="zoom:80%;"></p>
<h5><span id="guided-attention">Guided Attention</span></h5><ul>
<li>Monotonic Attention</li>
<li><p>Location-aware attention</p>
</li>
<li><p>在一些任务中，输入和输出是单调排列的，顺序关系不可改变</p>
</li>
<li>例如下面的序列中，在输出时，第一个输出中，Attention关注的是后面的序列</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201450843.png" alt="image-20220620145025627" style="zoom:80%;"></p>
<h5><span id="beam-search">Beam Search</span></h5><ul>
<li>在Attention Score中，模型会选择当前分数最高的，但是多次选择后，综合起来，不一定是最好的选择</li>
<li>Beam Search会综合考虑全局的分数，选择最好的结果</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201453733.png" alt="image-20220620145344491" style="zoom: 80%;"></p>
<p>但是最好的选择不一定会产生很好的结果</p>
<h5><span id="sampling">Sampling</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201456221.png" alt="image-20220620145622036"></p>
<p>在一些任务中，生成序列时，Decoder需要一些噪声(Randomness)，sample是指从某些分布中sample中出来的噪声</p>
<h6><span id="scheduled-sampling">Scheduled Sampling</span></h6><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201508376.png" alt="image-20220620150815218" style="zoom:80%;"></p>
<p>采样由Decoder决定</p>
<h5><span id="optimizing-evaluation-metrics">Optimizing Evaluation Metrics</span></h5><p>优化方案的选择</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206201501785.png" alt="image-20220620150131465" style="zoom:80%;"></p>
<ul>
<li>Cross Entropy</li>
<li>BLEU score</li>
<li>Reinforcement learning</li>
</ul>
<h3><span id="各种各样的attention">各种各样的Attention</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206151319663.png" alt="image-20220615131919483" style="zoom:80%;"></p>
<h4><span id="自注意力机制的运作">自注意力机制的运作</span></h4><ul>
<li>利用Query和Key构造一个Attention Matrix</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206151320098.png" alt="image-20220615132047951" style="zoom:80%;"></p>
<ul>
<li>自注意力只是一个大型网络的一个模块</li>
<li>当序列的长度N足够大的时候，自注意力在计算占主导</li>
<li>通常用于图像处理</li>
</ul>
<h4><span id="人工干预来跳过一些attention-matrix的计算">人工干预来跳过一些Attention Matrix的计算</span></h4><h5><span id="local-attentiontruncated-attention">Local Attention/Truncated Attention</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206151328102.png" alt="image-20220615132821960" style="zoom:80%;"></p>
<ul>
<li>只计算标记的部位，其他位置设置为0</li>
<li>跟CNN有些相似</li>
</ul>
<h5><span id="stride-attention">Stride Attention</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206151330114.png" alt="image-20220615133009983" style="zoom:80%;"></p>
<ul>
<li>选中从自身向左右两边跨越规定的步数的部位，进行计算</li>
</ul>
<h5><span id="global-attention">Global Attention</span></h5><ul>
<li>在原来的序列中添加special token<ul>
<li>关注(attend)每一个token，可以收集全局信息</li>
<li>被每一个token关注(attend)，知道全局信息</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206151341781.png" alt="image-20220615134147669" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206151353367.png" alt="image-20220615135338223" style="zoom:80%;"></p>
<p>图中前两个是special token</p>
<h5><span id="小结">小结</span></h5><ul>
<li>可以在一个模型中同时使用不同的Attention<ul>
<li>不同的head可以使用不同的模式</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206151355615.png" alt="image-20220615135545467" style="zoom:80%;"></p>
<h4><span id="关注一些matrix中关键的部分critical-parts">关注一些Matrix中关键的部分(Critical Parts)</span></h4><ul>
<li>小数值直接设置为0</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206151415355.png" alt="image-20220615141532216" style="zoom:80%;"></p>
<ul>
<li>如何快速估计注意力权重较小的部分</li>
</ul>
<h5><span id="clustering">Clustering</span></h5><ul>
<li>Reformer</li>
<li>Routing Transformer</li>
</ul>
<h6><span id="步骤1">步骤1</span></h6><p>基于相似度对query和key进行聚类标注</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206151435498.png" alt="image-20220615143507228" style="zoom:80%;"></p>
<h6><span id="步骤2">步骤2</span></h6><ul>
<li>相同类别的才计算attention weight</li>
<li>不同类别的设置为0</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206151436784.png" alt="image-20220615143639643" style="zoom:80%;"></p>
<h5><span id="learnable-patterns">Learnable Patterns</span></h5><p>通过学习来获取需要计算的部位</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206151443520.png" alt="image-20220615144303332" style="zoom:80%;"></p>
<h5><span id="不需要完整的attention-matrix">不需要完整的Attention matrix</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206151446205.png" alt="image-20220615144605069" style="zoom:80%;"></p>
<ul>
<li>可以减少key和value的长度</li>
<li>query的长度不变，因为输出长度需要不变</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206151453211.png" alt="image-20220615145312066" style="zoom:80%;"></p>
<h6><span id="使用卷积">使用卷积</span></h6><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206151457166.png" alt="image-20220615145754047" style="zoom:80%;"></p>
<h6><span id="使用参数矩阵相乘">使用参数矩阵相乘</span></h6><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206151458612.png" alt="image-20220615145841338" style="zoom:80%;"></p>
<h4><span id="注意力机制计算">注意力机制计算</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206151500280.png" alt="image-20220615150050121" style="zoom:80%;"></p>
<ul>
<li>利用输入I获取Q、K、V进行运算，得到输出O</li>
<li>为加快运算，采用矩阵计算的形式</li>
</ul>
<h5><span id="计算方式的不同">计算方式的不同</span></h5><ul>
<li>$K^TQ$先计算</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206151505401.png" alt="image-20220615150558285" style="zoom:80%;"></p>
<ul>
<li>$VK^T$先计算</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206151506681.png" alt="image-20220615150610340" style="zoom:80%;"></p>
<p>三个矩阵计算顺序不同，进行乘法次数不同，结果相同</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206151608002.png" alt="image-20220615160842793" style="zoom:80%;"></p>
<p>而Q、K、V三个矩阵的运算中，</p>
<p>正常进行计算，会进行$(d+d^\prime)N^2$次乘法运算</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206191607097.png" style="zoom:80%;"></p>
<p>先计算$V K^T$的话，会计算$2d^\prime dN$次乘法运算，小于正常运算次数，序列长度N是大于维度d的</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206191609388.png" alt="image-20220619160902235" style="zoom:80%;"></p>
<h5><span id="注意力计算的变换">注意力计算的变换</span></h5><p>我们利用当前向量的$q$矩阵，来与自身和其他向量的$k$矩阵进行运算，再经过$softmax$运算，得到$\alpha^{\prime}$，即</p>
<script type="math/tex; mode=display">
\alpha^{\prime}_{1,i} = \sum_{i=1}^{N}\frac{exp(q^1\cdot k^i)}{\sum^N_{j=1}exp(q^1\cdot k^j)}</script><p>这里以$a^1$向量($q^1$矩阵)为当前向量。</p>
<p>再将得到的$\alpha^{\prime}$与对应的$v$矩阵进行运算，合成起来得到$b^1$，即</p>
<script type="math/tex; mode=display">
b^1 = \sum_{i=1}^{N}\alpha^{\prime}_{1,i}v^i = \sum_{i=1}^{N}\frac{exp(q^1\cdot k^i)}{\sum^N_{j=1}exp(q^1\cdot k^j)}v^i</script><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206191622844.png" alt="image-20220619162249548" style="zoom:80%;"></p>
<p>在这里，我们可以对$softmax$的计算进行改变</p>
<script type="math/tex; mode=display">
exp(q\cdot k) \approx \phi(q) \cdot \phi(k)</script><p>这里的$\phi$是一个变换，那么$b$的计算可以变换为</p>
<script type="math/tex; mode=display">
\begin{equation} 
\begin{aligned}
b^1 = \sum_{i=1}^{N}\alpha^{\prime}_{1,i}v^i &=\sum_{i=1}^{N}\frac{exp(q^1\cdot k^i)}{\sum^N_{j=1}exp(q^1\cdot k^j)}v^i \\ \\
&= \sum^N_{i=1}\frac{\phi(q^1)\cdot\phi(k^i)}{\sum^N_{j=1}\phi(q^1)\cdot\phi(k^j)}v^i \\ \\
&= \frac{\sum^N_{i=1}\phi(q^1)\cdot\phi(k^i)v^i}{\sum^N_{j=1}\phi(q^1)\cdot\phi(k^j)}
\end{aligned}
\end{equation}</script><p>而分母项可以进一步进行调整</p>
<script type="math/tex; mode=display">
\begin{equation}
\sum^N_{j=1}\phi(q^1)\cdot\phi(k^j) = \phi(q^1) \cdot\sum^{N}_{j=1}\phi(k^j)
\end{equation}</script><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206191639053.png" alt="image-20220619163916875" style="zoom:67%;"></p>
<p>那么$b^1$的计算进一步调整</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206191640161.png" alt="image-20220619164017990" style="zoom:80%;"></p>
<p>我们可以利用$k$和$v$提前计算好部分值，需要时直接调用即可</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206191642452.png" alt="image-20220619164259336" style="zoom:80%;"></p>
<p>  <img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206191816815.png" alt="image-20220619181601660" style="zoom:80%;"></p>
<p>这样子，有一部分不用重复进行计算</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206191819653.png" alt="image-20220619181937513"></p>
<p>这样利用$\phi(k)$和$v$计算出来的M组向量相当于有M组模板，$\phi(q)$与之相乘是在进行选择。</p>
<h4><span id="通过学习来构造attention-matrix">通过学习来构造Attention Matrix</span></h4><p>注意力机制通过$q$和$k$来计算Attention Matrix，但是我们可以将整个矩阵是为网络的参数</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206191836293.png" alt="image-20220619183648004" style="zoom:80%;"></p>
<h4><span id="小结">小结</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/202206191837325.png" alt="image-20220619183747143" style="zoom:80%;"></p>
]]></content>
      <categories>
        <category>深度学习</category>
        <category>李宏毅</category>
      </categories>
      <tags>
        <tag>DeepLearning</tag>
      </tags>
  </entry>
  <entry>
    <title>每日英语</title>
    <url>/2021/10/04/%E6%AF%8F%E6%97%A5%E8%8B%B1%E8%AF%AD/</url>
    <content><![CDATA[<h1><span id="1月份">1月份</span></h1><h2><span id="1-10-泰勒斯威夫特">1-10 泰勒斯威夫特</span></h2><h3><span id="单词">单词</span></h3><h4><span id="1-stock">1. stock</span></h4><ul>
<li>n. 股票;(商店的)现货，存货，库存；股份；名声</li>
<li>v. 存货;贮备，贮存(食物、书籍等)</li>
<li>adj. 老一套的;陈腐的;(商店里)常备的，通常有的</li>
</ul>
<h5><span id="例句">例句</span></h5><p><img src="https://gitee.com/gyb_1_0/img/raw/master/image-20220110104904841.png" alt="image-20220110104904841"></p>
<h5><span id="常用搭配">常用搭配</span></h5><p><img src="https://gitee.com/gyb_1_0/img/raw/master/image-20220110104926658.png" alt="image-20220110104926658"></p>
<ul>
<li>my stock was up and down 股票跌或涨 比喻顺境和逆境</li>
</ul>
<h5><span id="同根词">同根词</span></h5><p><img src="https://gitee.com/gyb_1_0/img/raw/master/image-20220110104940008.png" alt="image-20220110104940008"></p>
<h4><span id="2-negativity">2. negativity</span></h4><ul>
<li>n. 否定性；消极性</li>
</ul>
<h5><span id="同根词">同根词</span></h5><p><img src="https://gitee.com/gyb_1_0/img/raw/master/image-20220110110031606.png" alt="image-20220110110031606"></p>
<h4><span id="3-resistance">3. resistance</span></h4><ul>
<li>n. 反对；抵制；抗拒；抵抗；反抗</li>
</ul>
<h5><span id="常用搭配">常用搭配</span></h5><p><img src="https://gitee.com/gyb_1_0/img/raw/master/image-20220110110115494.png" alt="image-20220110110115494"></p>
<h5><span id="同根词">同根词</span></h5><p><img src="https://gitee.com/gyb_1_0/img/raw/master/image-20220110110242377.png" alt="image-20220110110242377"></p>
<h4><span id="4-turbulence">4. turbulence</span></h4><ul>
<li>n. 骚乱，动荡；（空气或水的）湍流，紊流</li>
</ul>
<h5><span id="例句">例句</span></h5><p><img src="https://gitee.com/gyb_1_0/img/raw/master/image-20220110110405996.png" alt="image-20220110110405996"></p>
<h5><span id="同根词">同根词</span></h5><p><img src="https://gitee.com/gyb_1_0/img/raw/master/image-20220110110419527.png" alt="image-20220110110419527"></p>
<h4><span id="5-cynicism">5. cynicism</span></h4><ul>
<li>n. 愤世嫉俗；冷嘲热讽</li>
</ul>
<h5><span id="例句">例句</span></h5><p><img src="https://gitee.com/gyb_1_0/img/raw/master/image-20220110110505445.png" alt="image-20220110110505445"></p>
<h5><span id="同根词">同根词</span></h5><p><img src="https://gitee.com/gyb_1_0/img/raw/master/image-20220110110516398.png" alt="image-20220110110516398"></p>
<h4><span id="6-scepticism">6. scepticism</span></h4><ul>
<li>n. 怀疑主义；怀疑态度</li>
</ul>
<h5><span id="例句">例句</span></h5><p><img src="https://gitee.com/gyb_1_0/img/raw/master/image-20220110110608596.png" alt="image-20220110110608596"></p>
<h5><span id="同根词">同根词</span></h5><p><img src="https://gitee.com/gyb_1_0/img/raw/master/image-20220110110927540.png" alt="image-20220110110927540"></p>
<h3><span id="句式">句式</span></h3><h4><span id="1-take-for-granted">1. take … for granted</span></h4><ul>
<li>认为…是理所当然的;（因视作理所当然而）不把…当回事，对…不予重视（或不知感激）</li>
</ul>
<h5><span id="例句">例句</span></h5><p><img src="https://gitee.com/gyb_1_0/img/raw/master/image-20220110105849511.png" alt="image-20220110105849511"></p>
<h4><span id="2-there-be-timetimes-when">2. there be time/times when</span></h4><ul>
<li>曾经一度、有一个时期、有时</li>
</ul>
<h5><span id="例句">例句</span></h5><p><img src="https://gitee.com/gyb_1_0/img/raw/master/image-20220110111013040.png" alt="image-20220110111013040"></p>
]]></content>
      <tags>
        <tag>英语</tag>
      </tags>
  </entry>
  <entry>
    <title>每日一题--4.1</title>
    <url>/2021/09/10/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-4-1/</url>
    <content><![CDATA[<h1><span id>#</span></h1><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/41-mei-ri-yi-ti.jpg" alt="41-mei-ri-yi-ti"></p>
<span id="more"></span>
<h3><span id="表达式计算">表达式计算</span></h3><ul>
<li>一般借助数据结构<strong>栈</strong>来完成，特别是带有括号的表达式</li>
<li>常见的运算表达式<ul>
<li>中缀表达式 操作数① 运算符② 操作数③  例如 1 + 1</li>
<li>后缀表达式 操作数① 操作数③ 运算符② 例如 1 1 +</li>
</ul>
</li>
<li>求解没有括号的中缀表达式时，可以概括为：<strong>遇到乘除立即算，遇到加减先入栈</strong><ul>
<li><strong>乘除立即算</strong>：把栈顶的元素和当前的元素进行*或者/的计算</li>
<li><strong>加减先入栈</strong>：+号将当前数字进栈，-号将当前数的相反数进栈</li>
</ul>
</li>
<li>表达式的难点在于各个操作符的优先级</li>
</ul>
<h4><span id="代码">代码</span></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">clumsy</span><span class="params">(<span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line">    Deque&lt;Integer&gt; t = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    t.push(N);</span><br><span class="line">    <span class="keyword">int</span> op = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = N - <span class="number">1</span>; i &gt; <span class="number">0</span>; i-- )&#123;</span><br><span class="line">        <span class="keyword">if</span>(op % <span class="number">4</span> == <span class="number">0</span>) t.push(t.pop() * i); <span class="comment">// * 乘</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op % <span class="number">4</span> == <span class="number">1</span>) t.push(t.pop() / i); <span class="comment">// / 除</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op % <span class="number">4</span> == <span class="number">2</span>) t.push(i); <span class="comment">// + 加</span></span><br><span class="line">        <span class="keyword">else</span> t.push(-i); <span class="comment">// - 减</span></span><br><span class="line">        op++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!t.isEmpty())&#123;</span><br><span class="line">        res += t.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4><span id="复杂度分析">复杂度分析</span></h4><ul>
<li>时间复杂度：O(N)。从N到1进栈一次，出栈一次</li>
<li>空间复杂度：O(N)。</li>
</ul>
]]></content>
      <categories>
        <category>每日一题</category>
      </categories>
  </entry>
  <entry>
    <title>深度学习-1</title>
    <url>/2021/09/15/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-1/</url>
    <content><![CDATA[<p>概述<br><span id="more"></span></p>
<p>学习内容：</p>
<pre><code>- 深度学习基础--线性神经网络，多层感知机
- 卷积神经网络--LeNet，AlexNet，VGG，Inception，ResNet
- 循环神经网络--RNN，GRU，LSTM，seq2seq
- 注意力机制--Attention，Transformer
- 优化算法--SGD，Momentum，Adam
- 高性能计算--并行，多GPU，分布式
- 计算机视觉--目标检测，语义分割
- 自然语言处理--词嵌入，BERT
</code></pre><p>深度学习有哪些技术<br>如何实现和调参<br>背后的原因（直觉、数学）</p>
]]></content>
      <categories>
        <category>深度学习</category>
        <category>李沐</category>
      </categories>
  </entry>
  <entry>
    <title>深度学习-10</title>
    <url>/2021/10/04/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-10/</url>
    <content><![CDATA[<h2><span id="参数管理">参数管理</span></h2><ul>
<li>访问参数，用于调试、诊断和可视化。</li>
<li>参数初始化。</li>
<li>在不同模型组件间共享参数</li>
</ul>
<h3><span id="参数访问">参数访问</span></h3><ul>
<li>用Sequential类定义模型，可通过索引来访问模型的任一层</li>
<li>模型像一个列表，每层的参数在其属性中</li>
</ul>
<h4><span id="目标参数">目标参数</span></h4><ul>
<li><p>每个参数都表示为参数类的一个实例</p>
</li>
<li><p>要对参数执行任何操作，首先要访问底层的数值</p>
</li>
<li><p>可以访问权重、偏置、梯度等参数</p>
</li>
</ul>
<h4><span id="一次性访问所有参数">一次性访问所有参数：</span></h4><p>  第一种：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(*[(name, param.shape) <span class="keyword">for</span> name, param <span class="keyword">in</span> net[<span class="number">0</span>].named_parameters()])</span><br><span class="line"><span class="built_in">print</span>(*[(name, param.shape) <span class="keyword">for</span> name, param <span class="keyword">in</span> net.named_parameters()])</span><br></pre></td></tr></table></figure>
<p>第二种：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">net.state_dict()[<span class="string">&#x27;2.bias&#x27;</span>].data	</span><br></pre></td></tr></table></figure>
<h4><span id="从嵌套块收集参数">从嵌套块收集参数</span></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">block1</span>():</span></span><br><span class="line">    <span class="keyword">return</span> nn.Sequential(nn.Linear(<span class="number">4</span>, <span class="number">8</span>), nn.ReLU(),</span><br><span class="line">                         nn.Linear(<span class="number">8</span>, <span class="number">4</span>), nn.ReLU())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">block2</span>():</span></span><br><span class="line">    net = nn.Sequential()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="comment"># 在这里嵌套</span></span><br><span class="line">        net.add_module(<span class="string">f&#x27;block <span class="subst">&#123;i&#125;</span>&#x27;</span>, block1())</span><br><span class="line">    <span class="keyword">return</span> net</span><br><span class="line"></span><br><span class="line">rgnet = nn.Sequential(block2(), nn.Linear(<span class="number">4</span>, <span class="number">1</span>))</span><br><span class="line">rgnet(X)</span><br></pre></td></tr></table></figure>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Sequential(</span><br><span class="line">  (0): Sequential(</span><br><span class="line">    (block 0): Sequential(</span><br><span class="line">      (0): Linear(<span class="attribute">in_features</span>=4, <span class="attribute">out_features</span>=8, <span class="attribute">bias</span>=<span class="literal">True</span>)</span><br><span class="line">      (1): ReLU()</span><br><span class="line">      (2): Linear(<span class="attribute">in_features</span>=8, <span class="attribute">out_features</span>=4, <span class="attribute">bias</span>=<span class="literal">True</span>)</span><br><span class="line">      (3): ReLU()</span><br><span class="line">    )</span><br><span class="line">    (block 1): Sequential(</span><br><span class="line">      (0): Linear(<span class="attribute">in_features</span>=4, <span class="attribute">out_features</span>=8, <span class="attribute">bias</span>=<span class="literal">True</span>)</span><br><span class="line">      (1): ReLU()</span><br><span class="line">      (2): Linear(<span class="attribute">in_features</span>=8, <span class="attribute">out_features</span>=4, <span class="attribute">bias</span>=<span class="literal">True</span>)</span><br><span class="line">      (3): ReLU()</span><br><span class="line">    )</span><br><span class="line">    (block 2): Sequential(</span><br><span class="line">      (0): Linear(<span class="attribute">in_features</span>=4, <span class="attribute">out_features</span>=8, <span class="attribute">bias</span>=<span class="literal">True</span>)</span><br><span class="line">      (1): ReLU()</span><br><span class="line">      (2): Linear(<span class="attribute">in_features</span>=8, <span class="attribute">out_features</span>=4, <span class="attribute">bias</span>=<span class="literal">True</span>)</span><br><span class="line">      (3): ReLU()</span><br><span class="line">    )</span><br><span class="line">    (block 3): Sequential(</span><br><span class="line">      (0): Linear(<span class="attribute">in_features</span>=4, <span class="attribute">out_features</span>=8, <span class="attribute">bias</span>=<span class="literal">True</span>)</span><br><span class="line">      (1): ReLU()</span><br><span class="line">      (2): Linear(<span class="attribute">in_features</span>=8, <span class="attribute">out_features</span>=4, <span class="attribute">bias</span>=<span class="literal">True</span>)</span><br><span class="line">      (3): ReLU()</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">  (1): Linear(<span class="attribute">in_features</span>=4, <span class="attribute">out_features</span>=1, <span class="attribute">bias</span>=<span class="literal">True</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3><span id="参数初始化">参数初始化</span></h3><h4><span id="内置初始化">内置初始化</span></h4><p>下面的代码将所有权重参数初始化为标准差为0.01的高斯随机变量，且将偏置参数设置为0。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_normal</span>(<span class="params">m</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(m) == nn.Linear:</span><br><span class="line">        nn.init.normal_(m.weight, mean=<span class="number">0</span>, std=<span class="number">0.01</span>)</span><br><span class="line">        // 也可以给定常数</span><br><span class="line">        //nn.init.constant_(m.weight, <span class="number">1</span>)</span><br><span class="line">        nn.init.zeros_(m.bias)</span><br><span class="line">net.apply(init_normal)</span><br><span class="line">net[<span class="number">0</span>].weight.data[<span class="number">0</span>], net[<span class="number">0</span>].bias.data[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<h4><span id="自定义初始化">自定义初始化</span></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_init</span>(<span class="params">m</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(m) == nn.Linear:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Init&quot;</span>, *[(name, param.shape)</span><br><span class="line">                        <span class="keyword">for</span> name, param <span class="keyword">in</span> m.named_parameters()][<span class="number">0</span>])</span><br><span class="line">        nn.init.uniform_(m.weight, -<span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">        m.weight.data *= m.weight.data.<span class="built_in">abs</span>() &gt;= <span class="number">5</span></span><br><span class="line"></span><br><span class="line">net.apply(my_init)</span><br><span class="line">net[<span class="number">0</span>].weight[:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">net[<span class="number">0</span>].weight.data[:] += <span class="number">1</span></span><br><span class="line">net[<span class="number">0</span>].weight.data[<span class="number">0</span>, <span class="number">0</span>] = <span class="number">42</span></span><br><span class="line">net[<span class="number">0</span>].weight.data[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<h3><span id="参数绑定">参数绑定</span></h3><p>在多个层间共享参数</p>
<p>定义一个稠密层，然后使用它的参数来设置另一个层的参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 我们需要给共享层一个名称，以便可以引用它的参数。</span></span><br><span class="line">shared = nn.Linear(<span class="number">8</span>, <span class="number">8</span>)</span><br><span class="line">net = nn.Sequential(nn.Linear(<span class="number">4</span>, <span class="number">8</span>), nn.ReLU(),</span><br><span class="line">                    shared, nn.ReLU(),</span><br><span class="line">                    shared, nn.ReLU(),</span><br><span class="line">                    nn.Linear(<span class="number">8</span>, <span class="number">1</span>))</span><br><span class="line">net(X)</span><br><span class="line"><span class="comment"># 检查参数是否相同</span></span><br><span class="line"><span class="built_in">print</span>(net[<span class="number">2</span>].weight.data[<span class="number">0</span>] == net[<span class="number">4</span>].weight.data[<span class="number">0</span>])</span><br><span class="line">net[<span class="number">2</span>].weight.data[<span class="number">0</span>, <span class="number">0</span>] = <span class="number">100</span></span><br><span class="line"><span class="comment"># 确保它们实际上是同一个对象，而不只是有相同的值。</span></span><br><span class="line"><span class="built_in">print</span>(net[<span class="number">2</span>].weight.data[<span class="number">0</span>] == net[<span class="number">4</span>].weight.data[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>
<h5><span id="共享参数的好处">共享参数的好处：</span></h5><p>共享参数通常可以节省内存，并在以下方面具有特定的好处：</p>
<ul>
<li>对于图像识别中的CNN，共享参数使网络能够在图像中的任何地方而不是仅在某个区域中查找给定的功能。</li>
<li>对于RNN，它在序列的各个时间步之间共享参数，因此可以很好地推广到不同序列长度的示例。</li>
<li>对于自动编码器，编码器和解码器共享参数。 在具有线性激活的单层自动编码器中，共享权重会在权重矩阵的不同隐藏层之间强制正交。</li>
</ul>
<h2><span id="延后初始化defers-initialization">延后初始化—defers initialization</span></h2><ul>
<li>框架的<em>延后初始化</em>（defers initialization），即等到我们第一次将数据通过模型传递时，才会动态地推断出每个层的大小。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">net = tf.keras.models.Sequential([</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">256</span>, activation=tf.nn.relu),</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">10</span>),</span><br><span class="line">])</span><br></pre></td></tr></table></figure>
<h3><span id="自定义层">自定义层</span></h3><h4><span id="不带参数的层">不带参数的层</span></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CenteredLayer</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, X</span>):</span></span><br><span class="line">        <span class="keyword">return</span> X - X.mean()</span><br></pre></td></tr></table></figure>
<h4><span id="带参数的层">带参数的层</span></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLinear</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, in_units, units</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.weight = nn.Parameter(torch.randn(in_units, units))</span><br><span class="line">        self.bias = nn.Parameter(torch.randn(units,))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, X</span>):</span></span><br><span class="line">        linear = torch.matmul(X, self.weight.data) + self.bias.data</span><br><span class="line">        <span class="keyword">return</span> F.relu(linear)</span><br></pre></td></tr></table></figure>
<h2><span id="读写文件">读写文件</span></h2><h4><span id="加载和保存张量">加载和保存张量</span></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line">x = torch.arange(<span class="number">4</span>)</span><br><span class="line">torch.save(x, <span class="string">&#x27;x-file&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h4><span id="加载和保存模型参数">加载和保存模型参数</span></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MLP</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.hidden = nn.Linear(<span class="number">20</span>, <span class="number">256</span>)</span><br><span class="line">        self.output = nn.Linear(<span class="number">256</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.output(F.relu(self.hidden(x)))</span><br><span class="line"></span><br><span class="line">net = MLP()</span><br><span class="line">X = torch.randn(size=(<span class="number">2</span>, <span class="number">20</span>))</span><br><span class="line">Y = net(X)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存储文件</span></span><br><span class="line">torch.save(net.state_dict(), <span class="string">&#x27;mlp.params&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接读取文件中存储的参数</span></span><br><span class="line">clone = MLP()</span><br><span class="line">clone.load_state_dict(torch.load(<span class="string">&#x27;mlp.params&#x27;</span>))</span><br><span class="line">clone.<span class="built_in">eval</span>()</span><br></pre></td></tr></table></figure>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">MLP(</span><br><span class="line">  (hidden): Linear(<span class="attribute">in_features</span>=20, <span class="attribute">out_features</span>=256, <span class="attribute">bias</span>=<span class="literal">True</span>)</span><br><span class="line">  (output): Linear(<span class="attribute">in_features</span>=256, <span class="attribute">out_features</span>=10, <span class="attribute">bias</span>=<span class="literal">True</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h2><span id="gpu">GPU</span></h2><h3><span id="计算设备">计算设备</span></h3><ul>
<li>在PyTorch中，CPU和GPU可以用<code>torch.device(&#39;cpu&#39;)</code>和<code>torch.cuda.device(&#39;cuda&#39;)</code>表示。</li>
<li><code>cpu</code>设备意味着所有物理CPU和内存。这意味着PyTorch的计算将尝试使用所有CPU核心。</li>
<li><code>gpu</code>设备只代表一个卡和相应的显存。如果有多个GPU</li>
<li>使用<code>torch.cuda.device(f&#39;cuda:&#123;i&#125;&#39;)</code>来表示第i块GPU（i从0开始）</li>
<li><code>cuda:0</code>和<code>cuda</code>是等价的。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line">torch.device(<span class="string">&#x27;cpu&#x27;</span>), torch.cuda.device(<span class="string">&#x27;cuda&#x27;</span>), torch.cuda.device(<span class="string">&#x27;cuda:1&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h4><span id="查询gpu的数量">查询GPU的数量</span></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.cuda.device_count()</span><br></pre></td></tr></table></figure>
<h4><span id="请求gpu">请求GPU</span></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">try_gpu</span>(<span class="params">i=<span class="number">0</span></span>):</span>  <span class="comment">#@save</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;如果存在，则返回gpu(i)，否则返回cpu()。&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> torch.cuda.device_count() &gt;= i + <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> torch.device(<span class="string">f&#x27;cuda:<span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> torch.device(<span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">try_all_gpus</span>():</span>  <span class="comment">#@save</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;返回所有可用的GPU，如果没有GPU，则返回[cpu(),]。&quot;&quot;&quot;</span></span><br><span class="line">    devices = [torch.device(<span class="string">f&#x27;cuda:<span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br><span class="line">             <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(torch.cuda.device_count())]</span><br><span class="line">    <span class="keyword">return</span> devices <span class="keyword">if</span> devices <span class="keyword">else</span> [torch.device(<span class="string">&#x27;cpu&#x27;</span>)]</span><br><span class="line"></span><br><span class="line">try_gpu(), try_gpu(<span class="number">10</span>), try_all_gpus()</span><br></pre></td></tr></table></figure>
<p>这两个函数允许我们在请求的GPU不存在的情况下运行代码</p>
<h4><span id="张量与gpu">张量与gpu</span></h4><p>默认情况下，张量是在CPU上创建的。</p>
<h5><span id="查询张量所在的设备">查询张量所在的设备:</span></h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x.ctx</span><br></pre></td></tr></table></figure>
<h5><span id="存储在gpu上">存储在GPU上</span></h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X = np.ones((<span class="number">2</span>, <span class="number">3</span>), ctx=try_gpu())</span><br><span class="line">X</span><br></pre></td></tr></table></figure>
<h5><span id="第二个gpu上创建一个随机张量">第二个GPU上创建一个随机张量</span></h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Y = np.random.uniform(size=(<span class="number">2</span>, <span class="number">3</span>), ctx=try_gpu(<span class="number">1</span>))</span><br><span class="line">Y</span><br></pre></td></tr></table></figure>
<h5><span id="复制">复制</span></h5><p>计算X+Y，可以将X传输到第二个GPU进行操作</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211005175504386.png" alt="image-20211005175504386"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Z = X.copyto(try_gpu(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(X)</span><br><span class="line"><span class="built_in">print</span>(Z)	</span><br></pre></td></tr></table></figure>
<ul>
<li>只想在变量存在于不同设备中时进行复制。在这种情况下，我们可以调用<code>as_in_ctx</code>。</li>
<li>如果变量已经存在于指定的设备中，则这不会进行任何操作。除非你特别想创建一个复制，否则选择<code>as_in_ctx</code>方法。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Z.as_in_ctx(try_gpu(<span class="number">1</span>)) <span class="keyword">is</span> Z</span><br></pre></td></tr></table></figure>
<h4><span id="神经网络与gpu">神经网络与GPU</span></h4><p>神经网络模型可以指定设备</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">net = nn.Sequential(nn.Linear(<span class="number">3</span>, <span class="number">1</span>))</span><br><span class="line">net = net.to(device=try_gpu())</span><br></pre></td></tr></table></figure>
<h4><span id="小结">小结</span></h4><ul>
<li>我们可以指定用于存储和计算的设备，例如CPU或GPU。默认情况下，数据在主内存中创建，然后使用CPU进行计算。</li>
<li>深度学习框架要求计算的所有输入数据都在同一设备上，无论是CPU还是GPU。</li>
<li>不经意地移动数据可能会显著降低性能。一个典型的错误如下：计算GPU上每个小批量的损失，并在命令行中将其报告给用户（或将其记录在NumPy <code>ndarray</code>中）时，将触发全局解释器锁，从而使所有GPU阻塞。最好是为GPU内部的日志分配内存，并且只移动较大的日志。</li>
</ul>
]]></content>
      <categories>
        <category>深度学习</category>
        <category>李沐</category>
      </categories>
  </entry>
  <entry>
    <title>深度学习-11</title>
    <url>/2021/10/05/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-11/</url>
    <content><![CDATA[<h3><span id="不变性">不变性</span></h3><ul>
<li>卷积神经网络正是将<em>空间不变性</em>（spatial invariance）的这一概念系统化，从而基于这个模型使用较少的参数来学习有用的表示。</li>
</ul>
<p>适合于计算机视觉的神经网络结构：</p>
<ol>
<li><em>平移不变性</em>（translation invariance）：不管检测对象出现在图像中的哪个位置，神经网络的前面几层应该对相同的图像区域具有相似的反应，即为“平移不变性”。</li>
<li><em>局部性</em>（locality）：神经网络的前面几层应该只探索输入图像中的局部区域，而不过度在意图像中相隔较远区域的关系，这就是“局部性”原则。最终，在后续神经网络，整个图像级别上可以集成这些局部特征用于预测。</li>
</ol>
<h3><span id="限制多层感知机">限制多层感知机</span></h3><ul>
<li>多层感知机的输入：二维图像$X$<ul>
<li>隐藏表示$H$是一个矩阵，代码中表示为二维张量，其中X和H具有相同的形状</li>
</ul>
</li>
<li>可以认为，无论是输入还是隐藏表示都拥有空间结构</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211005183704367.png" alt="image-20211005183704367"></p>
<h4><span id="平移不变性">平移不变性</span></h4><ul>
<li>意味着检测对象在输入$X$中的平移，应该仅仅导致隐藏表示$H$中的平移</li>
<li>也就是说，$V$和$U$实际上不依赖于$(i, j)$的值，即$[V]_{i,j,a,b}=[V]_{a,b}$</li>
<li>并且U是一个常数，比如u，所以可以将H定义简化为</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211005184922293.png" alt="image-20211005184922293"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211005185051019.png" alt="image-20211005185051019"></p>
<h4><span id="局部性">局部性</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211005185114383.png" alt="image-20211005185114383"></p>
<ul>
<li>(6.1.3)是一个 <em>卷积层</em> （convolutional layer），而卷积神经网络是包含卷积层的一类特殊的神经网络。</li>
<li>$V$被称为<em>卷积核</em> （convolution kernel） 或者 <em>滤波器</em> （filter），它仅仅是可学习的一个层的权重。</li>
</ul>
<p>卷积神经网络和多层感知机的训练差异：</p>
<ul>
<li>以前，多层感知机可能需要数十亿个参数来表示网络中的一层，而现在卷积神经网络通常只需要几百个参数，而且不需要改变输入或隐藏表示的维数。</li>
<li>参数大幅减少的代价是，我们的特征现在是平移不变的，并且当确定每个隐藏激活的值时，每一层只能包含局部的信息。</li>
<li>以上所有的权重学习都将依赖于归纳偏置</li>
<li>当这种偏置与现实相符时，我们就能得到样本有效的模型，并且这些模型能很好地泛化到未知数据中</li>
<li>如果这偏置与现实不符时，比如当图像不满足平移不变时，我们的模型可能难以拟合我们的训练数据</li>
</ul>
<h4><span id="卷积">卷积</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211005185813374.png" alt="image-20211005185813374"></p>
<h4><span id="通道">通道</span></h4><ul>
<li>图像不是二维张量，而是一个由高度、宽度和颜色组成的三维张量，比如包含1024×1024×3 个像素。</li>
<li>前两个轴与像素的空间位置有关，而第三个轴可以看作是每个像素的多维表示。</li>
<li>因此，我们将 XX索引为$ [X]_{i,j,k}$ 。由此卷积相应地调整为  $[V]_{a,b,c}$ ，而不是 $[V]_{a,b}$</li>
<li>由于输入图像是三维的，我们的隐藏表示 H 也最好采用三维张量。</li>
<li>我们可以把隐藏表示想象为一系列具有二维张量的 <em>通道</em> （channel）。 这些通道有时也被称为 <em>特征映射</em> （feature maps），因为每个通道都向后续层提供一组空间化的学习特征。 </li>
<li>直观上你可以想象在靠近输入的底层，一些通道专门识别边，而其他通道专门识别纹理。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211005190429500.png" alt="image-20211005190429500"></p>
]]></content>
      <categories>
        <category>深度学习</category>
        <category>李沐</category>
      </categories>
  </entry>
  <entry>
    <title>深度学习-12</title>
    <url>/2021/10/07/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-12/</url>
    <content><![CDATA[<h4><span id="互相关运算">互相关运算</span></h4><ul>
<li>卷积层所表达的运算其实是互相关运算 (cross-correlation)</li>
<li>在卷积层中，输入张量和核张量通过互相关运算产生输出张量。</li>
</ul>
<h5><span id="例子">例子：</span></h5><ul>
<li><p>输入是高度为 3 、宽度为 3 的二维张量（即形状为 3×3 ）</p>
</li>
<li><p>卷积核的高度和宽度都是 2，而卷积核窗口（或卷积窗口）的形状由内核的高度和宽度决定（即 2×2 ）</p>
</li>
<li><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211007235851122.png" alt="image-20211007235851122"></p>
</li>
</ul>
<h5><span id="注意">注意：</span></h5><ul>
<li><p>输出大小略小于输入大小。</p>
<ul>
<li>这是因为卷积核的宽度和高度大于1， 而卷积核只与图像中每个大小完全适合的位置进行互相关运算。 </li>
<li>输出大小等于输入大小$n_h×n_w$减去卷积核大小$k_h×k_w$，即$(n_h-k_h+1)×(n_w-k_w+1)$</li>
</ul>
</li>
<li><p>需要足够的空间在图像上“移动”卷积核。</p>
</li>
</ul>
<h5><span id="代码实现">代码实现</span></h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">corr2d</span>(<span class="params">X, K</span>):</span>  <span class="comment">#@save</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算二维互相关运算。&quot;&quot;&quot;</span></span><br><span class="line">    h, w = K.shape</span><br><span class="line">    Y = torch.zeros((X.shape[<span class="number">0</span>] - h + <span class="number">1</span>, X.shape[<span class="number">1</span>] - w + <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Y.shape[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(Y.shape[<span class="number">1</span>]):</span><br><span class="line">            Y[i, j] = (X[i:i + h, j:j + w] * K).<span class="built_in">sum</span>()</span><br><span class="line">    <span class="keyword">return</span> Y</span><br></pre></td></tr></table></figure>
<h4><span id="卷积层">卷积层</span></h4><ul>
<li>卷积层对输入和卷积核权重进行互相关运算，并在添加标量偏置之后产生输出。</li>
<li>卷积层中的两个被训练的参数是<strong>卷积核权重</strong>和<strong>标量偏置</strong>。</li>
<li>在训练基于卷积层的模型时，我们也随机初始化卷积核权重。</li>
</ul>
<h5><span id="代码实现">代码实现</span></h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Conv2D</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, kernel_size</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.weight = nn.Parameter(torch.rand(kernel_size))</span><br><span class="line">        self.bias = nn.Parameter(torch.zeros(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="keyword">return</span> corr2d(x, self.weight) + self.bias</span><br></pre></td></tr></table></figure>
<p>将带有 h×w 卷积核的卷积层称为 h×w卷积层。</p>
<h4><span id="卷积层中的填充和步幅">卷积层中的填充和步幅</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211012091332315.png" alt="image-20211012091332315"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211012091105864.png" alt="image-20211012091105864"></p>
<ul>
<li><p>这两个参数是超参数</p>
</li>
<li><p>填充通常会使得输入和输出高宽一致</p>
</li>
<li>通常步幅等于1，不选为1是因为计算量太大了，选2可以减半</li>
</ul>
]]></content>
      <categories>
        <category>深度学习</category>
        <category>李沐</category>
      </categories>
  </entry>
  <entry>
    <title>深度学习-2</title>
    <url>/2021/09/15/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-2/</url>
    <content><![CDATA[<h3><span id="线性代数">线性代数</span></h3><ul>
<li>torch.tensor()<ul>
<li>构建张量</li>
<li>torch.tensor([3.0])</li>
<li>标量由只有一个元素的张量来表示</li>
</ul>
</li>
<li>torch.arange()<ul>
<li>torch.arange(4): tensor([0, 1, 2, 3])<ul>
<li>向量可视为标量值组成的列表</li>
</ul>
</li>
<li>用张量的索引访问任一元素</li>
</ul>
</li>
<li>len(x)：张量的长度</li>
<li>x.shape：张量的形状</li>
<li>torch.arange(20).reshape(5, 4)<ul>
<li>构建m x n的矩阵</li>
</ul>
</li>
<li>矩阵的转置<ul>
<li>A.T</li>
<li>对称矩阵等于其转置</li>
</ul>
</li>
<li>torch.arange(24).reshape(2, 3, 4)<ul>
<li>更多轴的数据结构</li>
</ul>
</li>
<li>clone()<ul>
<li>克隆</li>
</ul>
</li>
<li>哈达玛积：两个矩阵的按元素乘法<ul>
<li>A * B，两个矩阵中的对应位置的元素相乘</li>
<li>得到的是一个矩阵</li>
</ul>
</li>
<li>求和<ul>
<li>计算矩阵中元素的和<ul>
<li>sum()</li>
</ul>
</li>
<li>指定轴进行求和<ul>
<li>A.sum(axis = 0)</li>
<li>A.sum(axis = 1)</li>
<li>A.sum(axis = [0, 1])</li>
</ul>
</li>
</ul>
</li>
<li>平均值<ul>
<li>mean()</li>
<li>指定列进行求平均值<ul>
<li>A.mean(axis = 0)</li>
</ul>
</li>
</ul>
</li>
<li>计算总和或均值时保持轴数不变<ul>
<li>A.sum(axis = 1, keepdims=True)</li>
</ul>
</li>
<li>通过广播除法<ul>
<li>相同轴数的张量相除</li>
<li>A / sum_A  <ul>
<li>sum_A = A.sum(axis = 1, keepdims = True)</li>
</ul>
</li>
</ul>
</li>
<li>某个轴计算A元素的累计总和<ul>
<li>A.cumsum(axis = 0)</li>
</ul>
</li>
<li>点积<ul>
<li>torch.dot(A, B)</li>
<li>相同位置的按元素乘积的和</li>
</ul>
</li>
<li>矩阵的向量积<ul>
<li>torch.mv(A, x)</li>
</ul>
</li>
<li>矩阵-矩阵乘法AB<ul>
<li>torch.mm(A, B)</li>
</ul>
</li>
<li>范数<ul>
<li>L2范数是<strong>向量元素</strong>平方和的平方根<ul>
<li>torch.norm()</li>
</ul>
</li>
<li>L1范数是<strong>向量元素</strong>的绝对值之和<ul>
<li>torch.abs(u).sum()</li>
</ul>
</li>
<li>弗罗贝尼乌斯范数（Frobenius norm） 是<strong>矩阵元素</strong>平方和的平方根<ul>
<li>torch.norm(torch.ones((4, 9)))</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3><span id="导数">导数</span></h3><ul>
<li><h4><span id="导数和亚导数">导数和亚导数</span></h4><ul>
<li>亚导数：将原函数分段</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1625902032952.png" alt></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1625902099718.png" alt></p>
<ul>
<li><h4><span id="梯度">梯度</span></h4><ul>
<li>将导数扩展到向量</li>
<li>粗体是向量，普通为标量</li>
</ul>
</li>
</ul>
<p>​     <img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1625902153965.png" alt></p>
<p>​     <img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1625902385899.png" alt></p>
<ul>
<li>样例：</li>
</ul>
<p>​     <img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1625902517778.png" alt></p>
<p>​     <img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1625902863904.png" alt></p>
<ul>
<li>扩展到向量对向量的求导</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1625903027679.png" alt></p>
<ul>
<li>样例：</li>
</ul>
<p>​     <img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1625903095687.png" alt></p>
<ul>
<li>扩展到矩阵</li>
</ul>
<p>​     <img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1625903229400.png" alt></p>
<h4><span id="向量的链式法则">向量的链式法则</span></h4><p>​     <img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1625910833856.png" alt></p>
<p>​     <img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1625911503573.png" alt></p>
<p>​     <img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1625911595632.png" alt></p>
<h4><span id="符号求导和数值求导">符号求导和数值求导</span></h4><p> 数值求导：用极限的方法</p>
<p> 计算图</p>
<p>​     <img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1625919011494.png" alt></p>
<h4><span id="自动求导">自动求导</span></h4><ul>
<li><p>​    前向：从最里面的开始求导</p>
</li>
<li><p>​    反向：从最外面的开始求导</p>
<h1><span id>   <img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1625919122399.png" alt></span></h1></li>
<li>总结<ul>
<li>前向：执行图，存储中间结果</li>
<li>反向：从相反方向执行图，去除不需要的枝</li>
</ul>
</li>
</ul>
<p>​         <img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1625919248118.png" alt></p>
<ul>
<li><p>复杂度</p>
</li>
<li><p>反向：</p>
<ul>
<li>计算复杂度：O(n)，n是操作子个数</li>
<li>内存复杂度：O(n)，需要存储正向的所有中间结果</li>
</ul>
</li>
<li>正向：<ul>
<li>计算复杂度：O(n)，用来计算一个变量的梯度</li>
<li>内存复杂度：O(1)</li>
</ul>
</li>
</ul>
<h4><span id="自动求导的实现">自动求导的实现</span></h4><ul>
<li><p>​     存储梯度： x = torch.arange(4.0, requires_grad = True)</p>
</li>
<li><p>​     梯度：x.grad(默认是None)</p>
</li>
<li><p>​     反向传播函数：y.backward()</p>
</li>
<li><p>​     清除之前的梯度：x.grad.zero_()</p>
</li>
<li><p>​     y.detach()，将y视为一个常</p>
</li>
</ul>
]]></content>
      <categories>
        <category>深度学习</category>
        <category>李沐</category>
      </categories>
  </entry>
  <entry>
    <title>深度学习-3</title>
    <url>/2021/09/15/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-3/</url>
    <content><![CDATA[<p>线性模型</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1625923447649.png" alt></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1625923486743.png" alt></p>
<ul>
<li>衡量预估质量</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1625923646064.png" alt></p>
<ul>
<li><p>训练数据</p>
</li>
<li><p>参数学习</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1625923803054.png" alt></p>
<ul>
<li>显示解（只有线性回归有）</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1625924384385.png" alt></p>
<ul>
<li>总结</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1625924585608.png" alt></p>
<hr>
<ul>
<li>基础优化方法</li>
</ul>
<p>​    - 梯度下降</p>
<p>​    - <img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1626507973586.png" alt></p>
<p>​        - 梯度是下降最快的地方</p>
<p>​        - 学习率的选择</p>
<p>​            - 不能太小，也不能太大</p>
<p>​            - <img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1626508134770.png" alt></p>
<p>​    - 小批量随机梯度下降</p>
<p>​    - <img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1626508200540.png" alt></p>
<p>​        - 选择批量大小</p>
<p>​        - <img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1626508275803.png" alt></p>
<ul>
<li>总结</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1626508352840.png" alt></p>
<hr>
<h2><span id="从零开始实现线性回归"><strong>从零开始实现线性回归</strong></span></h2><h3><span id="自己构建"><strong>自己构建</strong></span></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib </span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">&#x27;KMP_DUPLICATE_LIB_OK&#x27;</span>] = <span class="string">&#x27;TRUE&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># y = Xw + b + e</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据带有噪声的线性模型构造一个的人造数据集</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">synthetic_data</span>(<span class="params">w, b, num_examples</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 均值为0，方差为1，大小</span></span><br><span class="line"></span><br><span class="line">    X = torch.normal(<span class="number">0</span>, <span class="number">1</span>, (num_examples, <span class="built_in">len</span>(w)))</span><br><span class="line"></span><br><span class="line">    y = torch.matmul(X, w) + b </span><br><span class="line"></span><br><span class="line">    y += torch.normal(<span class="number">0</span>, <span class="number">0.01</span>, y.shape) <span class="comment"># 加入噪音</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> X, y.reshape((-<span class="number">1</span>, <span class="number">1</span>)) <span class="comment"># 做成一个列向量返回</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 接受批量大小、特征矩阵和标签向量作为输入</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出大小为batch_size的小批量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_iter</span>(<span class="params">batch_size, features, labels</span>):</span></span><br><span class="line"></span><br><span class="line">    num_examples = <span class="built_in">len</span>(features)</span><br><span class="line"></span><br><span class="line">    indices = <span class="built_in">list</span>(<span class="built_in">range</span>(num_examples))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 样本是随机读取的，没有特定的顺序</span></span><br><span class="line"></span><br><span class="line">    random.shuffle(indices)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, num_examples, batch_size):</span><br><span class="line"></span><br><span class="line">        batch_indices = torch.tensor(</span><br><span class="line"></span><br><span class="line">            indices[i:<span class="built_in">min</span>(i + batch_size, num_examples)])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> features[batch_indices], labels[batch_indices]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">true_w = torch.tensor([<span class="number">2</span>, -<span class="number">3.4</span>])</span><br><span class="line"></span><br><span class="line">true_b = <span class="number">4.2</span></span><br><span class="line"></span><br><span class="line">features, labels = synthetic_data(true_w, true_b, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看特征和标签的相关性</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># d2l.set_figsize()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># d2l.plt.scatter(features[:, 1].detach().numpy(),</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#                 labels.detach().numpy(), 1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># d2l.plt.show()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义初始化模型参数</span></span><br><span class="line"></span><br><span class="line">w = torch.normal(<span class="number">0</span>, <span class="number">0.01</span>, size=(<span class="number">2</span>, <span class="number">1</span>), requires_grad=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">b = torch.zeros(<span class="number">1</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义模型</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linreg</span>(<span class="params">X, w, b</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;线性回归模型&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> torch.matmul(X, w) + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义损失函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">squared_loss</span>(<span class="params">y_hat, y</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;均方损失&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (y_hat - y.reshape(y_hat.shape)) ** <span class="number">2</span> / <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义优化算法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sgd</span>(<span class="params">params, lr, batch_size</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;小批量随机梯度下降&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line"></span><br><span class="line">            param -= lr * param.grad / batch_size</span><br><span class="line"></span><br><span class="line">            param.grad.zero_()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练过程</span></span><br><span class="line"></span><br><span class="line">lr = <span class="number">0.03</span> <span class="comment"># 学习率</span></span><br><span class="line"></span><br><span class="line">num_epochs = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">net = linreg</span><br><span class="line"></span><br><span class="line">loss = squared_loss</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> X, y <span class="keyword">in</span> data_iter(batch_size, features, labels):</span><br><span class="line"></span><br><span class="line">        l = loss(net(X, w, b), y) <span class="comment"># x和y的小批量损失</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 因为l形状是（batch_size, 1），而不是一个标量。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># l中的所有元素被加到一起</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 并以此计算关于[w, b]的梯度</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        l.<span class="built_in">sum</span>().backward()</span><br><span class="line"></span><br><span class="line">        sgd([w, b], lr, batch_size)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line"></span><br><span class="line">        train_l = loss(net(features, w, b), labels)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;epoch <span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span>, loss <span class="subst">&#123;<span class="built_in">float</span>(train_l.mean()):f&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3><span id="使用模板"><strong>使用模板</strong></span></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch </span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> torch.utils <span class="keyword">import</span> data</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">true_w = torch.tensor([<span class="number">2</span>, -<span class="number">3.4</span>])</span><br><span class="line"></span><br><span class="line">true_b = <span class="number">4.2</span></span><br><span class="line"></span><br><span class="line">features, labels = d2l.synthetic_data(true_w, true_b, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_array</span>(<span class="params">data_arrays, batch_size, is_train=<span class="literal">True</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;构造一个PyTorch的数据迭代器&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    dataset = data.TensorDataset(*data_arrays)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data.DataLoader(dataset, batch_size, shuffle=is_train)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">data_iter = load_array((features, labels), batch_size)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">next</span>(<span class="built_in">iter</span>(data_iter))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用框架的预定义好的层</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;nn&#x27;是神经网络的缩写</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line">net = nn.Sequential(nn.Linear(<span class="number">2</span>, <span class="number">1</span>)) <span class="comment"># 输入二维，输出一维</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化模型参数</span></span><br><span class="line"></span><br><span class="line">net[<span class="number">0</span>].weight.data.normal_(<span class="number">0</span>, <span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line">net[<span class="number">0</span>].bias.data.fill_(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 均方误差</span></span><br><span class="line"></span><br><span class="line">loss = nn.MSELoss()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># SGD</span></span><br><span class="line"></span><br><span class="line">trainer = torch.optim.SGD(net.parameters(), lr=<span class="number">0.03</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num_epochs = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> X, y <span class="keyword">in</span> data_iter:</span><br><span class="line"></span><br><span class="line">        l = loss(net(X), y)</span><br><span class="line"></span><br><span class="line">        trainer.zero_grad()</span><br><span class="line"></span><br><span class="line">        l.backward()</span><br><span class="line"></span><br><span class="line">        trainer.step()</span><br><span class="line"></span><br><span class="line">    l = loss(net(features), labels)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;epoch <span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span>, loss <span class="subst">&#123;l:f&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>深度学习</category>
        <category>李沐</category>
      </categories>
  </entry>
  <entry>
    <title>深度学习-4</title>
    <url>/2021/09/28/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-4/</url>
    <content><![CDATA[<h2><span id="回归和分类softmax回归">回归和分类，softmax回归</span></h2><ul>
<li>回归：估计一个连续值<ul>
<li>单连续数值输出</li>
<li>自然区间R</li>
<li>跟真实值的区别作为损失</li>
<li><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1626668060712.png" alt></li>
</ul>
</li>
<li>分类：预测一个离散类别<ul>
<li>通常多个输出</li>
<li>输出i是预测为第i类的置信度</li>
<li><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1626667792919.png" alt></li>
</ul>
</li>
<li>从回归到多类分类<ul>
<li>均方损失<ul>
<li>对类别进行一位有效编码<ul>
<li>$y = [y_1, y_2, y_3, \ldots, y_n]^T$</li>
<li>$y_i = \begin{cases} 1, &amp; if\quad i = y \\0, &amp; otherwise\end{cases}$</li>
</ul>
</li>
<li>使用均方损失训练</li>
<li>最大值作为预测<ul>
<li>$\hat{y} = argmax{o_i}$</li>
</ul>
</li>
<li>需要更置信的识别正确类</li>
</ul>
</li>
<li>校验比例<ul>
<li>输出匹配概率（非负，和为1）<ul>
<li>$\hat{y} = softmax(o)$</li>
<li>$\hat{y_i} = \frac{exp(o_i)}{\sum_{k} exp(o_k)}$</li>
<li><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1626667792919.png" alt></li>
</ul>
</li>
<li>概率$y和\hat{y}$的区别作为损失</li>
<li>交叉熵<ul>
<li>常用来衡量两个概率的区别<ul>
<li>$H(p, q) = \sum_i - p_ilog(q_i)$</li>
</ul>
</li>
<li>将它作为损失<ul>
<li>$l(y, \hat{y}) = - \sum_i y_ilog(\hat{y_i})$ = $-log\hat{y}_y$</li>
<li>其梯度是真实概率和预测概率的区别</li>
<li>$\partial_{o_i}l(y, \hat{y}) = softmax(o)_i - y_i$</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>总结<ul>
<li>Softmax回归是一个多类分类模型</li>
<li>使用Softmax操作子得到每个类的预测置信度</li>
<li>使用交叉熵来测量预测和标号的区别作为损失函数</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2><span id="损失函数">损失函数</span></h2><ul>
<li>L2 Loss<ul>
<li>$l(y, y’) = \frac{1}{2}(y - y’)^2$</li>
<li>$y:真实值，y’:预测值$</li>
</ul>
</li>
<li>L1 Loss<ul>
<li>$l(y, y’) = |y - y’|$ </li>
</ul>
</li>
<li>Huber’s Robust Loss<ul>
<li>$l(y, y’) = \begin{cases} |y - y’| - \frac{1}{2} &amp; if \quad |y - y’| &gt; 1 \\ \frac{1}{2}(y - y’)^2 &amp; otherwise \end{cases}$</li>
</ul>
</li>
</ul>
<h2><span id="图像分类数据集">图像分类数据集</span></h2><ul>
<li>MNIST数据集是图像分类中广泛使用的数据集之一，过于简单</li>
<li>使用类似但更复杂的Fashion-MNIST数据集</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.utils <span class="keyword">import</span> data</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&quot;KMP_DUPLICATE_LIB_OK&quot;</span>]=<span class="string">&quot;TRUE&quot;</span></span><br><span class="line">d2l.use_svg_display()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过框架中的内置函数将Fashion-MNIST数据集下载并读取到内存中</span></span><br><span class="line"><span class="comment"># 通过ToTensor实例将图像数据从PIL类型变换成32位浮点数格式</span></span><br><span class="line"><span class="comment"># 并除以255是的所有像素的数据均在0到1之间</span></span><br><span class="line">trans = transforms.ToTensor()</span><br><span class="line">mnist_train = torchvision.datasets.FashionMNIST(</span><br><span class="line">    root = <span class="string">&#x27;../data&#x27;</span>, train = <span class="literal">True</span>, transform = trans, download = <span class="literal">False</span></span><br><span class="line">)</span><br><span class="line">mnist_test = torchvision.datasets.FashionMNIST(</span><br><span class="line">    root = <span class="string">&#x27;../data&#x27;</span>, train = <span class="literal">False</span>, transform = trans, download = <span class="literal">False</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_fashion_mnist_labels</span>(<span class="params">labels</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;返回Fashion-MNIST数据集的文本标签&#x27;&#x27;&#x27;</span></span><br><span class="line">    text_labels = [</span><br><span class="line">        <span class="string">&#x27;t-shirt&#x27;</span>, <span class="string">&#x27;trouser&#x27;</span>, <span class="string">&#x27;pullover&#x27;</span>, <span class="string">&#x27;dress&#x27;</span>, <span class="string">&#x27;coat&#x27;</span>, <span class="string">&#x27;sandal&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;shirt&#x27;</span>, <span class="string">&#x27;sneaker&#x27;</span>, <span class="string">&#x27;bag&#x27;</span>, <span class="string">&#x27;ankle boot&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> [text_labels[<span class="built_in">int</span>(i)] <span class="keyword">for</span> i <span class="keyword">in</span> labels]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_images</span>(<span class="params">imgs, num_rows, num_cols, titles = <span class="literal">None</span>, scale = <span class="number">1.5</span></span>):</span></span><br><span class="line">    figsize = (num_cols * scale, num_rows * scale)</span><br><span class="line">    _, axes = d2l.plt.subplots(num_rows, num_cols, figsize=figsize)</span><br><span class="line">    axes = axes.flatten()</span><br><span class="line">    <span class="keyword">for</span> i, (ax, img) <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">zip</span>(axes, imgs)):</span><br><span class="line">        <span class="keyword">if</span> torch.is_tensor(img):</span><br><span class="line">            ax.imshow(img.numpy())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ax.imshow(img)</span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">256</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_dataloader_workers</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;使用4个进程来读取数据&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为了使我们在读取训练集和测试集时更容易，我们使用内置的数据迭代器</span></span><br><span class="line"><span class="comment"># 数据加载器每次都会读取一小批量数据，大小为batch_size。</span></span><br><span class="line"><span class="comment"># 我们在训练数据迭代器中还随机打乱了所有样本。</span></span><br><span class="line">train_iter = data.DataLoader(mnist_train, batch_size, shuffle=<span class="literal">True</span>, </span><br><span class="line">                            num_workers=get_dataloader_workers())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取训练数据所需的时间</span></span><br><span class="line">timer = d2l.Timer()</span><br><span class="line"><span class="keyword">for</span> X, y <span class="keyword">in</span> train_iter:</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;timer.stop():<span class="number">.2</span>f&#125;</span> sec&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 load_data_fashion_mnist 函数 用于获取和读取Fashion-MNIST数据集</span></span><br><span class="line"><span class="comment"># 返回训练集和验证集的数据迭代器</span></span><br><span class="line"><span class="comment"># 还接受一个可选参数，用来将图像大小调整为另一种形状</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_data_fashion_mnist</span>(<span class="params">batch_size, resize=<span class="literal">None</span></span>):</span>  <span class="comment">#@save</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;下载Fashion-MNIST数据集，然后将其加载到内存中。&quot;&quot;&quot;</span></span><br><span class="line">    trans = [transforms.ToTensor()]</span><br><span class="line">    <span class="keyword">if</span> resize:</span><br><span class="line">        trans.insert(<span class="number">0</span>, transforms.Resize(resize))</span><br><span class="line">    trans = transforms.Compose(trans)</span><br><span class="line">    mnist_train = torchvision.datasets.FashionMNIST(root=<span class="string">&quot;../data&quot;</span>,</span><br><span class="line">                                                    train=<span class="literal">True</span>,</span><br><span class="line">                                                    transform=trans,</span><br><span class="line">                                                    download=<span class="literal">False</span>)</span><br><span class="line">    mnist_test = torchvision.datasets.FashionMNIST(root=<span class="string">&quot;../data&quot;</span>,</span><br><span class="line">                                                   train=<span class="literal">False</span>,</span><br><span class="line">                                                   transform=trans,</span><br><span class="line">                                                   download=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">return</span> (data.DataLoader(mnist_train, batch_size, shuffle=<span class="literal">True</span>,</span><br><span class="line">                            num_workers=get_dataloader_workers()),</span><br><span class="line">            data.DataLoader(mnist_test, batch_size, shuffle=<span class="literal">False</span>,</span><br><span class="line">                            num_workers=get_dataloader_workers()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">train_iter, test_iter = load_data_fashion_mnist(<span class="number">32</span>, resize=<span class="number">64</span>)</span><br><span class="line"><span class="keyword">for</span> X, y <span class="keyword">in</span> train_iter:</span><br><span class="line">    <span class="built_in">print</span>(X.shape, X.dtype, y.shape, y.dtype)</span><br><span class="line">    <span class="keyword">break</span>                     </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>深度学习</category>
        <category>李沐</category>
      </categories>
  </entry>
  <entry>
    <title>深度学习--6</title>
    <url>/2021/09/28/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-6/</url>
    <content><![CDATA[<h1><span id="模型选择">模型选择</span></h1><h2><span id="训练误差和泛化误差">训练误差和泛化误差</span></h2><h3><span id="训练误差">训练误差</span></h3><ul>
<li>模型在训练数据上的误差</li>
</ul>
<h3><span id="泛化误差">泛化误差</span></h3><ul>
<li>模型在新数据上的误差<br><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627042102953.png" alt></li>
</ul>
<h4><span id="几个倾向于影响模型泛化的因素">几个倾向于影响模型泛化的因素</span></h4><ol>
<li>可调整参数的数量。当可调整参数的数量（有时称为<em>自由度</em>）很大时，模型往往更容易过拟合。</li>
<li>参数采用的值。当权重的取值范围较大时，模型可能更容易过拟合。</li>
<li>训练样本的数量。即使你的模型很简单，也很容易过拟合只包含一两个样本的数据集。而过拟合一个有数百万个样本的数据集则需要一个极其灵活的模型。</li>
</ol>
<h2><span id="验证数据集和测试数据集">验证数据集和测试数据集</span></h2><h3><span id="验证数据集">验证数据集</span></h3><ul>
<li>一个用来评估模型好坏的数据集</li>
<li>例如拿出50%的训练数据</li>
<li>不要跟训练数据混在一起(常犯错误)</li>
</ul>
<h3><span id="测试数据集">测试数据集</span></h3><ul>
<li>只用一次的数据集</li>
<li>例子<ul>
<li>未来的考试</li>
<li>出价的房子的实际成交价</li>
<li>用在Kaggle私有排行榜的数据集</li>
</ul>
</li>
</ul>
<h3><span id="k-则交叉验证">K-则交叉验证</span></h3><ul>
<li>没有足够多的数据时使用</li>
<li>算法：<ul>
<li>将训练数据分割成K块</li>
<li>For i = 1, … , K<ul>
<li>使用第i块作为验证数据集，其余的作为训练数据集</li>
</ul>
</li>
<li>报告K个验证集误差的平均</li>
</ul>
</li>
<li>常用： K = 5或10</li>
</ul>
<h1><span id="过拟合和欠拟合">过拟合和欠拟合</span></h1><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627043351063.png" alt></p>
<h2><span id="模型容量">模型容量</span></h2><ul>
<li>拟合各种函数的能力</li>
<li>低容量的模型难以拟合训练数据</li>
<li>高容量的模型可以记住所有的训练数据</li>
</ul>
<h3><span id="模型容量的影响">模型容量的影响</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627043618984.png" alt></p>
<h3><span id="估计模型容量">估计模型容量</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627043828411.png" alt></p>
<h2><span id="vc维">VC维</span></h2><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627044034962.png" alt></p>
<h3><span id="线性分类器的vc维">线性分类器的VC维</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627044121560.png" alt></p>
<h3><span id="vc维的用处">VC维的用处</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627044152864.png" alt></p>
<h2><span id="数据复杂度">数据复杂度</span></h2><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627044416343.png" alt></p>
<h2><span id="总结">总结</span></h2><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627044492111.png" alt></p>
]]></content>
      <categories>
        <category>深度学习</category>
        <category>李沐</category>
      </categories>
  </entry>
  <entry>
    <title>深度学习--7</title>
    <url>/2021/09/28/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-7/</url>
    <content><![CDATA[<h1><span id="权重衰退">权重衰退</span></h1><p>简单地说，就是在损失函数中对权重进行惩罚</p>
<h2><span id="使用均方范数作为硬件限制">使用均方范数作为硬件限制</span></h2><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627287443923.png" alt></p>
<h2><span id="使用均方范数作为柔性限制">使用均方范数作为柔性限制</span></h2><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627287476111.png" alt></p>
<h3><span id="演示">演示</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627287494491.png" alt></p>
<h2><span id="参数更新法则">参数更新法则</span></h2><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627287506771.png" alt></p>
<h2><span id="总结">总结</span></h2><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627287518390.png" alt></p>
<h1><span id="丢弃法">丢弃法</span></h1><h2><span id="动机">动机</span></h2><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627287525921.png" alt></p>
<h2><span id="无偏差的加入噪音">无偏差的加入噪音</span></h2><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627287534133.png" alt></p>
<h3><span id="使用丢弃法">使用丢弃法</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627287552258.png" alt></p>
<h3><span id="推理中的丢弃法">推理中的丢弃法</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627287597990.png" alt></p>
<h2><span id="总结">总结</span></h2><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627287562082.png" alt></p>
<h1><span id="数值稳定性">数值稳定性</span></h1><h2><span id="神经网络的梯度">神经网络的梯度</span></h2><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627129686534.png" alt></p>
<h2><span id="数值稳定性的常见两个问题">数值稳定性的常见两个问题</span></h2><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627129790000.png" alt><br>例子<br><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627129989678.png" alt></p>
<ul>
<li>梯度爆炸<br><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627130163128.png" alt><br><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627130282486.png" alt></li>
<li>梯度消失<br><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627132188927.png" alt><br><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627132230382.png" alt><br><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627132281998.png" alt></li>
</ul>
<h2><span id="总结">总结</span></h2><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627132383092.png" alt></p>
]]></content>
      <categories>
        <category>深度学习</category>
        <category>李沐</category>
      </categories>
  </entry>
  <entry>
    <title>深度学习-5</title>
    <url>/2021/09/28/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-5/</url>
    <content><![CDATA[<h2><span id="感知机">感知机</span></h2><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627011976323.png" alt></p>
<ul>
<li>二分类：输出为-1或1<ul>
<li>回归输出实数</li>
<li>Softmax回归输出概率</li>
</ul>
</li>
</ul>
<h2><span id="收敛定理">收敛定理</span></h2><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627024399938.png" alt></p>
<h2><span id="xor问题">XOR问题</span></h2><ul>
<li>感知机不能拟合XOR函数，只能产生线性分割面</li>
</ul>
<h2><span id="总结">总结</span></h2><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627024676143.png" alt></p>
<h1><span id="多层感知机">多层感知机</span></h1><h2><span id="xor问题">XOR问题</span></h2><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627026052323.png" alt></p>
<h2><span id="单隐藏层">单隐藏层</span></h2><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627027190627.png" alt></p>
<ul>
<li>单分类<br><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627027300380.png" alt><ul>
<li>隐藏层需要非线性的激活函数</li>
</ul>
</li>
</ul>
<h2><span id="激活函数">激活函数</span></h2><ul>
<li>Sigmoid激活函数<br><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627027779076.png" alt> </li>
<li>Tanh激活函数<br><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627027830315.png" alt></li>
<li>ReLU激活函数<br><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627027874175.png" alt></li>
</ul>
<h2><span id="多类分类">多类分类</span></h2><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627028074978.png" alt><br><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627028113447.png" alt></p>
<h2><span id="多隐藏层">多隐藏层</span></h2><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627028228223.png" alt><br><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627028484344.png" alt></p>
<h2><span id="总结">总结</span></h2><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/1627028796660.png" alt></p>
]]></content>
      <categories>
        <category>深度学习</category>
        <category>李沐</category>
      </categories>
  </entry>
  <entry>
    <title>深度学习-9</title>
    <url>/2021/10/03/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-9/</url>
    <content><![CDATA[<h2><span id="层和块">层和块</span></h2><h4><span id="单个神经元">单个神经元：</span></h4><ol>
<li>接受一些输入</li>
<li>生成相应的标量输出</li>
<li>具有一组相关参数<ul>
<li>参数可以更新以优化某些感兴趣的目标函数</li>
</ul>
</li>
</ol>
<h4><span id="层">层：</span></h4><ol>
<li>接受一组输入</li>
<li>生成相应的输出</li>
<li>由一组可调整参数描述</li>
</ol>
<p>使用softmax回归时，一个单层本身就是模型</p>
<h4><span id="块">块：</span></h4><ol>
<li>块可以描述单个层、由多个层组成的组件或整个模型本身。</li>
<li>使用块进行抽象的一个好处是可以将一些块组合成更大的组件，这一过程通常是递归的</li>
</ol>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211003115046724.png" alt="image-20211003115046724"></p>
<p>块由类表示</p>
<ul>
<li>它的任何子类都必须定义一个将其输入转换为输出的正向传播函数，并且必须存储任何必需的参数。</li>
<li>注意，有些块不需要任何参数。</li>
<li>最后，为了计算梯度，块必须具有反向传播函数。</li>
<li>自动微分有一些后端实现，只需要考虑正向传播函数和必需的参数。</li>
</ul>
<h3><span id="多层感知机">多层感知机</span></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line">net = nn.Sequential(nn.Linear(<span class="number">20</span>, <span class="number">256</span>), nn.ReLU(), nn.Linear(<span class="number">256</span>, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">X = torch.rand(<span class="number">2</span>, <span class="number">20</span>)</span><br><span class="line">net(X)</span><br></pre></td></tr></table></figure>
<ul>
<li>nn.Sequential()定义了一个特殊的Module，即在PyTorch中表示一个块的类。</li>
<li>两个全连接层都是<code>Linear</code>类的实例，<code>Linear</code>类本身就是<code>Module</code>的子类。</li>
<li>正向传播（<code>forward</code>）函数也非常简单：它将列表中的每个块连接在一起，将每个块的输出作为下一个块的输入。</li>
</ul>
<h3><span id="自定义块">自定义块</span></h3><p>块的基本功能：</p>
<ol>
<li>将输入数据作为其正向传播函数的参数。</li>
<li>通过正向传播函数来生成输出。请注意，输出的形状可能与输入的形状不同。例如，我们上面模型中的第一个全连接的层接收任意维的输入，但是返回一个维度256的输出。</li>
<li>计算其输出关于输入的梯度，可通过其反向传播函数进行访问。通常这是自动发生的。</li>
<li>存储和访问正向传播计算所需的参数。</li>
<li>根据需要初始化模型参数。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MLP</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="comment"># 用模型参数声明层。这里，我们声明两个全连接的层</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 调用`MLP`的父类`Block`的构造函数来执行必要的初始化。</span></span><br><span class="line">        <span class="comment"># 这样，在类实例化时也可以指定其他函数参数，例如模型参数`params`（稍后将介绍）</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.hidden = nn.Linear(<span class="number">20</span>, <span class="number">256</span>)  <span class="comment"># 隐藏层</span></span><br><span class="line">        self.out = nn.Linear(<span class="number">256</span>, <span class="number">10</span>)  <span class="comment"># 输出层</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义模型的正向传播，即如何根据输入`X`返回所需的模型输出</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, X</span>):</span></span><br><span class="line">        <span class="comment"># 注意，这里我们使用ReLU的函数版本，其在nn.functional模块中定义。</span></span><br><span class="line">        <span class="keyword">return</span> self.out(F.relu(self.hidden(X)))</span><br></pre></td></tr></table></figure>
<h4><span id="顺序块sequential">顺序块—Sequential</span></h4><p>两个关键函数：</p>
<ol>
<li>一种将块逐个追加到列表中的函数</li>
<li>一种正向传播函数，用于将输入按追加块的顺序传递给块组成的“链条”。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySequential</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, *args</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="keyword">for</span> block <span class="keyword">in</span> args:</span><br><span class="line">            <span class="comment"># 这里，`block`是`Module`子类的一个实例。我们把它保存在&#x27;Module&#x27;类的成员变量</span></span><br><span class="line">            <span class="comment"># `_modules` 中。`block`的类型是OrderedDict。</span></span><br><span class="line">            self._modules[block] = block</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, X</span>):</span></span><br><span class="line">        <span class="comment"># OrderedDict保证了按照成员添加的顺序遍历它们</span></span><br><span class="line">        <span class="keyword">for</span> block <span class="keyword">in</span> self._modules.values():</span><br><span class="line">            X = block(X)</span><br><span class="line">        <span class="keyword">return</span> X</span><br></pre></td></tr></table></figure>
<p>在<code>__init__</code>方法中，我们将每个块逐个添加到有序字典<code>_modules</code>中。</p>
]]></content>
      <categories>
        <category>深度学习</category>
        <category>李沐</category>
      </categories>
  </entry>
  <entry>
    <title>计算机图形学L2</title>
    <url>/2021/09/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6L2/</url>
    <content><![CDATA[<h2><span id="扫描转换scan-conversion">扫描转换(Scan Conversion)</span></h2><p>就是几何图元的扫描转换(线段,圆,多边形,椭圆等)</p>
<ul>
<li>在点阵中找到图元的最优近似点集</li>
<li>从连续的图元到离散像素集合的映射 </li>
<li>本质上是一个采样问题</li>
</ul>
<p>例子：线段(0,0)到(5,3)，最优点集：点到直线上的距离最小</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210912234758250.png" alt="image-20210912234758250"></p>
<h3><span id="线段扫描转换scan-conversion-of-line-segments">线段扫描转换(Scan conversion of line segments)</span></h3><h4><span id="平凡算法">平凡算法</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210914151207711.png" alt="image-20210914151207711"></p>
<ul>
<li>缺点：多次乘法运算，取整运算</li>
</ul>
<h4><span id="dda算法digital-differential-analyzer">DDA算法—Digital differential analyzer</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210914151406344.png" alt="image-20210914151406344"></p>
<ul>
<li>缺点：仍然需要取整</li>
</ul>
<h4><span id="bresenham算法">Bresenham算法</span></h4><ul>
<li><p>下一次可选点的约束</p>
<ul>
<li>当前像素一旦确定，下一个点是有限制的，只能从两个点中选一个</li>
<li>算法只涉及+、-、移位</li>
<li>用于绘图仪、显卡等硬件实现</li>
</ul>
</li>
<li><p>缩小可选点的范围</p>
<ul>
<li><p>从 $x = x_0$出发，每次增加1</p>
</li>
<li><p>选中的第i个像素点为($\bar{x}_i, \bar{y}_i$)</p>
</li>
<li><p>第$i+1$个像素点只能从2个点中选择</p>
<ul>
<li><p>($\bar{x}_i + 1, \bar{y}_i$)，($\bar{x}_i + 1, \bar{y}_i + 1$)</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main\image-20210919155358004.png" alt="image-20210919155358004"></p>
</li>
</ul>
</li>
<li><p>选点判定准则(Criteria)</p>
<ul>
<li>选择离直线较近的那个像素点，即离$(x_{i+1}, y_{i+1})$较近的点<ul>
<li>$x_{i+1} = x_i+1$</li>
<li>$y_{i+1} = mx_{i+1} +B = mx_i+m+B$</li>
</ul>
</li>
<li>判别准则计算<img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main\image-20211005210431926.png" alt="image-20211005210431926"></li>
<li>化简<img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main\image-20211005210658306.png" alt="image-20211005210658306"></li>
<li>$p_i$的迭代公式<img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main\image-20211005211036740.png" alt="image-20211005211036740"></li>
<li>$p_0$的计算<img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main\image-20211005211233636.png" alt="image-20211005211233636"></li>
<li><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main\image-20211005211248596.png" alt="image-20211005211248596"></li>
</ul>
</li>
<li><p>例子</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main\image-20211005211613657.png" alt="image-20211005211613657"></p>
</li>
</ul>
</li>
</ul>
<h3><span id="多边形扫描转换scan-conversion-of-polygon">多边形扫描转换(Scan conversion of polygon)</span></h3><ul>
<li>光栅图形的本质：点阵表示<ul>
<li>线框多边形物体：只需扫描转换线段</li>
<li>填充多边形物体：要扫描转换多边形</li>
</ul>
</li>
<li>线框图：先扫描转换</li>
<li>简单的多边形：无自相交</li>
<li>图形学中多边形的两种表示方法<ul>
<li>顶点表示（对象表示）:多边形的有序顶点序列<ul>
<li>优点：直观,有几何意义、便于几何变换、存贮量小</li>
<li>缺点：不能直接用于多边形着色</li>
</ul>
</li>
<li>点阵表示（图像表示）:多边形内部的像素集合</li>
</ul>
</li>
</ul>
<h4><span id="区域填充fill-area-algorithms">区域填充—Fill-area algorithms</span></h4><h4><span id="多边形描线填充算法scan-line-polygon-fill-algorithm">多边形描线填充算法—Scan-line polygon-fill algorithm</span></h4>]]></content>
      <categories>
        <category>课程笔记</category>
        <category>图形学</category>
      </categories>
  </entry>
  <entry>
    <title>计算机图形学L1</title>
    <url>/2021/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6L1/</url>
    <content><![CDATA[<h1><span id>#</span></h1><p>LCD、CRT</p>
<span id="more"></span>
<h3><span id="光栅显示系统结构">光栅显示系统结构</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210911185252515.png" alt="image-20210911185252515"></p>
<h3><span id="计算机图形系统的构成">计算机图形系统的构成</span></h3><ol>
<li>软件</li>
<li>输入设备</li>
<li>输出设备</li>
</ol>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210911185423115.png" alt="image-20210911185423115"></p>
<h3><span id="视频显示设备简介">视频显示设备简介</span></h3><p>图形学基础算法：根据视频显示设备的特性进行设计</p>
<ol>
<li><h4><span id="液晶显示liquid-crystal-displaylcd">液晶显示(Liquid Crystal Display)—LCD</span></h4><ul>
<li>液晶具有各向异性</li>
<li>LCD结构与工作原理：不施加电场，利用电压改变液晶的分子排列顺序，控制光通过，达到显示目的。<ul>
<li>不施加电场,光通过</li>
<li>施加电场，光通过受限</li>
</ul>
</li>
<li>彩色LCD<ul>
<li>增加了彩色滤光器</li>
<li>背光版发出的是白光,通过滤光片RGB产生彩色。</li>
</ul>
</li>
<li>可视角度<ul>
<li>LCD显示器光源经折射和反射后输出时有一定方向性，从大于某个角度<strong>（可视角度）</strong>观看会产生色彩失真。</li>
<li>120度为选择标准</li>
</ul>
</li>
<li>LCD显示器一般采用荧光背光板</li>
<li>LED显示器采用发光二极管作为背光源</li>
<li>LED显示器是LCD显示器的一种</li>
</ul>
</li>
<li><h4><span id="阴极射线管cathode-ray-tubecrt">阴极射线管(Cathode Ray Tube)—CRT</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210911190816761.png" alt="image-20210911190816761"></p>
<ul>
<li><p>持续时间和分辨率 （Persistence and Resolution）</p>
<ul>
<li><p><strong>持续时间</strong>:磷涂层被轰击后发光的持续时间（余辉）</p>
<p>   长：利于<strong>静态复杂图象</strong>的显示；</p>
<p>   短：利于<strong>动画</strong>显示 </p>
</li>
<li><p><strong>分辨率</strong>: CRT荧屏所能显示的不重叠的最大点数称为它的分辨率。</p>
</li>
</ul>
</li>
<li><p>光栅扫描显示（Raster-Scan Display）</p>
<ul>
<li>大部分采用CRT的显示器都是光栅扫描显示器</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210911191052313.png" alt="image-20210911191052313"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210911191103454.png" alt="image-20210911191103454"></p>
</li>
</ol>
<ul>
<li><strong>扫描线</strong>(Scan line): 屏幕的每一行称为一条扫描线。</li>
<li><strong>像素</strong>(pixel, picture elements): 扫描线上的每个点称为一个<strong>像素</strong>。</li>
<li><strong>刷新缓冲区</strong>(Refresh buffer)或<strong>帧缓冲区</strong>(Frame buffer)与显示区域对应，每个单元保存一个<strong>像素</strong>的color及其它信息。<ul>
<li>例： 1024X1024，每像素24位，则要3M字节帧缓存。</li>
</ul>
</li>
<li><p><strong>屏幕纵横比(aspect ratio)</strong>： 列数/扫描线数。</p>
<ul>
<li><strong>逐行扫描与隔行扫描</strong></li>
</ul>
</li>
<li><p>光栅化（Rasterization）和扫描转换（Scan conversion）</p>
<ul>
<li>如何使光栅图形最完美地逼近实际图形，是光栅图形学的研究内容。</li>
<li>扫描转化算法<ul>
<li>确定逼近图形的最佳像素集，并用指定的颜色或灰度设置像素的过程叫做图形的扫描转换。 </li>
</ul>
</li>
</ul>
</li>
</ul>
<ol>
<li><h4><span id="随机扫描显示random-scan-display">随机扫描显示(Random-scan display)</span></h4></li>
<li><h4><span id="彩色crt显示器">彩色CRT显示器</span></h4><ul>
<li><p>常用彩色CRT显示器是阴罩式CRT显示器</p>
</li>
<li><p>其结构与单色CRT显示器类似，但有不同之处</p>
<p> ￭ 荧光屏的每个象素点由三个磷涂层点构成，分别发红绿蓝三种颜色的光。</p>
<p> ￭ 有三支电子枪分别对应三种颜色的点。</p>
<p> ￭ 在屏幕后有一个荫罩，上面的小孔与每个象素点对应。</p>
<p> ￭ 所看到的色彩是三种颜色混合的结果。</p>
</li>
</ul>
</li>
</ol>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210911192815303.png" alt="image-20210911192815303"></p>
<h3><span id="opengl">OpenGL</span></h3><ul>
<li><p>是一个图形库，全称为<strong>Open Graphics Library</strong></p>
</li>
<li><p>是应用程序与图形处理的接口</p>
</li>
<li><p>为移植到不同环境形成了一个开放式的OpenGL</p>
</li>
<li><h4><span id="功能模块">功能模块</span></h4><ul>
<li>绘制几何图形</li>
<li>几何变换</li>
<li>颜色和光照</li>
<li>反走样（反混淆）</li>
<li>纹理映射</li>
<li>雾化</li>
<li>图元属性</li>
</ul>
</li>
<li><h4><span id="opengl函数">OpenGL函数</span></h4><ul>
<li>OpenGL核心库函数：opengl32.lib<ul>
<li>核心库函数以gl开头</li>
<li>函数名本身往往指出参数个数及类型</li>
</ul>
</li>
<li>OpenGL实用程序库函数：glu.lib<ul>
<li>这一部分函数有核心库函数实现，以glu为前缀</li>
<li>可看作是核心库函数的扩展，提供更高级的图形功能</li>
</ul>
</li>
<li>扩展库<ul>
<li>核心库函数是设备独立的,与操作系统和硬件无关。</li>
<li>扩展库提供的函数用来扩展窗口系统的功能</li>
</ul>
</li>
</ul>
</li>
<li><h4><span id="opengl实用工具包-freeglut">OpenGL实用工具包 freeglut</span></h4><ul>
<li><p>(<strong>G</strong>raphics <strong>L</strong>ibrary Utility <strong>T</strong>oolkits)</p>
<ul>
<li><p>图形库实用工具包提供与<strong>任意屏幕窗口系统</strong>进行交互的函数库</p>
<ul>
<li><p><strong>独立于屏幕窗口系统</strong></p>
<ul>
<li>简化应用程序的工作，也方便移植</li>
</ul>
</li>
<li><p>GLUT库函数以glut为前缀</p>
<ul>
<li><p><a href="http://freeglut.sourceforge.net/">http://freeglut.sourceforge.net/</a></p>
</li>
<li><p>Version 3.2.1(<em>Released: 29 September 2019</em>)</p>
</li>
</ul>
</li>
<li><p>GLUT函数分类</p>
<ol>
<li>初始化和创建窗口</li>
</ol>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210911194335915.png" alt="image-20210911194335915"></p>
<p>Mode—可以指定显示模式</p>
<ul>
<li>Mode参数是一个GLUT库中预定义的可能的布尔组合<ul>
<li>1：GLUT_RGBA或者GLUT_RGB。指定一个RGBA窗口，这是一个默认的颜色模式</li>
<li>2：GLUT_INDEX。指定颜色索引模式。 </li>
</ul>
</li>
<li>还允许你选择单缓冲区或双缓冲区窗口<ul>
<li>1：GLUT_SINGLE.单缓冲区窗口。 </li>
<li>2：GLUT_BUFFER.双缓冲区窗口，这是产生流畅动画必须选的</li>
</ul>
</li>
<li>特殊缓冲<ul>
<li>1：GLUT_ACCUM.累积缓冲区。 </li>
<li>2：GLUT_STENCIL.模板缓冲区。 </li>
<li>3：GLUT_DEPTH.深度缓冲区。 </li>
</ul>
</li>
<li>创建单颜色缓冲区、深度缓冲区的RGB窗口，用“或“（|）操作符来建立。<ul>
<li>glutInitDisplayMode(GLUT_RGB|GLUT_SINGLE|GLUT_DEPTH);</li>
</ul>
</li>
</ul>
<ol>
<li>处理窗口和接收键盘和鼠标输入</li>
<li>绘制三维物体</li>
<li>后台管理</li>
<li>运行程序</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>图形学</category>
      </categories>
  </entry>
  <entry>
    <title>计算机图形学L3</title>
    <url>/2021/10/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6L3/</url>
    <content><![CDATA[<h4><span id="齐次方程">齐次方程</span></h4><ul>
<li>用 <strong>(n+1)维度向量</strong>表示<strong>n维点</strong></li>
<li>二维点 (x, y) 可用齐次坐标(X,Y,ω)表示, 其中 <strong>x = X/ω, y = Y/ω</strong></li>
<li>一个空间点(x,y)有无穷多齐次坐标(X,Y,ω)</li>
</ul>
<p>优点：</p>
<ul>
<li>用矩阵运算统一表示各种几何变换<ul>
<li>易于表示复合变换</li>
<li>支持非线性变换表示 (3D-perspective transformations)</li>
</ul>
</li>
<li>可表示无穷远点(Infinity)</li>
</ul>
<h4><span id="常用的几何变换">常用的几何变换</span></h4><ul>
<li>基本变换：平移、旋转、放缩 </li>
<li>其它变换：剪切、对称、复合</li>
<li>所有变换都是针对一个点的变换来讨论，复杂场景由顶点定义</li>
</ul>
<p>作用：</p>
<ol>
<li>构建复杂几何场景</li>
<li>简单动画</li>
<li>图形绘制流水线</li>
</ol>
<h3><span id="二维变换">二维变换</span></h3><h4><span id="刚性变换">刚性变换</span></h4><ul>
<li>形状不变但位置与朝向变化<ul>
<li>点之间的距离不变;</li>
<li>线之间的夹角</li>
</ul>
</li>
<li>旋转与平移都是刚性变换 </li>
<li>刚性变换的复合变换仍然是刚性变换</li>
</ul>
<h4><span id="仿射变换">仿射变换</span></h4><h3><span id="三维变换">三维变换</span></h3><h4><span id="场景造型">场景造型</span></h4><ul>
<li>场景坐标系，包括世界坐标系、局部坐标系<ul>
<li>局部坐标系：建立单个物体模型，简化物体的定义</li>
<li>世界坐标系：从单个物体构造复杂场景、造型变换</li>
</ul>
</li>
<li>变换：造型变换</li>
</ul>
<h4><span id="图形流水线中的坐标系变换">图形流水线中的坐标系变换</span></h4><ul>
<li>世界坐标系到视点坐标系</li>
<li>变换：取景变换</li>
</ul>
<h4><span id="投影照相-摄影">投影(照相、摄影)</span></h4><ul>
<li>投影坐标系和窗口坐标系</li>
<li>变换：投影变换</li>
</ul>
<h4><span id="二维显示">二维显示</span></h4><ul>
<li>窗口坐标系、规格化设备坐标系与屏幕的物理坐标系</li>
<li>变换：设备变换、视窗变换</li>
</ul>
<h4><span id="坐标变换流程图">坐标变换流程图</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211006095835180.png" alt="image-20211006095835180"></p>
<h4><span id="坐标系">坐标系</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211006095915563.png" alt="image-20211006095915563"></p>
<h2><span id="三维取景变换">三维取景变换</span></h2><h3><span id="图形流水线">图形流水线</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211006100545205.png" alt="image-20211006100545205"></p>
<h3><span id="几何变换流水线">几何变换流水线</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211006100709362.png" alt="image-20211006100709362"></p>
<h4><span id="坐标系设定方式">坐标系设定方式</span></h4><h4><span id="坐标系坐标轴方向计算">坐标系坐标轴方向计算</span></h4><h4><span id="观察取景变换">观察(取景)变换</span></h4><h4><span id="投影变换">投影变换</span></h4><ul>
<li>3D到2D</li>
<li>两种投影<ul>
<li>透视投影</li>
<li>平行投影</li>
</ul>
</li>
</ul>
<h2><span id="裁剪线段与多边形裁剪">裁剪—线段与多边形裁剪</span></h2><p>需要裁剪的原因</p>
<ul>
<li>剔除不可见部分</li>
<li>透视投影中视域四棱锥是指位于“前面”和“后面”之间的<strong>四棱台</strong></li>
<li>平行投影的视域形状一般为<strong>长方体</strong></li>
<li>投影时，要剔出<strong>位于视域体外部</strong>的物体部分</li>
</ul>
<p>裁剪所在的流程</p>
<ul>
<li>图像坐标系到设备变换的过程中</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211012215711703.png" alt="image-20211012215711703"></p>
<h3><span id="二维线段裁剪">二维线段裁剪</span></h3><h3><span id="二维多边形裁剪">二维多边形裁剪</span></h3><h3><span id="三维裁剪">三维裁剪</span></h3><h3><span id="关于三维变换与裁剪">关于三维变换与裁剪</span></h3>]]></content>
      <categories>
        <category>课程笔记</category>
        <category>图形学</category>
      </categories>
  </entry>
  <entry>
    <title>计算机图形学总复习</title>
    <url>/2021/12/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E6%80%BB%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h2><span id="第一讲">第一讲</span></h2><h4><span id="线框显示">线框显示</span></h4><ul>
<li>光栅化</li>
<li>填充算法</li>
<li>裁剪算法</li>
</ul>
<h4><span id="新的曲线曲面表示">新的曲线曲面表示</span></h4><ul>
<li>网格曲面(meshes), </li>
<li>细分曲面</li>
<li>隐式曲面</li>
</ul>
<h4><span id="绘制">绘制</span></h4><p>体绘制, 基于图象的绘制, 点绘制</p>
<h4><span id="可视化scientific-visualization">可视化(Scientific visualization)</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211213210134108.png" alt="image-20211213210134108" style="zoom:50%;"></p>
<h4><span id="三维打印">三维打印</span></h4><ul>
<li>是一种数字化制造技术<ul>
<li>输入把数字设计三维模型，输出物理实体</li>
</ul>
</li>
<li><p>增材制造(additive manufacturing）</p>
</li>
<li><p>打印流程</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211213210235232.png" alt="image-20211213210235232" style="zoom:50%;"></p>
<p>图形学帮助直观形象地理解大规模数据所蕴涵的科学现象和规律。</p>
<h4><span id="虚拟现实virtual-reality">虚拟现实(Virtual reality)</span></h4><p>VR的世界里所有的东西都是虚拟的、假的。（ 没有现实中的物体）</p>
<ul>
<li>多感知性<ul>
<li>视觉、听觉、触觉、运动、味觉、嗅觉等感知</li>
</ul>
</li>
<li>沉浸感<ul>
<li>用户感到作为主角存在于模拟环境中</li>
<li>理想的模拟环境应达到用户难辨真假的程度。</li>
</ul>
</li>
<li>交互性<ul>
<li>用户可操作虚拟环境内物体，并获得反馈</li>
</ul>
</li>
<li>自主性<ul>
<li>指虚拟环境中物体依据物理定律进行动作的程度</li>
</ul>
</li>
</ul>
<h4><span id="增强现实augmented-reality">增强现实(Augmented reality)</span></h4><p>顾名思义，就是对真实世界进行增强，这里的增强是指通过显示屏幕把虚拟世界叠加到真实世界中去</p>
<h4><span id="混合现实-mr">混合现实 (MR)</span></h4><p>AR是把虚拟的东西叠加到真实世界，而MR则是把真实的东西叠加到虚拟世界里</p>
<p>首先得把现实的东西虚拟化。虚拟化一般使用摄像头来扫描物体进行三维重建</p>
<h2><span id="第二讲和第三讲">第二讲和第三讲</span></h2><p>计算机图形学L1.md</p>
<h2><span id="第四讲">第四讲</span></h2><ul>
<li>线段扫描转换 (Scan conversion of line segments)<ul>
<li>DDA algorithm </li>
<li>Bresenham algorithm (Version 7-Sect. 8.9)</li>
</ul>
</li>
<li>多边形扫描转换 (Scan conversion of polygon)<ul>
<li>Fill-area algorithms</li>
<li>Scan-line polygon-fill algorithm (Version 7: Sections 8.10)</li>
</ul>
</li>
</ul>
<p>计算机图形学L2.md</p>
<h2><span id="第六讲">第六讲</span></h2><ul>
<li><p>二维线段裁剪</p>
<p>Cohen-Sutherland线段裁剪(2.5)</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214223006404.png" alt="image-20211214223006404"></p>
<ul>
<li>二维多边形裁剪</li>
</ul>
<p>Sutherland-Hodgman多边形裁剪(Section 8.5)</p>
<p>裁剪多边形(裁剪窗口): 凸多边形<br>被裁剪多边形: 任意简单多边形</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214191557104.png" alt="image-20211214191557104"></p>
<ul>
<li>三维裁剪</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214192021816.png" alt="image-20211214192021816"></p>
<h2><span id="第七讲">第七讲</span></h2><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214192349778.png" alt="image-20211214192349778" style="zoom:67%;"></p>
<h4><span id="什么时候消隐">什么时候消隐？</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214192439312.png" alt="image-20211214192439312" style="zoom:67%;"></p>
<h4><span id="消隐减少二义性reduce-ambiguity">消隐减少二义性(reduce ambiguity)</span></h4><h4><span id="消隐可提高绘制效率-但会降低绘制质量">消隐可提高绘制效率, 但会降低绘制质量</span></h4><ul>
<li>实时仿真(realtime simulation)：效率优先 </li>
<li>真实感绘制(photorealistic rendering):效果优先</li>
</ul>
<h4><span id="消隐排序与连惯性sorting-amp-coherence">消隐:排序与连惯性(sorting &amp; coherence)</span></h4><p>两者决定了消隐的效率 </p>
<h4><span id="消隐算法分类-按输出形式">消隐算法分类－按输出形式</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214192757890.png" alt="image-20211214192757890"></p>
<h4><span id="消隐算法分类-按消隐空间">消隐算法分类－按消隐空间</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214192817748.png" alt="image-20211214192817748"></p>
<h4><span id="图象空间算法特点">图象空间算法特点</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214193010471.png" alt="image-20211214193010471"></p>
<h4><span id="对象空间算法特点">对象空间算法特点</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214193135601.png" alt="image-20211214193135601"></p>
<h4><span id="消隐假设">消隐假设</span></h4><ul>
<li>场景由多边形面构成</li>
<li>离视点越远，z值越大(裁剪窗口规范化)</li>
<li>正交投影, 投影面OXY(裁剪窗口规范化); </li>
</ul>
<h4><span id="z-buffer-二维空间消隐示意">Z-buffer—-二维空间消隐示意</span></h4><ul>
<li><p>Z缓存(Z-buffer)</p>
<ul>
<li>存储空间与帧缓存类似</li>
<li>存近平面到像素对应场景的距离，称为z值</li>
<li>距离越大离视点越远</li>
</ul>
</li>
<li><p>步骤</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214194046774.png" alt="image-20211214194046774"></p>
<p>有重叠时取小的z值</p>
<ul>
<li>优点</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214194349773.png" alt="image-20211214194349773"></p>
<ul>
<li>缺点</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214194408290.png" alt="image-20211214194408290"></p>
<h4><span id="后向面剔除back-face-culling对象空间算法">后向面剔除(Back face culling)—对象空间算法</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214194556660.png" alt="image-20211214194556660"></p>
<h5><span id="局限性">局限性</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214194618745.png" alt="image-20211214194618745"></p>
<h4><span id="表优先级算法list-priority-algorithm">表优先级算法(List priority algorithm)</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214194650082.png" alt="image-20211214194650082"></p>
<h5><span id="多边形深度排序算法-三维物体的深度排序算法">多边形深度排序算法   三维物体的深度排序算法</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214194903551.png" alt="image-20211214194903551"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214194914715.png" alt="image-20211214194914715"></p>
<p>三维物体的深度排序算法适合于固定视点的消隐</p>
<h4><span id="二叉空间剖分树算法bsp树">二叉空间剖分树算法BSP树</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214200032217.png" alt="image-20211214200032217"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214200631681.png" alt="image-20211214200631681"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214200718045.png" alt="image-20211214200718045"></p>
<h5><span id="二叉空间剖分树的遍历">二叉空间剖分树的遍历</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214200831319.png" alt="image-20211214200831319"></p>
<h2><span id="第八讲">第八讲</span></h2><ul>
<li>颜色:光射入眼睛刺激视觉器官所产生的主观感觉</li>
<li>光是一种电磁辐射</li>
<li>颜色空间/彩色模型/彩色空间/彩色系统<ul>
<li>颜色坐标系</li>
<li>量化描述颜色属性</li>
</ul>
</li>
<li>HSB和HSV空间(颜色包括三要素)<ul>
<li>色彩(hue)</li>
<li>饱和度(saturation)</li>
<li>亮度(lightness)</li>
</ul>
</li>
<li>视网膜上有两类感受器(the retina)<ul>
<li>杆状接收器感受光强</li>
<li>锥状接受器感受颜色<ul>
<li>三种锥状感受器分别为S, M, L；<br>分别大概对应:blue, green, red sensors.<br>其敏感波长峰值分别为:430nm,560nm,610nm </li>
</ul>
</li>
</ul>
</li>
</ul>
<h2><span id="第九讲和第十讲">第九讲和第十讲</span></h2><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214203110954.png" alt="image-20211214203110954" style="zoom:50%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214202834248.png" alt="image-20211214202834248" style="zoom:67%;"></p>
<h4><span id="光照明模型illumination-models">光照明模型(illumination models)</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214203250620.png" alt="image-20211214203250620"></p>
<h5><span id="光照模型illumination-models">光照模型(illumination models)</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214203316474.png" alt="image-20211214203316474" style="zoom:50%;"></p>
<h5><span id="1-泛光ambient-light">1 泛光(ambient light)</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214203712263.png" alt="image-20211214203712263"></p>
<ul>
<li>计算</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214203820906.png" alt="image-20211214203820906"></p>
<h5><span id="2-lambert漫反射模型diffusion-model">2 Lambert漫反射模型(diffusion model)</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214203913583.png" alt="image-20211214203913583"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214204001608.png" alt="image-20211214204001608"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214205033082.png" alt="image-20211214205033082"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214205202165.png" alt="image-20211214205202165"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214205540415.png" alt="image-20211214205540415"></p>
<h4><span id="3-phong光照模型">3 Phong光照模型</span></h4><ul>
<li>Phong模型—高光</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214205607195.png" alt></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214205657588.png" alt="image-20211214205657588"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214205719299.png" alt="image-20211214205719299"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214205737371.png" alt="image-20211214205737371"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214205748761.png" alt="image-20211214205748761"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214205816858.png" alt="image-20211214205816858"></p>
<h5><span id="4-whitted模型">4 Whitted模型</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214205836416.png" alt="image-20211214205836416"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214210033107.png" alt="image-20211214210033107"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214210105453.png" alt="image-20211214210105453"></p>
<h4><span id="多边形物体的明暗处理shading">多边形物体的明暗处理(shading)</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214210241210.png" alt="image-20211214210241210"></p>
<h5><span id="1-flat-shading">1 Flat Shading</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214210254676.png" alt="image-20211214210254676"></p>
<h5><span id="2-ground-shading">2 Ground Shading</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214210349210.png" alt="image-20211214210349210"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214210510854.png" alt="image-20211214210510854"></p>
<h5><span id="3-phong-shading">3 Phong Shading</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214210547164.png" alt="image-20211214210547164"></p>
<ul>
<li>也称为普通插值处理</li>
<li>利弊<ul>
<li>能够模拟镜面光</li>
<li>光强变化更自然</li>
<li>计算成本高于Gouraud Shading</li>
</ul>
</li>
</ul>
<h4><span id="光线跟踪raytracing-algorithm-section-123">光线跟踪(Raytracing algorithm, Section 12.3)</span></h4><h5><span id="whitted全局光照illumination-model">Whitted全局光照(illumination model)</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214214008339.png" alt="image-20211214214008339"></p>
<h5><span id="1-光线投射ray-casting-algorithm-rca">1 光线投射(Ray casting algorithm RCA)</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214214319922.png" alt="image-20211214214319922"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214214351752.png" alt="image-20211214214351752"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214214401520.png" alt="image-20211214214401520"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214214415194.png" alt="image-20211214214415194"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214214521986.png" alt="image-20211214214521986"></p>
<h5><span id="2光线跟踪">2.光线跟踪</span></h5><h5><span id="光线跟踪算法ray-tracing-algorithm">光线跟踪算法(Ray tracing algorithm)</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214215329623.png" alt="image-20211214215329623"></p>
<h5><span id="光线跟踪ray-tracing-光照模型">光线跟踪(Ray Tracing)—-光照模型</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214220633654.png" alt="image-20211214220633654"></p>
<h5><span id="光线跟踪ray-tracing-逆向思想">光线跟踪(Ray Tracing)—-逆向思想</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214220831565.png" alt="image-20211214220831565"></p>
<h5><span id="3-光线跟踪算法步骤">3 光线跟踪算法步骤</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214221119382.png" alt="image-20211214221119382"></p>
<h5><span id="光线树ray-tree-of-a-ray">光线树(Ray tree of a ray)</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214221248802.png" alt="image-20211214221248802"></p>
<h5><span id="光线跟踪递归终止条件">光线跟踪递归终止条件</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214221441969.png" alt="image-20211214221441969"></p>
<h4><span id="光线跟踪细节">光线跟踪细节</span></h4><ul>
<li>如何表示射线</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214222747496.png" alt="image-20211214222747496"></p>
<ul>
<li><p>射线与几何体的求交 </p>
<p>线面求交的一般形式</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214223234383.png" alt="image-20211214223234383"></p>
<p>​       球面与光线求交(Ray and sphere)</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214223621118.png" alt="image-20211214223621118"></p>
<p>​    光线与三角形求交(Ray and triangle)</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214223932865.png" alt="image-20211214223932865"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214223940417.png" alt="image-20211214223940417"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214224805038.png" alt="image-20211214224805038"></p>
<p>例子</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214224818729.png" alt="image-20211214224818729"></p>
<ul>
<li>反射方向估计</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214225549022.png" alt="image-20211214225549022"></p>
<ul>
<li>折射方向估计</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214231301760.png" alt="image-20211214231301760"></p>
<ul>
<li>阴影生成</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214231307757.png" alt="image-20211214231307757"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214231314498.png" alt="image-20211214231314498"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214231321353.png" alt="image-20211214231321353"></p>
<h4><span id="走样antialias">走样(Antialias)</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214231331642.png" alt="image-20211214231331642"></p>
<h5><span id="反走样处理方法antialias-methods">反走样处理方法Antialias methods</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214231342391.png" alt="image-20211214231342391"></p>
<h4><span id="加速acceleration">加速(Acceleration)</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214231357534.png" alt="image-20211214231357534"></p>
<h5><span id="包围盒bounding-box">包围盒(Bounding box)</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214231419262.png" alt="image-20211214231419262"></p>
<p>层次包围盒(Hierarchical bounding box)</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214231430974.png" alt="image-20211214231430974"></p>
<ul>
<li>常用包围盒<ul>
<li>长方形包围盒</li>
<li>包围球</li>
<li>包围圆柱</li>
<li>平行2n面体</li>
</ul>
</li>
</ul>
<h5><span id="空间分割技术">空间分割技术</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214231504161.png" alt="image-20211214231504161"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211214231509341.png" alt="image-20211214231509341"></p>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>图形学</category>
      </categories>
  </entry>
  <entry>
    <title>计网L1</title>
    <url>/2021/12/03/%E8%AE%A1%E7%BD%91L1/</url>
    <content><![CDATA[<h4><span id="计算机网络的基本概念">计算机网络的基本概念</span></h4><ul>
<li>A collection of autonomous computers interconnected<ul>
<li>一些互相连接、自治的计算机的集合</li>
<li>interconnected：Be able to exchange information 能够交换信息</li>
<li>Autonomous: Be able to handle independently 能够独自处理、单独运行</li>
</ul>
</li>
</ul>
<h4><span id="在尺寸上分类计算机网络">在尺寸上分类计算机网络</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211203091908448.png" alt="image-20211203091908448"></p>
<h5><span id="lanlocal-area-networks局域网">LAN—Local Area Networks—局域网</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211203090909737.png" alt="image-20211203090909737"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211203091558445.png" alt="image-20211203091558445"></p>
<h5><span id="wanwide-area-networks广域网">WAN—Wide Area Networks—广域网</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211203091622146.png" alt="image-20211203091622146"></p>
<h4><span id="network-topology-网络拓扑结构">Network Topology 网络拓扑结构</span></h4><h5><span id="layout-of-inter-connections-信道的分布方式">Layout of inter-connections (信道的分布方式)</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211203091819540.png" alt="image-20211203091819540"></p>
<h4><span id="measure">Measure</span></h4><p><strong>bps：bits per second</strong></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211203091846098.png" alt="image-20211203091846098"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211203091915789.png" alt="image-20211203091915789"></p>
<h4><span id="throughput-吞吐量">Throughput 吞吐量</span></h4><p>Usually refers to actually measured bandwidth, at a specific time of day.</p>
<p>通常指在一天中的特定时间实际测量的带宽。</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211203093040711.png" alt="image-20211203093040711"></p>
<h4><span id="带宽的重要性">带宽的重要性</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211203093055942.png" alt="image-20211203093055942"></p>
<h4><span id="communication-technology">Communication Technology</span></h4><h5><span id="for-twisted-pair-cable">For twisted-pair cable</span></h5><ul>
<li>Modem 调制解调器<ul>
<li>300bps,1200bps,9600bps,28kbps,33kbps,56kbps</li>
</ul>
</li>
<li>XDSL   x数字用户线<ul>
<li>128Kbps, 1Mbps,4Mbps,6Mbps</li>
</ul>
</li>
<li>Ethernet  以太网<ul>
<li>10Mbps, 100Mbps, 1000Mbps…</li>
</ul>
</li>
</ul>
<h5><span id="for-fiber">For Fiber</span></h5><ul>
<li>Ethernet 以太网<ul>
<li>10/100Mbps, 1/10Gbps +</li>
</ul>
</li>
<li>SDH 同步数字体系<ul>
<li>155Mbps, 2.5Gbps, 1.6Tbps +</li>
</ul>
</li>
</ul>
<h4><span id="communication-mode">Communication Mode</span></h4><ul>
<li>Point-to-Point 点到点</li>
<li>Multicast 多播</li>
<li>Broadcast 广播</li>
</ul>
<h4><span id="type-of-services">Type of Services</span></h4><p>面向连接服务和无连接服务</p>
<ul>
<li>面向连接的服务（connection-oriented service）是按照电话系统建模的</li>
<li>无连接服务（conncetionless service），这是按照邮政系统建模的。<ul>
<li>每个报文（信件）都携带了完整的目标地址，每个报文都由系统中的中间节点路由，  而且路由独立于后续报文。</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211203093448875.png" alt="image-20211203093448875"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211203094223133.png" alt="image-20211203094223133"></p>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>计网L11</title>
    <url>/2021/12/20/%E8%AE%A1%E7%BD%91L11/</url>
    <content><![CDATA[<h4><span id="传输层的位置">传输层的位置</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220131054173.png" alt="image-20211220131054173"></p>
<h4><span id="不同终端上的进程如何通信-套接字socket">不同终端上的进程如何通信 — 套接字Socket</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220131156531.png" alt="image-20211220131156531"></p>
<h4><span id="传输层和网络层的关系">传输层和网络层的关系</span></h4><p>传输层依赖网络层服务，并扩展网络层服务</p>
<h4><span id="传输层提供的服务">传输层提供的服务</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220131430265.png" alt="image-20211220131430265"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220131446522.png" alt="image-20211220131446522"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220131452432.png" alt="image-20211220131452432"></p>
<h4><span id="进程标识">进程标识</span></h4><ul>
<li>主机地址 </li>
<li>主机上与该进程关联的端口号<ul>
<li>端口号（port number）：端口号被用来区分同一个主机上的不同进程</li>
</ul>
</li>
</ul>
<h4><span id="应用编程接口socket-api">应用编程接口：socket API</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220132014251.png" alt="image-20211220132014251"></p>
<h4><span id="传输层复用和分用">传输层复用和分用</span></h4><ul>
<li>传输层基本服务：将主机间交付扩展到进程间交付，通过复用和分用实现<ul>
<li>（发送端）复用：传输层从多个套接字收集数据，交给网络层发送</li>
<li>（接收端）分用：传输层将从网络层收到的数据，交付给正确的套接字</li>
</ul>
</li>
</ul>
<h4><span id="套接字的标识和端口号">套接字的标识和端口号</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220132350690.png" alt="image-20211220132350690"></p>
<h5><span id="套接字端口号的分配">套接字端口号的分配</span></h5><p>客户端自动分配：</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220132502057.png" alt="image-20211220132502057"></p>
<p>服务器指定端口号创建套接字：</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220132525431.png" alt="image-20211220132525431"></p>
<h4><span id="udp分用">UDP分用</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220132921415.png" alt="image-20211220132921415"></p>
<h4><span id="tcp服务器使用的套接字">TCP服务器使用的套接字</span></h4><ul>
<li><p>一个TCP服务器为了同时服务很多个客户，使用两种套接字</p>
<ul>
<li>监听套接字</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220133053166.png" alt="image-20211220133053166"></p>
<ul>
<li>连接套接字</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220133106417.png" alt="image-20211220133106417"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220133147037.png" alt="image-20211220133147037"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220133253573.png" alt="image-20211220133253573"></p>
<h3><span id="udp">UDP</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220133344752.png" alt="image-20211220133344752"></p>
<h4><span id="udp报文结构">UDP报文结构</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220133458396.png" alt="image-20211220133458396"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220133525014.png" alt="image-20211220133525014"></p>
<h5><span id="校验和">校验和</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220133632019.png" alt="image-20211220133632019"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220133839322.png" alt="image-20211220133839322"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220134026495.png" alt="image-20211220134026495"></p>
<h4><span id="为什么需要udp">为什么需要UDP</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220134043001.png" alt="image-20211220134043001"></p>
<h2><span id="tcp">TCP</span></h2><h4><span id="概述">概述</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220134130957.png" alt="image-20211220134130957"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220134140590.png" alt="image-20211220134140590"></p>
<h4><span id="tcp报文段结构">TCP报文段结构</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220134234710.png" alt="image-20211220134234710"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220134325692.png" alt="image-20211220134325692"></p>
<h4><span id="发送序号和确认序号的含义">发送序号和确认序号的含义</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220134425019.png" alt="image-20211220134425019"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220134530203.png" alt="image-20211220134530203"></p>
<h3><span id="tcp可靠数据传输">TCP可靠数据传输</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220134550094.png" alt="image-20211220134550094"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220135006887.png" alt="image-20211220135006887"></p>
<h4><span id="tcp发送端">TCP发送端</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220135101730.png" alt="image-20211220135101730"></p>
<h4><span id="重传场景">重传场景</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220135117480.png" alt="image-20211220135117480"></p>
<h4><span id="tcp接收端">TCP接收端</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220135253535.png" alt="image-20211220135253535"></p>
<h3><span id="tcp流量控制">TCP流量控制</span></h3><h3><span id="tcp接收端">TCP接收端</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220135438509.png" alt="image-20211220135438509"></p>
<h3><span id="tcp连接管理">TCP连接管理</span></h3><h4><span id="建立tcp连接">建立TCP连接</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220135638167.png" alt="image-20211220135638167"></p>
<h4><span id="tcp三次握手建立连接">TCP三次握手建立连接</span></h4><h5><span id="两次握手建立连接">两次握手建立连接</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220135658788.png" alt="image-20211220135658788"></p>
<p>两次握手失败的例子</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220135713711.png" alt="image-20211220135713711"></p>
<h5><span id="tcp是三次握手建立连接">TCP是三次握手建立连接</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220135851443.png" alt="image-20211220135851443"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220140001330.png" alt="image-20211220140001330"></p>
<h4><span id="关闭tcp连接">关闭TCP连接</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220140204601.png" alt="image-20211220140204601"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220140309170.png" alt="image-20211220140309170"></p>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>计网L10</title>
    <url>/2021/12/20/%E8%AE%A1%E7%BD%91L10/</url>
    <content><![CDATA[<h4><span id="内容">内容</span></h4><ul>
<li>Hierarchical routing</li>
<li>Broadcast routing</li>
<li>Multicast routing</li>
<li>Mobile routing</li>
<li>Adhoc routing </li>
<li>P2P</li>
</ul>
<h4><span id="hierarchical-routing">Hierarchical Routing</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220094119392.png" alt="image-20211220094119392"></p>
<h4><span id="broadcast-routing">Broadcast Routing</span></h4><ul>
<li>可能的应用：<ul>
<li>分发天气报告、股票市场更新、现场广播节目。</li>
</ul>
</li>
<li>广播路由可以通过以下五种方式之一完成：<ul>
<li>通过向每个目的地发送唯一的数据包来广播每个数据包。</li>
<li>用数据包flood网络，以便每台机器都能接收到它。</li>
<li>使用多目的地路由(multi-destination routing)将数据包发送到网络上的特定机器。</li>
<li>使用sink tree（或spanning tree）来引导数据包</li>
<li>使用反向路径转发(reverse path forwarding)来帮助控制“flood”。</li>
</ul>
</li>
</ul>
<h5><span id="reverse-path-forwarding">Reverse path forwarding</span></h5><p>基本思想：当广播数据包从通常用于发送数据包到广播源的线路到达路由器时，它被转发到除它到达的那条线路之外的所有线路上。 否则，它被丢弃。</p>
<h4><span id="internet-multicasting-组播">Internet Multicasting 组播</span></h4><ul>
<li><p>源主机给网络中的一部分目标用户发送数据包</p>
</li>
<li><p>IP 支持多播，使用 D 类地址。</p>
</li>
<li>每个 D 类地址标识一组主机。<ul>
<li>28位可用于识别组，因此支持2.5亿组。</li>
</ul>
</li>
<li>IP multicast很重要：<ul>
<li>Member management（IGMP/MLD）路由器获悉该网段的组播组成员</li>
<li>Multicast routing table（PIM-DM/SM）</li>
</ul>
</li>
<li>组播是由特殊的组播路由器实现的。<ul>
<li>应用层组播</li>
</ul>
</li>
</ul>
<h5><span id="multicast-routing">Multicast routing</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220094639123.png" alt="image-20211220094639123"></p>
<h4><span id="routing-for-mobile-hosts">Routing for Mobile Hosts</span></h4><ul>
<li>什么是移动主机？ 我们包括：<ul>
<li>物理连接到网络的迁移主机，但会四处移动（我们的笔记本电脑，固定的）。</li>
<li>漫游主机实际上在运行中计算并希望在它四处移动时保持其连接</li>
</ul>
</li>
<li>所有主机都有一个永久的host location和一个永久的home address，可用于确定他们的家庭位置。</li>
<li><p>具有移动用户的系统中的路由目标是使使用他们的家庭地址向移动用户发送数据包成为可能，并使数据包无论他们身在何处都能有效地到达他们。</p>
</li>
<li><p>世界被分成小区域</p>
<ul>
<li>每个区域都有一个或多个foreign agents(外地代理)，负责跟踪所有访问该区域的移动用户。</li>
<li>每个区域也有一个home agent（家乡代理），它会跟踪住家在该区域但当前正在访问另一个区域的用户。</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220094923040.png" alt="image-20211220094923040"></p>
<h5><span id="mobile-host-registration-procedure">Mobile Host Registration Procedure</span></h5><ul>
<li>每个外地代理定期广播一个数据包，宣布它的存在和地址。</li>
<li>移动主机向外地代理注册，给出其家乡地址、当前数据链路层地址和一些安全信息。</li>
<li>外地代理联系移动主机的家乡代理，通知用户当前在外地区域。</li>
<li>家乡代理检查外地代理提供的安全信息，如果信息正确，则通知外地代理继续。</li>
<li>当外地代理得到家乡代理的确认时，它在其表中创建一个条目并通知移动主机它现在已注册。</li>
<li>当用户离开一个区域时，它应该注销自己。</li>
</ul>
<h5><span id="packet-routing-for-mobile-hosts-tunnel">Packet Routing For Mobile Hosts (tunnel)</span></h5><p>移动主机的数据包路由（隧道）</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220095213090.png" alt="image-20211220095213090"></p>
<h4><span id="routing-in-ad-hoc-networks-ad-hoc-网络中的路由">Routing in Ad Hoc Networks — Ad Hoc 网络中的路由</span></h4><ul>
<li>Ad hoc 网络（或 MANET，Mobile Ad hoc NETworks）涉及主机和路由器都是移动的：<ul>
<li>战场上的军车 - 没有基础设施</li>
<li>海上的舰队 - 一直在移动</li>
<li>地震应急工程 - 基础设施被毁。</li>
<li>一群拿着笔记本电脑的人 - 在一个缺乏 802.11 的地区。</li>
</ul>
</li>
<li>对于自组织网络，拓扑可能一直在变化，自组织网络中的路由与其固定对应网络中的路由完全不同。</li>
</ul>
<h4><span id="peer-to-peer-networks">Peer-to-Peer Networks</span></h4><ul>
<li>点对点（或 P2P）计算机网络是一种主要依赖网络中参与者的计算能力和带宽而不是将其集中在数量相对较少的服务器上的网络。</li>
<li>所有节点都是对称(symmetric)的，没有中央控制或层次结构。</li>
<li><p>没有人愿意托管和维护一个中心化的数据库，甚至一个中心化的索引。</p>
</li>
<li><p>点对点网络的优势</p>
<ul>
<li>所有客户端都提供资源，包括带宽、存储空间和计算能力。</li>
<li>点对点网络的分布式特性也提高了纯 P2P 系统出现故障时的鲁棒性</li>
</ul>
</li>
<li>非结构化和结构化 P2P 网络<ul>
<li>非结构化P2P网络<ul>
<li>为了在网络中找到所需的数据，必须通过网络泛洪查询，以便找到尽可能多的共享数据的对等点。</li>
<li>大多数流行的 P2P 网络，如 Napster、Gnutella 和 KaZaA，都是非结构化的。</li>
</ul>
</li>
<li>结构化 P2P 网络<ul>
<li>维护分布式哈希表 (DHT) 并允许每个对等方负责网络中内容的特定部分。</li>
<li>一些著名的结构化 P2P 网络是 Chord、Pastry、Tapestry、CAN 和 Tulip</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5><span id="p2p-centralized-directory">P2P: centralized directory</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220095630543.png" alt="image-20211220095630543"></p>
<p>P2P: problems with centralized directory</p>
<ul>
<li>Single point of failure 单点故障</li>
<li>Performance bottleneck 性能瓶颈</li>
<li>Copyright infringement 侵犯版权</li>
</ul>
<h5><span id="gnutellaprotocol">Gnutella：protocol</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220095814760.png" alt="image-20211220095814760"></p>
<h5><span id="利用异质性kazaa">利用异质性：KaZaA</span></h5><ul>
<li>每个对等点要么是group leader，要么是指派给一个group leader。<ul>
<li>peer 与其 group leader之间的 TCP 连接。</li>
<li>一些group leader对之间的 TCP 连接。</li>
</ul>
</li>
<li>group leader跟踪其所有子项中的内容。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220095951150.png" alt="image-20211220095951150" style="zoom:67%;"></p>
<ul>
<li><p>KaZaA: Querying</p>
<ul>
<li><p>每个文件都有一个哈希值和一个描述符</p>
</li>
<li><p>客户端向其group leader发送关键字查询</p>
</li>
<li><p>group leader回应匹配：</p>
<ul>
<li>对于每个匹配项：元数据、哈希、IP 地址</li>
</ul>
</li>
<li><p>如果group leader将查询转发给其他group leader，他们会回复匹配项</p>
</li>
<li><p>客户端然后选择要下载的文件</p>
<ul>
<li>使用哈希作为标识符的 HTTP 请求发送给持有所需文件的对等方</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4><span id="node-lookup-in-chord-chord-中的节点查找">Node Lookup in Chord — Chord 中的节点查找</span></h4><ul>
<li>Chord 系统由 n 个参与用户组成。</li>
<li>每个用户节点都有一个 IP 地址，可以使用哈希函数将其哈希为 m 位数字。<ul>
<li>Chord 使用 SHA-1 进行哈希处理。</li>
<li>任何 IP 地址都会转换为 160 位数字，称为节点标识符。</li>
</ul>
</li>
<li>从概念上讲，所有$ 2^{160} $个节点标识符都按升序排列在一个大圆圈中。</li>
<li><p>其中一些对应于参与节点，但大多数不对应。</p>
</li>
<li><p>将函数successor(k) 定义为顺时针方向跟随k 的第一个实际节点的节点标识符。</p>
</li>
<li>记录的名称也用散列（即 SHA-1）散列以生成一个 160 位的数字，称为密钥。<ul>
<li>key = hash(name)</li>
</ul>
</li>
<li>为了向其他人提供记录，节点构建一个由 (name, my-IP-address) 组成的元组，然后要求successor(hash(name)) 存储该元组。</li>
<li>这样，索引随机分布在节点上。</li>
<li><p>对于容错，可以使用 p 个不同的哈希函数将每个元组存储在 p 个节点上。</p>
</li>
<li><p>如果某个用户稍后想要查找名称，他会对其进行哈希处理以获取密钥，然后使用 successor (key)查找存储其索引元组的节点的 IP 地址。</p>
</li>
<li><p>查找程序：</p>
<ul>
<li>请求节点向其后继节点发送一个包含其 IP 地址和它正在寻找的密钥的数据包。</li>
<li>数据包在环上传播，直到它定位到正在寻找的节点标识符的后继者。</li>
<li>该节点检查它是否有任何与密钥匹配的信息，如果有，则将其直接返回给请求节点。</li>
</ul>
</li>
<li><p>作为第一个优化，每个节点都可以保存其后继节点和前驱节点的 IP 地址，以便可以顺时针或逆时针发送查询。</p>
</li>
<li>在大型对等系统中，线性搜索所有节点的效率非常低，因为每次搜索所需的平均节点数为 n/2。</li>
<li>为了大大加快搜索速度，每个节点还维护 Chord 所谓的 finger table（指取表）。<ul>
<li>finger table有 m 个条目，从 0 到 m - 1 索引，每个条目指向一个不同的实际节点。</li>
<li>每个条目都有两个字段：开始和后继者的 IP 地址（开始）</li>
<li>节点 k 处条目 i 的字段值是：</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220100749741.png" alt="image-20211220100749741" style="zoom:67%;"></p>
<ul>
<li>使用finger table，在节点k 处查找key 的过程如下。<ul>
<li>如果key介于k和successor(k)之间，那么保存key信息的节点就是successor(k)，搜索结束。</li>
<li>否则，搜索finger 表以找到其起始字段是key 的最接近前驱的条目。 然后将请求直接发送到该指纹表条目中的 IP 地址，要求它继续搜索。</li>
<li>平均查找次数为 $log_2n$。</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220100851548.png" alt="image-20211220100851548" style="zoom:67%;"></p>
<p>Lookup key=  3 on node 1<br>Lookup key=14 on node 1<br>Lookup key=16 on node 1</p>
<h5><span id="new-node-join-and-leave">New Node Join And Leave</span></h5><ul>
<li>当一个新节点 r 想要加入时，它必须联系某个现有节点并要求它为它查找后继节点 (r) 的 IP 地址。</li>
<li>然后新节点向后继节点 (r) 询问其前驱节点。</li>
<li>然后，新节点要求这两个节点在圆圈中的它们之间插入 r。</li>
<li>当一个节点优雅地离开时，它把它的密钥交给它的后继，并通知它的前任它的离开，这样前任就可以链接到离开节点的后继。</li>
<li>为了缓解节点崩溃带来的问题，每个节点不仅要跟踪它的直接后继，还要跟踪它的直接后继</li>
</ul>
<h3><span id="congestion-拥塞">Congestion 拥塞</span></h3><p>拥塞是子网（部分）中存在太多数据包，性能急剧下降的情况</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220102443805.png" alt="image-20211220102443805" style="zoom:67%;"></p>
<h4><span id="factors-causing-congestion-造成拥塞的因素">Factors Causing Congestion 造成拥塞的因素</span></h4><ul>
<li>输入流量速率超过输出线路的容量。<ul>
<li>例如 多条输入线被转发到同一条输出线。</li>
<li>添加更多内存可能会有所帮助。</li>
<li>无限的内存怎么样？</li>
</ul>
</li>
<li>路由器中的处理器太慢而无法执行簿记任务（排队缓冲区、更新表等）。</li>
<li>线路容量和处理器能力需要平衡。</li>
</ul>
<h4><span id="congestion-control-vs-flow-control-拥塞控制与流量控制">Congestion Control vs. Flow Control 拥塞控制与流量控制</span></h4><ul>
<li>拥塞控制 Congestion Control<ul>
<li>它确保子网能够承载提供的流量。</li>
<li>这是一个全局问题，涉及所有主机、所有路由器的行为、路由器内的存储和转发处理等。</li>
</ul>
</li>
<li>流量控制 Flow Control<ul>
<li>它涉及给定发送方和给定接收方之间的点对点流量。</li>
<li>它确保快速发送方不能以比接收方能够吸收数据的速度持续传输数据。</li>
</ul>
</li>
<li>主机可能会收到“减速”消息，因为接收器无法处理负载或因为网络无法处理它（confused）。</li>
</ul>
<h4><span id="congestion-metrics-拥塞度量">Congestion Metrics 拥塞度量</span></h4><ul>
<li>由于缓冲区空间不足而丢弃的所有数据包的百分比</li>
<li>平均队列长度</li>
<li>超时并重新传输的数据包数</li>
<li>平均数据包延迟</li>
<li>数据包延迟的标准偏差</li>
<li>不断上升的数字表明日益拥挤。</li>
</ul>
<h4><span id="congestion-information-propagation-拥塞信息传播">Congestion Information Propagation 拥塞信息传播</span></h4><ul>
<li>检测到拥塞的路由器向流量源发送一个单独的警告数据包。</li>
<li>每个数据包中可以保留一个位或字段。 当路由器检测到拥塞状态时，它会在所有传出数据包中填充该字段以警告邻居。</li>
<li>主机或路由器定期发送探测数据包以明确询问拥塞情况并在问题区域周围路由流量</li>
</ul>
<h4><span id="congestion-control-in-virt-circuit-subnets-虚拟电路子网中的拥塞控制">Congestion Control In Virt.-circuit Subnets 虚拟电路子网中的拥塞控制</span></h4><ul>
<li>Admission control（准入控制，简单粗暴）<ul>
<li>一种闭环技术，可以防止已经开始恶化的拥塞。</li>
<li>基本思想：一旦发出拥塞信号，就不会再建立虚拟电路，直到问题消失。</li>
</ul>
</li>
<li>备用路由（绕过问题区域）<ul>
<li>允许新的虚拟电路，但在问题区域周围小心地路由所有新的虚拟电路。</li>
</ul>
</li>
<li>协商主机和子网之间的协议，以便子网在电路建立时可以预留路径上的资源。（资源预留）<ul>
<li>交通量和交通形态</li>
<li>所需的服务质量</li>
<li>其他参数</li>
</ul>
</li>
</ul>
<h4><span id="congestion-control-in-datagram-subnets-数据报子网中的拥塞控制">Congestion Control In Datagram Subnets 数据报子网中的拥塞控制</span></h4><ul>
<li>每个路由器都可以监控其输出线路和其他资源的利用率。</li>
<li>每行都与一个变量 u 相关联，其值 (0.0 -1.0) 反映了最近的利用率。</li>
<li>每当 u 移动到阈值以上时，输出线就会进入警告状态。</li>
<li>检查每个新到达的数据包以查看其输出线是否处于警告状态。</li>
</ul>
<h5><span id="actions-when-in-warning-state">Actions When In Warning State</span></h5><ul>
<li>The Warning Bit（警告位）<img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220103310669.png" alt="image-20211220103310669"><ul>
<li>在数据包的报头中设置了一个特殊位。</li>
<li>该位被复制到下一个发送回源的确认中。</li>
<li>源监视设置了位的确认部分并相应地调整其传输速率。</li>
</ul>
</li>
<li><p>Choke Packets（极限极限）</p>
<ul>
<li>路由器将阻塞数据包发送回源主机，将数据包中的目的地提供给它。</li>
<li>当源主机收到choke包时，需要将到达目的地的流量减少一定的百分比。</li>
<li>主机应在固定时间间隔内忽略指向同一目的地的阻塞数据包</li>
<li>如果在侦听期间没有阻塞数据包到达，主机可能会再次增加流量。</li>
</ul>
</li>
<li><p>Hop-by-Hop Choke Packets（逐跳抑制演奏）</p>
<ul>
<li>在高速或长距离下，向源主机发送阻塞数据包效果不佳，因为反应太慢。</li>
<li>另一种方法是让扼流数据包在它经过的每一跳都生效。</li>
<li>这种逐跳方案的净效果是以消耗更多上游缓冲区为代价在拥塞点提供快速缓解。</li>
</ul>
</li>
</ul>
<h4><span id="fragmentation">Fragmentation</span></h4><ul>
<li>每个网络都对其数据包施加了一些最大尺寸。<ul>
<li>硬件（例如，TDM 传输时隙的宽度）</li>
<li>操作系统（例如，所有缓冲区都是 512 字节）</li>
<li>协议（例如，数据包长度字段中的位数）</li>
<li>符合一些（国际）国家标准</li>
<li>希望将错误引起的重传减少到一定程度</li>
<li>希望防止一个数据包占用信道时间过长</li>
</ul>
</li>
<li>网络设计者不能自由选择他们希望的任何最大数据包大小。</li>
<li><p>最大有效载荷范围从 48 字节（ATM 信元）到 65,515 字节（IP 数据包），尽管较高层的有效载荷大小通常更大。</p>
</li>
<li><p>如果一个网络只允许 48 字节的数据包，而另一个网络允许 65515 字节的数据包，那么很难通过只允许较小数据包的网络获取大数据包。</p>
</li>
<li><p>如何才能做到这一点？ – Fragmentation（分段）</p>
<ul>
<li>Fragmentation是将数据包分解成几个较小的数据包以通过网络发送的过程。</li>
<li>问题不在于分解数据包以发送它，而是在另一端将数据包重新组合在一起。</li>
<li>有两种不同类型的碎片——透明(transparent)和非透明(non-transparent)。</li>
</ul>
</li>
<li><p>透明分段试图通过在每次离开网络时重构数据包，使分段对路由上的任何其他网络不可见。</p>
</li>
<li>不透明的分段会导致所有分段的数据包通过多个网络到达目的地，而让目的地将它们重新组合在一起。</li>
</ul>
<h5><span id="问题">问题</span></h5><ul>
<li>透明碎片<ul>
<li>出口网关必须知道它何时收到了所有的碎片。</li>
<li>所有数据包必须通过同一个网关退出。</li>
<li>重复重新组装然后重新整理大数据包所需的开销很大。</li>
</ul>
</li>
<li>不透明的碎片<ul>
<li>它要求每个主机都能够进行重组。</li>
<li>总开销会增加，因为每个片段都必须有一个标头。</li>
</ul>
</li>
</ul>
<h5><span id="a-method-of-numbering-the-fragments">A Method of Numbering the Fragments</span></h5><ul>
<li>定义一个小到足以通过每个网络的基本片段大小。</li>
<li>当原始数据包被分片时，除了最后一个（较短的）外，所有的碎片都等于基本碎片大小。</li>
<li>一个互联网数据包可能包含几个基本片段。</li>
<li>互联网数据包头必须提供<ul>
<li>原始包号</li>
<li>互联网数据包中包含的第一个基本片段的编号，以及</li>
<li>一位指示互联网数据包中的最后一个基本片段是否是原始数据包的最后一个。</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220104547830.png" alt="image-20211220104547830" style="zoom:50%;"></p>
<h3><span id="outline">Outline</span></h3><ul>
<li>Main function of router</li>
<li>Learn IP<ul>
<li>IP packet format</li>
<li>IP address and it’s classification</li>
</ul>
</li>
<li>Reserved IPv4 address</li>
<li>Subnet and subnetting </li>
</ul>
<h4><span id="internet-and-its-network-layer">Internet and Its Network Layer</span></h4><ul>
<li>可以将 Internet 视为互连的子网或Autonomous Systems (ASes) 的集合。</li>
<li>将整个 Internet 连接在一起的粘合剂是网络层协议 IP（Internet 协议）。</li>
<li>它的工作是提供一种best-efforts(尽力而为)（即不保证）的方式来将数据报从源传输到目的地。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220105051299.png" alt="image-20211220105051299"></p>
<h5><span id="internet-collection-of-subnetworks">Internet - Collection of Subnetworks</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220105111829.png" alt="image-20211220105111829" style="zoom:67%;"></p>
<h4><span id="addressing寻址">Addressing(寻址)</span></h4><ul>
<li>寻址：连网的目的是共享资源、与远端节点通信，要做到这一点，首先必须找到目的节点，寻找目的节点（设备）的过程叫做寻址。</li>
<li>两类<ul>
<li>MAC寻址：根据MAC地址定位目的地</li>
<li>IP寻址：根据IP地址定位目的地</li>
</ul>
</li>
</ul>
<h5><span id="ip-addressing">IP addressing</span></h5><ul>
<li>步骤<ul>
<li>数据包到达路由器</li>
<li>路由器转发数据包</li>
<li>定位目的地</li>
</ul>
</li>
<li>类比：邮寄</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220105244032.png" alt="image-20211220105244032" style="zoom:67%;"></p>
<h5><span id="main-function-of-router">Main function of router</span></h5><ul>
<li>路由器进程<ul>
<li>开包（解封装）</li>
<li>确定目标网络</li>
<li>查找路由表，重新封装并转发</li>
</ul>
</li>
<li>主功能<ul>
<li>路由</li>
<li>向前</li>
<li>其他</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220105335538.png" alt="image-20211220105335538"></p>
<h5><span id="routing-table">Routing table</span></h5><ul>
<li>包括网络地址、接口、度量（例如跳数）、子网掩码、网关等。</li>
<li>除了连接设备的IP和MAC地址外，路由器还有其邻居路由器的IP和MAC地址（arp表）</li>
<li>可能有些不同，因为工厂不同</li>
</ul>
<h5><span id="arp-table-and-routing-table">ARP table and routing table</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220105423587.png" alt="image-20211220105423587" style="zoom: 50%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220105609671.png" alt="image-20211220105609671"></p>
<p>Routing of router R1</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220105622239.png" alt="image-20211220105622239"></p>
<h4><span id="internet-protocol">Internet protocol</span></h4><ul>
<li>IP 是提供一种尽力而为（即，不保证）的方式来将数据报（数据包）从源传输到目的地<ul>
<li>路由协议</li>
</ul>
</li>
<li>互联网协议 Internet protocol<ul>
<li>数据包格式</li>
<li>寻址</li>
</ul>
</li>
</ul>
<h5><span id="ip-packet-format">IP packet format</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220105820530.png" alt="image-20211220105820530"></p>
<p>DF: don’t fragment</p>
<p>MF: More fragments</p>
<h5><span id="ip-address">IP address</span></h5><ul>
<li><p>IP地址：网络号和主机号</p>
</li>
<li><p>IP地址的二进制数字</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220105917403.png" alt="image-20211220105917403" style="zoom:50%;"></p>
</li>
<li><p>缺点：难以记住</p>
</li>
</ul>
<h5><span id="ip地址的点分十进制表示法">IP地址的点分十进制表示法</span></h5><ul>
<li>二进制IP很难记住</li>
<li>点分十进制表示法：<ul>
<li>32 位被分成 4 个 8 位组</li>
<li>“.” 用于分隔 8 位组</li>
<li>每个 8 位组用十进制写，从 0 到 255</li>
</ul>
</li>
</ul>
<h5><span id="hierachical-property-of-ip-addr">Hierachical property of IP addr.</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220110029573.png" alt="image-20211220110029573"></p>
<h5><span id="classification-of-ip-address-ip地址的分类">Classification of IP address  IP地址的分类</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220110057172.png" alt="image-20211220110057172" style="zoom:67%;"></p>
<h5><span id="特殊的ip地址">特殊的IP地址</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219211333100.png" alt="image-20211219211333100"></p>
<h5><span id="flood-broadcast-local-broadcast">Flood Broadcast = Local Broadcast</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220110412284.png" alt="image-20211220110412284"></p>
<h5><span id="direct-broadcast">Direct Broadcast</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220110423602.png" alt="image-20211220110423602"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220110630238.png" alt="image-20211220110630238"></p>
<h5><span id="public-and-private-address">Public and private address</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220110656080.png" alt="image-20211220110656080"></p>
<h4><span id="subnet子网">Subnet(子网)</span></h4><ul>
<li>LAN 可能会变得太大而无法处理，必须拆分为多个子网。</li>
<li>子集允许将网络分成几个部分供内部使用，但对于外部世界仍然像单个网络（即单个路由表条目）一样。</li>
<li>这允许在组织内连接不同的子网。</li>
</ul>
<h5><span id="main-router的作用">Main router的作用</span></h5><ul>
<li>与外界的交流</li>
<li>主路由器转发来自外部的数据包，但如何知道内部网络结构？<ul>
<li>一张桌子？</li>
<li>一种机制，子网掩码</li>
</ul>
</li>
</ul>
<h5><span id="subnet-masks-子网掩码">Subnet Masks  子网掩码</span></h5><ul>
<li>路由器使用掩码来确定数据包应该传送到哪个子网。</li>
<li>子网掩码可以用点分十进制表示法指定，添加一个斜杠，后跟网络 + 子网部分的位数。<ul>
<li>255.255.255.224</li>
<li>202.10.23.102/27</li>
</ul>
</li>
<li>路由器将目的地址与子网掩码进行 AND 运算，以获得数据包应该去的路由器的地址。</li>
<li>使用这种方法减少了每个路由器必须存储的单个地址的数量，从而产生更小的路由器表。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220111034336.png" alt="image-20211220111034336" style="zoom: 50%;"></p>
<p>Addr. Of subnet</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220111046902.png" alt="image-20211220111046902" style="zoom:50%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220111216745.png" alt="image-20211220111216745"></p>
<ul>
<li>子网是通过从 IP 地址的主机部分借用位来构建的</li>
<li><p>子网划分导致 IP 地址空间丢失</p>
<ul>
<li>例如：C类IP 202.38.197.0，256个IP地址，254个有效IP。</li>
<li>4个子网，IP地址总数，2*62=124。</li>
</ul>
</li>
<li><p>子网划分：将大网络划分为小子网</p>
</li>
<li><p>借用规则</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220111406088.png" alt="image-20211220111406088" style="zoom:50%;"></p>
<h3><span id="outline">Outline</span></h3><ul>
<li>The basic idea of CIDR</li>
<li>The principle of NAT/PAT</li>
<li>ICMP and it’s application</li>
<li>Principle Address resolution protocol<ul>
<li>ARP</li>
<li>RARP</li>
</ul>
</li>
<li>Learn assignment of IP address (RARP\Boot\pDHCP)</li>
</ul>
<h4><span id="ip-address-problem">IP address problem</span></h4><ul>
<li>IP 正迅速成为其流行的受害者：它的地址已用完。</li>
<li>原则上，存在超过 40 亿个地址，但按类组织地址空间的做法浪费了数百万个。</li>
<li>对于大多数组织：<ul>
<li>A类网络，16M地址太大了</li>
<li>C类网络，256个地址太小了</li>
<li>具有 65,536 个地址的 B 类网络似乎恰到好处（许多组织要求使用 B 网络）。</li>
</ul>
</li>
<li>实际上，所有 B 类网络中有一半以上的主机少于 50 台！</li>
<li>如何提供更多（和更小）的 B 类地址？ 或者 C 类网络使用 10 位而不是 8 位作为主机号？</li>
<li>路由表爆炸</li>
</ul>
<h4><span id="cidr-classless-interdomain-routing-无类别域间路由">CIDR –Classless InterDomain Routing 无类别域间路由</span></h4><ul>
<li>路由表问题的解决方法和addr。 问题是 CIDR。</li>
<li>RFC 1519 中描述了 CIDR 背后的基本思想。<ul>
<li>以可变大小的块分配 IP 地址，而不是根据类别分配 IP 地址。<ul>
<li>例如 需要2000个地址</li>
</ul>
</li>
</ul>
</li>
<li>CIDR 可以使用前缀 13~27。</li>
</ul>
<h5><span id="routing-with-cidr">Routing With CIDR</span></h5><ul>
<li>每个路由表条目都通过提供 32 位掩码进行扩展。</li>
<li>每个路由表由一组（IP 地址、子网掩码、出线） 三元组组成。<ul>
<li>(IP address, subnet mask, outgoing line)</li>
</ul>
</li>
<li>当一个数据包进来时，<ul>
<li>首先提取其目标 IP 地址。</li>
<li>屏蔽目标地址并将其与查找匹配项的表条目进行比较。</li>
<li>如果多个条目（具有不同子网掩码长度）匹配，则使用最长的掩码。</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220111848059.png" alt="image-20211220111848059"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220111916712.png" alt="image-20211220111916712"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220111930693.png" alt="image-20211220111930693"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220112303942.png" alt="image-20211220112303942"></p>
<h4><span id="routing-cluster路由聚合">Routing cluster(路由聚合)</span></h4><ul>
<li>Reduce routing table</li>
<li>Separate up-down(隔离路由翻动)</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220112317913.png" alt="image-20211220112317913" style="zoom:50%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220112335593.png" alt="image-20211220112335593"></p>
<h4><span id="nat-outline">NAT outline</span></h4><ul>
<li>NAT：网络地址转换NAT<ul>
<li>私人IP地址（私人地址）与全球IP地址（公有地址）之间的转换</li>
</ul>
</li>
<li>PAT：端口地址转换<ul>
<li>映射许多 IP 地址。 到一个 IP 地址。 不同的端口</li>
</ul>
</li>
<li>私有IP地址：非路由地址。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220112428774.png" alt="image-20211220112428774" style="zoom:50%;"></p>
<ul>
<li>需要快速修复来解决 IP 地址用完的问题。</li>
<li>NAT（网络地址转换）在 RFC 3022 中有描述。</li>
<li>该过程涉及使用私有内部 IP 地址，然后在离开 LAN 时将这些 IP 地址转换为有效的 IP 地址。</li>
<li>此转换由 NAT 盒完成。 NAT 盒能够通过使用大型转换表来转换和跟踪地址。</li>
<li>当传入的数据包到达 NAT 盒时，它会查找源端口字段，该字段用作 NAT 表中内部 IP 地址的索引。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220112519233.png" alt="image-20211220112519233" style="zoom:50%;"></p>
<h5><span id="nat-operation">NAT Operation</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220112539642.png" alt="image-20211220112539642"></p>
<h5><span id="nat-issues">NAT Issues</span></h5><ul>
<li>NAT 违反了 IP 的架构模型——每个 IP 地址在全球范围内唯一标识一台机器。</li>
<li>它把互联网变成了一个“面向连接”的网络。 NAT 盒维护连接的状态，如果它崩溃，链接也会崩溃。</li>
<li><p>协议层 k 假设协议层 k+1 已放入有效载荷中，从而违反了层独立性。</p>
</li>
<li><p>如果使用 TCP 或 UDP 以外的某些协议，NAT 可能会失败。</p>
</li>
<li>如果 IP 地址被插入到有效载荷数据（即消息文本）中，那么 NAT 表将不会转换该信息，并且可能会出现问题。</li>
<li>一台NAT机器的限制是61,440（65536-4096）台机器。</li>
</ul>
<h4><span id="internet-network-layer-protocol">Internet network-layer protocol</span></h4><ul>
<li>除了互联网协议，还有一些其他的附属协议<ul>
<li>ICMP</li>
<li>ARP</li>
<li>RARP</li>
<li>引导程序</li>
<li>DHCP</li>
</ul>
</li>
</ul>
<h4><span id="icmp-internet-control-message-protocol">ICMP - Internet Control Message Protocol</span></h4><p>用于报告意外事件（错误）或测试互联网。<br><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220112712597.png" alt="image-20211220112712597"></p>
<h5><span id="icmp-message-format">ICMP message format</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220112723890.png" alt="image-20211220112723890" style="zoom:67%;"></p>
<h4><span id="address-mapping-地址映射">Address mapping ( 地址映射)</span></h4><ul>
<li>ARP （地址解析协议）：<ul>
<li>Address Resolution Protocol 地址解析协议</li>
<li>IP addr. -&gt; MAC addr.</li>
<li>ARP 解决了找出哪个物理地址对应于给定 IP 地址的问题。</li>
<li>ARP 在 RFC 826 中定义。</li>
</ul>
</li>
<li>RARP （逆向地址解析协议）<ul>
<li>Reserve Address Resolution Protocol</li>
<li>MAC addr. -&gt; IP addr. </li>
</ul>
</li>
</ul>
<h4><span id="assignment-way-of-ip-addr">Assignment way of IP addr.</span></h4><ul>
<li>静态赋值</li>
<li>动态分配<ul>
<li>给定一个以太网地址，对应的 IP 地址是什么？<ul>
<li>RARP（反向地址解析协议）在RFC 903中定义。它使用全1（有限广播）的目的地址到达RARP服务器，RARP服务器发回相应的IP地址。</li>
<li>BOOTP 在 RFC 951、1048 和 1084 中定义。它使用通过路由器转发的 UDP 消息。 它可以提供更多信息。 （缺点 :手动配置）</li>
<li>DHCP（动态主机配置协议）在 RFC 2131 和 2132 中有描述。 RARP</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4><span id="dhcp动态主机配置协议">DHCP：动态主机配置协议</span></h4><p>Dynamic host configure protocol<br>可以灵活分配IP地址，节约IP地址的使用</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220113101135.png" alt="image-20211220113101135" style="zoom:50%;"></p>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>计网L12</title>
    <url>/2021/12/20/%E8%AE%A1%E7%BD%91L12/</url>
    <content><![CDATA[<h2><span id="dns-域名系统">DNS — 域名系统</span></h2><h3><span id="概述">概述</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220140835462.png" alt="image-20211220140835462"></p>
<h3><span id="域名系统名字空间和层次结构">域名系统名字空间和层次结构</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220141057253.png" alt="image-20211220141057253"></p>
<h3><span id="域名解析过程"><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220141144871.png" alt="image-20211220141144871">域名解析过程</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220141504090.png" alt="image-20211220141504090"></p>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>计网L2</title>
    <url>/2021/12/03/%E8%AE%A1%E7%BD%91L2/</url>
    <content><![CDATA[<h3><span id="design-issues-for-the-networks-网络的设计要素">Design Issues for the Networks 网络的设计要素</span></h3><ul>
<li>Addressing 寻址</li>
<li>Error control  错误控制</li>
<li>flow control 流量控制</li>
<li>routing 路由</li>
<li>multiplexing and de-multiplexing</li>
</ul>
<h2><span id="network-architecture">Network Architecture</span></h2><h3><span id="layered-network-model-分层网络模型">Layered Network Model 分层网络模型</span></h3><h4><span id="osi">OSI</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211203095401319.png" alt="image-20211203095401319"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211203095414631.png" alt="image-20211203095414631"></p>
<h4><span id="peer-to-peer-communications-对等体交流">Peer-to-Peer Communications 对等体交流</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211203095513192.png" alt="image-20211203095513192"></p>
<h4><span id="tcpip-of-internet">TCP/IP of Internet</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211203095526745.png" alt="image-20211203095526745"></p>
<h3><span id="protocol-协议">protocol 协议</span></h3><p>协议（protocol）是指通信双方就如何进行通信的一种约定。</p>
<p>Protocol refers to a kind of agreement on how to communicate between communication parties.</p>
<h3><span id="service-服务">service 服务</span></h3><ul>
<li>服务是指某一层向它上一层提供的一组原语（操作）。<ul>
<li>A service is a set of primitives (operations) provided by a layer to its upper layer.</li>
</ul>
</li>
<li>服务定义了该层准备代表其用户执行哪些操作，但是它并不涉及如何实现这些操作。</li>
<li>服务与两层之间的接口有关，低层是服务提供者，而上层是服务用户。</li>
</ul>
<h3><span id="service-primitive-服务原语">service primitive 服务原语</span></h3><p>一个服务由一组原语（primitive）正式说明，用户进程通过这些原语（操作）来访问该服务。</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211203095325512.png" alt="image-20211203095325512"></p>
<h3><span id="协议和服务的关系和区别">协议和服务的关系和区别</span></h3><ul>
<li>服务是指某一层向它上一层提供的一组原语（操作）。</li>
<li>协议是一组规则，规定了同一层上对等实体之间所交换的数据包或者报文的格式和含义。对等实体利用协议来实现它们的服务定义，它们可以自由地改变协议，只要不改变呈现给它们用户的服务即可。</li>
<li>按照这种方式，服务和协议是完全相分离的</li>
<li>服务涉及层与层之间的接口，协议涉及不同机器上两个对等实体之间发送的数据包</li>
</ul>
<h4><span id> </span></h4><h4><span id="ieee-802工作组">IEEE 802工作组</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211203095623007.png" alt="image-20211203095623007"></p>
<h4><span id="network-standardization">Network Standardization</span></h4><ul>
<li>ITU (International Telecommunication Union)</li>
<li>ISO (International Standards Organization )</li>
<li>ANSI (American National Standards Institute)</li>
<li>NIST (National Institute of Standards and Technology)</li>
<li>IEEE (Institute of Electrical and Electronics Engineers)</li>
<li>RFCs  (Request For Comments). </li>
<li>IRTF (Internet Research Task Force)</li>
</ul>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>计网L3</title>
    <url>/2021/12/03/%E8%AE%A1%E7%BD%91L3/</url>
    <content><![CDATA[<h3><span id="物理层">物理层</span></h3><p>定义了网络的机械、电气和定时接口，提供了从发送方到接收方传输位的方法，也就是说，涉及了大量关于如何使用（模拟）信号(analog  signal)来获取数字信息(digital information)的内容。</p>
<h3><span id="数据交流的技术基础">数据交流的技术基础</span></h3><h4><span id="傅里叶级数">傅里叶级数</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main\image-20210913090702637.png" alt="image-20210913090702637"></p>
<p>信息可以通过改变某些物理特性（如电压或电流）在导线上传输。通过将该电压或电流的值表示为时间的单值函数f（t），我们可以对信号的行为建模并进行数学分析</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main\image-20210913091151302.png" alt="image-20210913091151302"></p>
<ul>
<li><h4><span id="bandwidth带宽">Bandwidth—带宽</span></h4></li>
</ul>
<p>传输介质的<strong>频率范围</strong>(range of frequency)或<strong>位数</strong>(number of bits)称为带宽。</p>
<p>数字信号传输会受到衰减(attenuation)、失真(distortion)等影响。部分是由于不允许高频(high-frequency)分量通过造成的。</p>
<ul>
<li>Hz</li>
<li>bps：bit/s</li>
</ul>
<h4><span id="bandwidth-limited-signals带宽有限的信号">Bandwidth-Limited signals—带宽有限的信号</span></h4><ul>
<li>n越大，第n个谐波的频率nf越高</li>
<li>所有传输设备都会以不同的量减少不同的傅里叶分量，从而引入失真。</li>
<li>$通常，振幅在0到某个频率f_c（赫兹，Hz）之间传输，且所有高于该截止频率的频率强烈衰减。$</li>
</ul>
<h4><span id="bit-rate-和-harmonics谐波">Bit Rate 和 Harmonics(谐波)</span></h4><ul>
<li><p>给定一个bit rate: b bits/sec</p>
</li>
<li><p>在T时间内传输8bits，则T为$\frac{8}{b}$ sec</p>
</li>
<li><p>如果n=1，即只有一个谐波，则第一个谐波的频率为$f=\frac{b}{8} Hz$</p>
</li>
<li><p>如果有n个谐波，则频率为$\frac{1}{\frac{T}{n}}= \frac{n}{T} = \frac{nb}{8}$</p>
<ul>
<li>$\frac{nb}{8} ≤ f_c=&gt; n ≤ \frac{f_c}{(b/8)} = \frac{8f_c} {b}$</li>
<li>如果n越大的话，因为$f_c$是一个定值，那么b会减小</li>
</ul>
</li>
<li><p>例子：电话线，$f_c=3000Hz$</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main\image-20210913201049922.png" alt="image-20210913201049922"></p>
</li>
</ul>
<h4><span id="signal-to-noise-ratio-信噪比">Signal-to-Noise Ratio 信噪比</span></h4><ul>
<li><p>S/N</p>
<ul>
<li>S: signal power</li>
<li>N: noise power</li>
</ul>
</li>
<li><p>dB</p>
<ul>
<li><p>$dB = 10log_{10}\frac{S}{N}$</p>
</li>
<li><p>an S/N ratio of 1000 is 30 dB</p>
</li>
</ul>
</li>
</ul>
<h4><span id="max-data-rate-of-a-channel-频道的最大数据传输量">Max. Data Rate of a Channel 频道的最大数据传输量</span></h4><ul>
<li><h4><span id="nyquists-theoremnoiseless-channel-无噪声信道">Nyquist’s Theorem(noiseless channel) 无噪声信道</span></h4><ul>
<li><p><strong>Maximum data rate</strong>: </p>
<script type="math/tex; mode=display">
2Hlog_2V bits/sec</script><ul>
<li><strong>H</strong>: bandwidth 带宽</li>
<li><strong>V</strong>: discrete levels 离散水平</li>
</ul>
</li>
</ul>
</li>
<li><h4><span id="shannons-theoremnoise-channel-噪声信道">Shannon’s Theorem(noise channel) 噪声信道</span></h4><ul>
<li><p><strong>Maximum number of bits/sec</strong>: </p>
<script type="math/tex; mode=display">
Hlog_2(1+S/N)</script><ul>
<li><strong>H</strong>: bandwidth</li>
<li><strong>S/N</strong>: signal to noise ratio 信噪比</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main\image-20210913093035786.png" alt="image-20210913093035786"></p>
<h3><span id="引导性传输介质">引导性传输介质</span></h3><h4><span id="磁介质magnetism">磁介质—magnetism</span></h4><ul>
<li>将数据从一台机器传输到另一台机器的最常见办法是将数据写到磁带或其他可擦写介质上(如可刻录DVD)，然后在目标机器上从磁带或磁盘中读出数据</li>
<li>优点：优良的带宽特性</li>
<li>缺点：延迟特性很差，传输事件长</li>
</ul>
<h4><span id="双绞线twisted-pair">双绞线—twisted pair</span></h4><ul>
<li><p>由两根相互绝缘的铜线组成，铜线的直径大约在1毫米</p>
<ul>
<li>两根电线绞在一起，干扰波能相互抵消，降低电线的辐射</li>
<li>信号通常以两根电线的电压差来承载，对外部噪声有更好的免疫力</li>
</ul>
</li>
<li><p>双绞线既可以用于传输模拟信号，也可以用于传输数字信号</p>
</li>
<li><p>双绞线最常见的应用是电话系统。几乎所有的电话都是通过双绞线连接到电话公司的 端局。</p>
</li>
<li><p>所获得的带宽取决于导线的厚度(直径)以及传输距离的远近</p>
</li>
<li><p>双绞线可分为几大类</p>
<ul>
<li>5类线：有4对双绞线<ul>
<li>全双工链路：双向同时使用的链路</li>
<li>半双工链路：可以双向使用但一次只能使用一个方向的链路</li>
<li>单工链路：只允许一个方向上传输的链路</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211203105334476.png" alt="image-20211203105334476"></p>
</li>
<li><p>到6类为止，所有的双绞线称为<strong>非屏蔽双绞线—UTP</strong>（Unshielded Twisted Pair）</p>
<ul>
<li>这些双绞线仅由导线和绝缘层简单地构成</li>
<li>7类外面多加了个屏蔽层</li>
</ul>
</li>
</ul>
<h4><span id="同轴电缆coaxial-cable">同轴电缆—coaxial cable</span></h4><ul>
<li>比非屏蔽双绞线有更好地屏蔽特性和更大地带宽，能以很高地速率传输相当长的距离</li>
<li>广泛使用的有两种：<ul>
<li>50Ω电缆：用于数字运输</li>
<li>75Ω电缆：用于模拟传输和有线电视传输</li>
<li>这样的划分并非技术因素，而是历史原因</li>
</ul>
</li>
<li>同轴电缆由硬的铜芯和外面包上的一层绝缘材料组成，绝缘材料的外层是一层密织的网状圆柱导体，外层导体再覆盖上一层保护塑料外套</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main\image-20210914140852298.png" alt="image-20210914140852298"></p>
<ul>
<li>同轴电缆的结构和屏蔽性使得它既有很高的带宽，又拥有很好的抗噪性</li>
<li>带宽取决于电缆的质量和长度</li>
</ul>
<h4><span id="电力线">电力线</span></h4><ul>
<li>使用电力线进行数据通信</li>
<li>可以在家庭内部构建局域网</li>
<li>又可以在室外作为访问Internet的宽带接入</li>
</ul>
<h4><span id="光纤">光纤</span></h4><ul>
<li>光纤主要用于网络骨干的长途传输、高速局域网以及高速Internet接入</li>
<li>光纤传输系统由三个关键部件构成<ul>
<li>光源</li>
<li>传输介质：超薄玻璃纤维</li>
<li>探测器</li>
</ul>
</li>
</ul>
<h3><span id="无线传输">无线传输</span></h3><h4><span id="电磁频谱">电磁频谱</span></h4><ul>
<li><p>电磁波每秒振动的次数称为它的<strong>频率</strong>，通常用<strong>f</strong>表示，以赫兹(Hz)来度量</p>
</li>
<li><p>两个相邻的波峰(或者波谷)之间的距离称为<strong>波长</strong>，通常用希腊字母<strong>λ</strong>表示</p>
<ul>
<li>$λf=c$</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main\image-20210914142707663.png" alt="image-20210914142707663"></p>
</li>
</ul>
<h4><span id="无线电传输">无线电传输</span></h4><ul>
<li>传输距离长，被广泛用于通信领域</li>
<li>无线电波是全方向传播的</li>
<li>无线电波的特性与频率有关</li>
</ul>
<h4><span id="微波传输">微波传输</span></h4><ul>
<li>微波按直线传播</li>
</ul>
<h4><span id="红外传输">红外传输</span></h4><ul>
<li>非引导性的红外波被广泛用于短程通信</li>
<li>红外线不能很好地透过固体墙壁</li>
</ul>
<h4><span id="光通信">光通信</span></h4>]]></content>
      <categories>
        <category>课程笔记</category>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>计网L4</title>
    <url>/2021/09/23/%E8%AE%A1%E7%BD%91L4/</url>
    <content><![CDATA[<h2><span id="structure-of-the-telephone-system">Structure of the Telephone System</span></h2><h3><span id="pstn-public-switched-telephone-network-公共交换电话网络">PSTN (Public Switched Telephone Network)  公共交换电话网络</span></h3><p>(a) Fully-interconnected network.<br>(b) Centralized switch.<br>(c)  Two-level hierarchy.</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210923092251714.png" alt="image-20210923092251714"></p>
<p>一个典型的电话电路</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210923092320393.png" alt="image-20210923092320393"></p>
<h3><span id="components-of-the-telephone-system">Components of the Telephone System</span></h3><h4><span id="local-loops-本地回路">local loops 本地回路</span></h4><p>用于家庭和企业的模拟双绞线</p>
<p>传输线有三个主要的问题：</p>
<ol>
<li>衰减 Attenuation</li>
<li>延迟失真 Delay distortion</li>
<li>噪声 Noise</li>
</ol>
<p>数字信号中使用的方波具有很宽的频谱（通常是高频），因此会受到很强的衰减和延迟失真。</p>
<h4><span id="modems-调制解调器">Modems 调制解调器</span></h4><p>使用模拟和数字传输进行计算机到计算机的呼叫。 转换由调制解调器(Modems)和编解码器(codecs)完成。</p>
<p>调制解调器（调制器-解调器）是将输出数字信号调制为模拟信号的设备。</p>
<ul>
<li><p>Amplitude：两种不同的振幅表示0和1</p>
</li>
<li><p>Frequency：使用不同的频道</p>
</li>
<li><p>Phase：波形是平移的</p>
</li>
</ul>
<p>事项：</p>
<ul>
<li>数据元素：bit</li>
<li>数据速率：bits/s</li>
<li>信号元素：signal</li>
<li>信号速度：signal/s</li>
</ul>
<p>基本的编码技术：</p>
<ul>
<li>数字信号到模拟信号<ul>
<li>ASK—Amplitude-shift keying</li>
<li>FSK—Frequency-shift keying</li>
<li>PSK—Phase-shift keying </li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210923093702596.png" alt="image-20210923093702596"></p>
<p>baud 波特</p>
<ul>
<li>每秒的采样数/符号数以波特为单位。</li>
</ul>
<p>QPSK 四相/正交相移键控</p>
<ul>
<li><p>quadrature phase-shift keying</p>
</li>
<li><p>四个角度通常相差90°，用于传输2位/符号。比特率是波特率的两倍。</p>
</li>
</ul>
<p>QAM-64 正交幅度调制正交幅度调制-64</p>
<ul>
<li><p>Quadratrue Amplitude Modulation</p>
</li>
<li><p>允许64种不同的组合，因此每个符号可以传输16位。</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210923095043215.png" alt="image-20210923095043215"></p>
<p>连接通向</p>
<ul>
<li>full duplex: 全双峰  双向</li>
<li><p>half duplex：半双峰 允许双向，一次只能一个方向</p>
</li>
<li><p>simplex: 单峰 单向</p>
</li>
</ul>
<h4><span id="trunks-and-multiplexing-多路复用">Trunks and Multiplexing 多路复用</span></h4><p>两类多路复用方案用于在单个物理中继上多路复用多个会话</p>
<p>FDM (Frequency Division multiplexing)</p>
<ul>
<li>在频分复用（FDM）中，频谱被划分为多个频带。对于光纤信道，使用WDM（波分复用）(Wavelength Division Multiplexing)。</li>
</ul>
<p>TDM (Time Division Multiplexing)</p>
<ul>
<li>在TDM（时分多路复用）中，整个带宽用于一段时间段。</li>
</ul>
<p>FDM</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210923095459890.png" alt="image-20210923095459890"></p>
<p>WDM</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210923095549207.png" alt="image-20210923095549207"></p>
<p>TDM</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210923095602941.png" alt="image-20210923095602941"></p>
<h4><span id="switching-交换">Switching 交换</span></h4><p>电路交换</p>
<ul>
<li>寻找从发送方到接收方的物理路径。在发送数据之前，必须（概念上）建立端到端路径。</li>
</ul>
<p>消息交换</p>
<ul>
<li>没有预先建立路径。消息存储在第一个交换局中，然后一次转发一个跃点。</li>
</ul>
<p>数据包交换</p>
<ul>
<li>对数据块大小进行限制，以允许数据包在交换办公室的主内存中进行缓冲。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210923100302510.png" alt="image-20210923100302510"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210923100314827.png" alt="image-20210923100314827"></p>
<h4><span id="second-generation-mobile-phones-digital-voice">Second Generation Mobile Phones:  Digital Voice</span></h4><h5><span id="cdma-code-division-multiple-access-码分多址">CDMA: Code Division Multiple Access 码分多址</span></h5><p>在有很多人交谈的机场休息室里：<br>TDMA：轮流发言<br>FDMA：人们在分散的群体中，每个群体都有自己的对话<br>CDMA：同时通话，但每对使用不同的语言</p>
<ul>
<li><p>CDMA 的关键是能够提取所需的信号，同时将其他一切作为随机噪声拒之门外。</p>
</li>
<li><p>在CDMA中，每个比特时间被细分为m个称为码片(chips)的短间隔。 </p>
<ul>
<li>通常，每比特有 64 或 128 个码片。</li>
</ul>
</li>
<li><p>每个站都分配有一个唯一的 m 位代码，称为码片序列(chip sequence)。 </p>
<ul>
<li>为了传输 1 ，它发送它的码片序列。 为了传输 0 ，它发送其码片序列的 1 的补码。</li>
</ul>
</li>
</ul>
<p>过程</p>
<ul>
<li>首先，给每个站分配到的chip sequence二极化，0为-1, 1为1</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205154535296.png" alt="image-20211205154535296"></p>
<ul>
<li>然后，给出几个例子，查看是否与C站有关</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205154645128.png" alt="image-20211205154645128"></p>
<p>+：直接相加</p>
<p>$\bar{c}$：直接取反</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205154903657.png" alt="image-20211205154903657"></p>
<ul>
<li>(a) 四个站的二进制码片序列</li>
<li>(b) Bipolar chip sequences </li>
<li>(c) 传输的六个例子</li>
<li>(d) C站信号的恢复</li>
</ul>
<h4><span id="communication-satellites-通讯卫星">Communication Satellites 通讯卫星</span></h4><ul>
<li><p>卫星就像天空中的大型微波中继器</p>
<ul>
<li>包含转发器：收听频谱的某些部分，放大信号，然后以另一个频率重新广播（以避免干扰传入信号）</li>
</ul>
</li>
<li><p>卫星越高，轨道周期越长</p>
</li>
</ul>
<h5><span id="种类">种类</span></h5><ul>
<li>GEO（地球静止轨道）卫星：<ul>
<li>每颗卫星通常都有多个向下波束，聚焦于称为点波束的小地理区域（如南非）。 用于电视（例如 DSTV）</li>
</ul>
</li>
<li>MEO（中地球轨道）卫星：<ul>
<li>24 颗卫星用于 GPS（全球定位系统）。 不用于电信。</li>
</ul>
</li>
<li>LEO（低地球轨道）卫星：<ul>
<li>Iridium &amp; Globalstar：用于全球卫星电话（船舶、农村地区等）的卫星系统。</li>
<li>Teledesic：用于互联网用户，完全绕过电话系统（空间分组交换）</li>
</ul>
</li>
</ul>
<h5><span id="geo">GEO</span></h5><ul>
<li>GEO 卫星需要更多电力进行通信</li>
<li>由于所涉及的距离，GEO 的信噪比更差</li>
<li>几个 GEO 可以覆盖地球的大部分表面</li>
<li>请注意，GEO 无法“看到”极地地区</li>
<li>由于它们看起来是静止的，GEO 不需要跟踪</li>
<li>GEO 有利于广域广播</li>
</ul>
<h5><span id="major-problems-for-satellites-主要问题">Major problems for satellites 主要问题</span></h5><ul>
<li>Positioning in orbit 位置<ul>
<li>一种方法是使用小型火箭发动机</li>
<li>这些使用燃料——大多数卫星重量的一半以上是由燃料组成的</li>
<li>通常是燃料可用性决定了卫星的寿命</li>
<li>卫星的商业寿命通常为 10-15 年</li>
</ul>
</li>
<li>Stability 健壮性<ul>
<li>卫星稳定很重要<ul>
<li>确保太阳能电池板正确对齐</li>
<li>确保通信天线正确对齐</li>
</ul>
</li>
<li>早期卫星使用自旋稳定<ul>
<li>这要么需要一个低效的全向天线</li>
<li>或者天线精确地反向旋转以提供稳定的通信</li>
</ul>
</li>
<li>现代卫星使用反作用轮稳定——一种陀螺稳定的形式</li>
</ul>
</li>
<li>Power 能源<ul>
<li>现代卫星使用多种动力方式</li>
<li>太阳能电池板现在效率很高，所以太阳能被用来发电</li>
<li>有时需要电池，因为有时卫星在地球后面——这发生在 LEO 卫星的一半左右</li>
<li>核电已被使用</li>
</ul>
</li>
<li>Communications  交流<ul>
<li>卫星也可以与其他卫星通信</li>
<li>通信可以通过微波或光学激光</li>
</ul>
</li>
<li><p>Harsh environment   恶劣的环境</p>
<ul>
<li>卫星组件需要特别“硬化”</li>
<li>在地面上工作的电路在太空中会很快失效</li>
<li>温度也是一个问题——所以卫星使用电加热器来保持电路和其他重要部件的温度——它们还需要小心地控制温度</li>
</ul>
</li>
<li><p>有许多组件需要对齐</p>
<ul>
<li>太阳能板</li>
<li>触角</li>
<li>这些必须在不同的时间指向天空的不同部分，所以问题并不简单</li>
</ul>
</li>
</ul>
<h5><span id="leo">LEO</span></h5><ul>
<li>低地球轨道卫星 - 比如说 100 - 1500 英里</li>
<li>LEO 的信噪比应该更好</li>
<li>更短的延迟 - 通常在 1 - 10 ms 之间</li>
<li>由于 LEO 相对于地球移动，因此它们需要跟踪</li>
</ul>
<p>轨道 Orbit</p>
<ul>
<li>圆形轨道是最简单的</li>
<li>倾斜轨道可用于覆盖赤道地区</li>
<li>椭圆轨道可用于提供从地球看的准静止行为</li>
</ul>
<p>通信卫星与其他传输媒体相比具有许多优势。<br>通信卫星有GEO、MEO和LEO三种类型，分别部署不同的目标。<br>不同的频段被划分并用于各种场合。</p>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>计网L5</title>
    <url>/2021/09/25/%E8%AE%A1%E7%BD%91L5/</url>
    <content><![CDATA[<h3><span id="dll数据链路层">DLL—数据链路层</span></h3><ul>
<li>数据链路层使用物理层提供的服务在通信信道上发送和接收比特。</li>
<li>数据链路层从网络层获得数据包（package），然后将这些数据包封装成帧（frame ）以便传输。</li>
<li>每个帧包含一个帧头(Header)、一个有效载荷(Payload field)（用于存放数据包〉以及一个帧尾(Trailer)</li>
<li>实现两个相连机器稳定有效的交流(reliable, efficient communication)</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210925162847783.png" alt="image-20210925162847783"></p>
<h4><span id="主要功能">主要功能</span></h4><ul>
<li>为网络层提供定义好的服务接口</li>
<li>处理传输错误</li>
<li>规定数据流，这样处理较慢的接受机器不会被淹没</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210925163107899.png" alt="image-20210925163107899"></p>
<h4><span id="dll提供的服务">DLL提供的服务</span></h4><p>数据链路层提供了许多种服务，实际上提供的服务在系统间存在差异</p>
<p>三种常见的服务</p>
<ul>
<li>Unacknowledged connectionless service.<ul>
<li>无确认的无连接服务</li>
<li>指源机器向目标机器发送独立的帧，<strong>目标机器并不对这些帧进行确认</strong></li>
<li>采用这种服务，事先不需要建立逻辑连接，事后也不用释放逻辑连接。</li>
<li>若由于线路的噪声而造成了某一帧的丢失，数据链路层并<strong>不试图去检测这样的丢帧情况，更不会去试图恢复丢失的帧。</strong></li>
<li>使用场合<ul>
<li>错误率很低的场合</li>
<li>实时通信</li>
</ul>
</li>
</ul>
</li>
<li>Acknowledged connectionless service.<ul>
<li>有确认的无连接服务</li>
<li>数据链路层仍然没有使用逻辑连接，但其发送的每一帧都需要单独确认。</li>
<li>发送方可知道一个帧是否已经正确地到达目的地。如果一个帧在指定的时间间隔内还没有到达，则发送方将再次发送该帧。</li>
<li>适用于不可靠的信道</li>
<li>不要求这种确认服务由数据链路层实现。</li>
</ul>
</li>
<li>Acknowledged connection-oriented service.<ul>
<li>有确认的面向连接服务</li>
<li>建立了两个机器的连接，帧可以传输</li>
<li>在连接发送的每一个帧是编号的(numbered)和确认的(acknowledged)</li>
<li>帧保证仅按顺序到达一次(Only once and in order)。</li>
<li>一旦通信完成，就会释放连接。</li>
<li>这与“可靠”比特流相同。</li>
</ul>
</li>
</ul>
<p>例子：两个路由间的数据流动</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210925165112762.png" alt="image-20210925165112762"></p>
<p>路由：1）通过网络传输信息 2）确定最佳路径</p>
<h4><span id="frame帧">Frame—帧</span></h4><ul>
<li>为了向网络层提供服务(use the service)，数据链路层必须使用物理层提供的服务。</li>
<li>物理层只能在传输介质上放置原始比特流(use the service)。</li>
<li>位流不保证没有错误。</li>
<li>数据链路层负责检测并在必要时纠正错误。</li>
</ul>
<h4><span id="成帧">成帧</span></h4><ul>
<li><p>DDL 能够将位流分解为离散的帧(break up the bit stream into discrete frames)。</p>
</li>
<li><p>计算每个帧的校验和，当帧到达目的地时重新计算校验和。</p>
</li>
<li><p>将比特流分解成帧有点困难。</p>
<ul>
<li>时间间隔</li>
</ul>
</li>
<li><p>我们需要看看其他表示帧开始和结束的方法。</p>
</li>
</ul>
<h4><span id="四种成帧的方法">四种成帧的方法</span></h4><ul>
<li><p>Character count（字符计数法）</p>
<ul>
<li><p>使用帧头中的字段来指定帧中的字符数</p>
</li>
<li><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210926105849104.png" alt="image-20210926105849104"></p>
</li>
<li><p>缺点：出现错误后，找不到下一帧的正确起始位置，重传也不知道从哪里开始</p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>Flag bytes with <strong>byte</strong> stuffing（带字节/字符填充的分界符法）</p>
<ul>
<li>使用一些特殊的字节作为开始和结束，通常都相同，成为标志字节(flag byte)</li>
<li>使用了两个连续的标志字符代表了一帧的结束和下一帧的开始</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210926111028429.png" alt="image-20210926111028429"></p>
<ul>
<li><p>问题1：如果标志字节出现在数据中，会干扰到帧的分界</p>
<ul>
<li>解决：添加转义字节，接收方的数据链路层在将数据传递给网络层之前必须删除转义字节，称为字节填充</li>
</ul>
</li>
<li><p>问题2：如果转义字节也出现在数据中，怎么办</p>
<ul>
<li>解决：同样用字节填充。用一个转义字节来填充</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210926112026178.png" alt="image-20210926112026178"></p>
</li>
<li><p>缺点：只能使用8比特的字节</p>
</li>
</ul>
</li>
<li><p>Starting and ending flags, with <strong>bit</strong> stuffing（带位填充的分界标志法）</p>
<ul>
<li><p>帧的划分可以在比特级完成</p>
</li>
<li><p>每个帧的开始和结束由一个特殊的比特模式标记，如01111110或者十六进制0x7E</p>
</li>
<li><p>这种模式是一个标志字节。每当发送方的数据链路层在数据中遇到连续五个1 ，它</p>
<p>便自动在输出的比特流中填入一个比特 。</p>
</li>
<li><p>比特填充还确保了转换的最小密度，这将有助于物理层保持同步。</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20210926112414261.png" alt="image-20210926112414261"></p>
</li>
<li><p>Physical layer coding violations（物理层编码违例法）</p>
<ul>
<li>使用物理层的捷径</li>
<li>比特编码成信号通常包括一些冗余比特，以便帮助接收器同步接收。这种冗余意味着一些信号将不会出现在常规数据中。<ul>
<li>例如，在 4B/5B 线性编码模式下， 个数据位被映射成 个信号比特，通过这种方法确保线路上的信号有足够的跳变。这意味着 32 个可能的信号中有 16 个是不会被使用的。</li>
</ul>
</li>
<li>可以使用保留的信号来指示帧的开始和结束</li>
<li>大多数 DLL 协议将字符计数与另一种方法结合使用以提高安全性。 这增加了发现错误的机会。</li>
</ul>
</li>
</ul>
<h4><span id="差错控制error-control">差错控制—Error Control</span></h4><ul>
<li>我们使用<strong>字节填充</strong>、<strong>位填充</strong>和<strong>校验和</strong>作为检测和确定我们发送的数据中的错误的方法。</li>
<li>我们还必须确保帧能够到达目的地。</li>
<li>接收器发回一个控制帧(control frame)，确认接收到的帧和帧的状态。</li>
<li><p>如果确认没有到达，可能会发生超时，导致帧被重新发送。</p>
<ul>
<li>超时间隔</li>
</ul>
</li>
<li><p>重新发送帧也会导致问题——当同一帧被<strong>接收两次或更多次</strong>时会发生什么？</p>
</li>
<li>我们还可以<strong>对帧进行顺序编号</strong>(sequentially number the frames)以防止出现此问题。</li>
<li>有许多不同的方法可以进行这种类型的错误控制（也可以在不同的级别上进行）。</li>
<li><strong>管理定时器和序列号是数据链路层职责的重要部分</strong>。</li>
</ul>
<h4><span id="流量控制flow-control">流量控制—Flow Control</span></h4><ul>
<li>我们必须处理发送方以高于接收方接收数据的速率发送数据的问题。</li>
<li>有两种方法可以解决这个问题：<ul>
<li>基于反馈的流量控制 — feedback-based flow control<ul>
<li>反馈用于告诉发送方接收方正在做什么或发送另一个帧</li>
</ul>
</li>
<li>基于速率的流量控制 — rate-based flow control<ul>
<li>传输速率由发件人固定</li>
<li>这从未在 DLL 中使用过</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4><span id="why-do-we-need-error-detection-and-correction">Why do we need Error Detection And Correction?</span></h4><ul>
<li>本地环路仍然是模拟双绞线，错误仍然很常见。</li>
<li>无线通信正变得越来越普遍，错误率比局间光纤干线上的差几个数量级。</li>
<li>传输错误将伴随我们很多年。</li>
</ul>
<h4><span id="types-of-error-错误的类型">Types of Error 错误的类型</span></h4><ul>
<li>错误突然出现 Burst errors</li>
<li>独立的单位错误 Independent single-bit errors</li>
<li>例子<ul>
<li>块大小为 1000 位</li>
<li>错误率为每比特 0.001</li>
</ul>
</li>
<li>突发错误比孤立错误更难纠正</li>
</ul>
<h4><span id="错误处理error-processing">错误处理—Error Processing</span></h4><p>这两种技术中的每一种都适用于不同的情况</p>
<h5><span id="error-correcting-codes-纠错码">Error-correcting codes 纠错码</span></h5><ul>
<li>在发送的每个数据块中包含足够的冗余信息。</li>
<li>接收机可以推断发送的数据</li>
<li>纠错码的使用通常被称为前向纠错(前向纠错).</li>
<li>开销很高，但它减少了重新发送帧的需要。</li>
<li>最适合高误差（无线）网络</li>
</ul>
<h5><span id="error-detecting-codes-检错码">Error-detecting codes 检错码</span></h5><ul>
<li>只包含足够的冗余</li>
<li>允许接收方推断出发生了错误，但不更正错误，只让它请求重新传输。</li>
<li>适用于高可靠性信道(highly reliable channel)，如光纤</li>
<li>只要在发现错误时重新传输即可</li>
</ul>
<h5><span id="hamming-code-汉明码">Hamming code 汉明码</span></h5><ul>
<li>纠错码位数：r</li>
<li>数据位数：m</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205195327838.png" alt="image-20211205195327838" style="zoom: 50%;"></p>
<h5><span id="例子">例子：</span></h5><p>获得汉明码</p>
<ul>
<li>问题：Original data: 10101111,even-parity Hamming code 偶校验汉明码, if hope to correct one single error,  What is the Hamming code for it?</li>
<li>解法：m = 8， 根据公式 $(m+r+1) \le 2^r$得到$r = 4$</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">12</th>
<th style="text-align:center">11</th>
<th style="text-align:center">10</th>
<th style="text-align:center">9</th>
<th style="text-align:center">8*</th>
<th style="text-align:center">7</th>
<th style="text-align:center">6</th>
<th style="text-align:center">5</th>
<th style="text-align:center">4*</th>
<th style="text-align:center">3</th>
<th style="text-align:center">2*</th>
<th style="text-align:center">1*</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1100</td>
<td style="text-align:center">1011</td>
<td style="text-align:center">1010</td>
<td style="text-align:center">1001</td>
<td style="text-align:center">1000</td>
<td style="text-align:center">0111</td>
<td style="text-align:center">0110</td>
<td style="text-align:center">0101</td>
<td style="text-align:center">0100</td>
<td style="text-align:center">0011</td>
<td style="text-align:center">0010</td>
<td style="text-align:center">0001</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center"></td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center"></td>
<td style="text-align:center">1</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>计算校验位用在相应位置上为1的数进行异或</li>
<li>P1：$B1 \oplus B3 \oplus B5 \oplus B7 \oplus B9 \oplus B11 = 1$</li>
<li><p>同理：</p>
<ul>
<li>P2：0</li>
<li>P3：0</li>
<li>P4：0</li>
</ul>
</li>
<li><p>这里自己位置设置为0，检验的时侯计算这些位置做异或运算一定得等于0</p>
</li>
<li>所以汉明码为<strong>10</strong>1<strong>0</strong>010<strong>0</strong>1111</li>
</ul>
<p>利用汉明码检测错误</p>
<ul>
<li>收到一个代码为100110001100（m = 8, r = 4）</li>
<li>这个代码是否正确，如果错了该改正哪里</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">12</th>
<th style="text-align:center">11</th>
<th style="text-align:center">10</th>
<th style="text-align:center">9</th>
<th style="text-align:center">8*</th>
<th style="text-align:center">7</th>
<th style="text-align:center">6</th>
<th style="text-align:center">5</th>
<th style="text-align:center">4*</th>
<th style="text-align:center">3</th>
<th style="text-align:center">2*</th>
<th style="text-align:center">1*</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1100</td>
<td style="text-align:center">1011</td>
<td style="text-align:center">1010</td>
<td style="text-align:center">1001</td>
<td style="text-align:center">1000</td>
<td style="text-align:center">0111</td>
<td style="text-align:center">0110</td>
<td style="text-align:center">0101</td>
<td style="text-align:center">0100</td>
<td style="text-align:center">0011</td>
<td style="text-align:center">0010</td>
<td style="text-align:center">0001</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li><p>P1：$B1 \oplus B3 \oplus B5 \oplus B7 \oplus B9 \oplus B11 = 1$</p>
</li>
<li><p>同理：</p>
<ul>
<li>P2：1</li>
<li>P3：0</li>
<li>P4：0</li>
</ul>
</li>
<li>0011是第三个位置出现了错误，改为相反数</li>
<li>即101110001100</li>
</ul>
<h5><span id="error-detection">Error Detection</span></h5><ul>
<li><p>错误检测代码仅包含足够的数据，以便接收器确定数据是否有故障。</p>
</li>
<li><p>如果物理链路的错误率更低，则错误检测和重传通常更有效。</p>
<ul>
<li>铜线或光纤</li>
</ul>
</li>
<li><p>为了比较，考虑错误率为每比特$10^{-6}$的信道。让块大小为1000bits。</p>
<ul>
<li>要纠正单个错误（通过汉明码），每个块需要10个校验位。要传输1000个块，需要10000个校验位（开销）。</li>
<li>要检测单个错误，每个块一个奇偶校验位就足够了。为了传输1000个块，只需重新传输一个额外的块（由于每比特的错误率为$10^{-6}$），从而产生开销(开销） 只有2001（=1000*1+1001）位。</li>
</ul>
</li>
</ul>
<h5><span id="polynomial-code多项式编码">Polynomial Code(多项式编码)</span></h5><ul>
<li>Also known as a CRC (Cyclic Redundancy Check，循环冗余校验码). </li>
<li><p>基于将位字符串视为系数为0和1的多项式的表示</p>
<ul>
<li>例子：110001</li>
<li><p>6项5阶多项式</p>
</li>
<li><p>$1\times x^5+1\times x^4+0\times x^3+0\times x^2+0\times x^1+1\times x^0 = x^5+x^4+1$</p>
</li>
</ul>
</li>
<li>多项式运算是模2(modulo 2)完成的。加法和减法都与异或相同(等同于异或） EXCLUSIVE OR</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205211602283.png" alt="image-20211205211602283"></p>
<p>What is modulo 2？</p>
<ul>
<li>Modulo 2 addition &amp; substraction:  XOR logic</li>
</ul>
<p>​    <img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205211731466.png" alt="image-20211205211731466"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205211835011.png" alt="image-20211205211835011"></p>
<ul>
<li><p>CRC方法的基本思想是：</p>
<ul>
<li>发送方和接收方提前就在生成多项式(generator polynomial)上达成一致, G(x)。</li>
<li>发送方在帧的末尾追加校验和(checksum)，校验和帧表示的多项式可以被G(x)整除。</li>
<li>当接收器获得帧时，它会尝试将其除以相同的G(x)。如果有余数，则一定是发生了错误，并将请求重新传输。</li>
</ul>
</li>
<li><p>计算校验和</p>
<ul>
<li>r：G(x)的维度</li>
<li><p>添加r个零位到帧的低阶端，使其现在包含m+r位，并对应于多项式$x^rM(x)$。</p>
</li>
<li><p>使用模2除法将对应于$G(x)$的位字符串划分为对应于$x^rM(x)$的位字符串。</p>
</li>
<li>使用模2减法从与$x^rM(x)$对应的位字符串中减去余数（始终为r或更少的位）。</li>
<li>结果是要传输的校验和帧。称其为多项式$T(x)$。</li>
</ul>
</li>
<li><p>例子</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205212630714.png" alt="image-20211205212630714" style="zoom:67%;"></p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205212836723.png" alt="image-20211205212836723" style="zoom: 50%;"></p>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>计网L6</title>
    <url>/2021/12/17/%E8%AE%A1%E7%BD%91L6/</url>
    <content><![CDATA[<h3><span id="summary">Summary</span></h3><ul>
<li>Learn 6 elementary DLL protocol</li>
<li>Learn &amp; master sliding-window</li>
<li>Learn &amp; master ARQ（自动重复请求）/PAR</li>
<li>Learn &amp; master piggybacking(捎带确认)</li>
<li>Learn pipeline </li>
<li>Go back n &amp; selective repeat </li>
</ul>
<h2><span id="基本dll协议">基本DLL协议</span></h2><h3><span id="假设">假设</span></h3><ul>
<li>物理层、数据链路层和网络层是独立的进程 — independent processes</li>
<li>机器 A 想要使用可靠的、面向连接的服务向机器 B 发送长数据流 — reliable, connection-oriented</li>
<li>A的数据链路层请求数据，网络层总是能够立即遵守 — always able</li>
<li>这些协议处理通信错误，但不处理由计算机崩溃和重新启动引起的问题 — errors, but not the problems caused by computers</li>
<li>就数据链路层而言，从网络层通过接口传递给它的数据包是纯数据 — pure data</li>
</ul>
<h3><span id="3-simplex单工-protocol三个单工的协议">3 simplex(单工) protocol—三个单工的协议</span></h3><ul>
<li>An unrestricted simplex protocol<ul>
<li>无限制的单工协议</li>
</ul>
</li>
<li>A simplex stop-and-wait protocol<ul>
<li>单工的停—等协议 </li>
</ul>
</li>
<li>A simplex protocol for a noisy channel<ul>
<li>有噪声信道的单工协议</li>
</ul>
</li>
</ul>
<h4><span id="protocol-declaration-协议定义">Protocol Declaration — 协议定义</span></h4><ul>
<li>所有常见的数据类型、函数都定义为（protocol.h）</li>
<li>NL、PL之间的数据传输</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211217130645594.png" alt="image-20211217130645594" style="zoom: 50%;"></p>
<ul>
<li>Wait_for_event(&amp;event)：等待某事发生<ul>
<li>fram_arrive, </li>
<li>cksum_err,</li>
<li>timeout</li>
</ul>
</li>
<li><p>Timer</p>
<ul>
<li>start_timer,  stop_timer</li>
<li>start_ack_timer，stop_ack_timer</li>
</ul>
</li>
<li><p>帧的结构</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211217130912089.png" alt="image-20211217130912089"></p>
<h4><span id="unrestricted-simplex-protocol-无限制的单工协议">unrestricted simplex protocol 无限制的单工协议</span></h4><ul>
<li>协议一（乌托邦，乌托邦）</li>
<li>数据只在一个方向传输 — in one direction only</li>
<li>发送网络层和接收网络层都时刻准备着（随时待命）— are always ready</li>
<li>处理时间可以忽略（瞬间完成）— Processing time can be ignored</li>
<li>提供无限缓冲空间（无限空间）— spaces is available</li>
<li><p>数据链路层之间的通信通道永不损坏或丢帧（完美通道） — never damages or loses of frames</p>
</li>
<li><p>发送端和接收端处于一个无限的while循环中</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211217131528891.png" alt="image-20211217131528891"></p>
<h4><span id="simplex-stop-and-wait-protocol-单工停等协议">Simplex Stop-and-Wait Protocol 单工停—等协议</span></h4><ul>
<li>Protocol2 ：放弃不切实际的限制<ul>
<li>接收器的处理能力是有限的：接收器只有有限的缓冲容量和有限的处理速度。</li>
<li>a finite buffer capacity and a finite processing speed</li>
</ul>
</li>
<li>如何防止发送方用数据淹没接收方？<ul>
<li>只需在协议 1 中插入延迟 — delay</li>
<li>接收者向发送者提供反馈 — feedback</li>
</ul>
</li>
<li>发送方发送一帧然后在继续之前等待确认的协议称为停止等待 stop and wait</li>
</ul>
<h5><span id="注意">注意</span></h5><ul>
<li>数据流量是单工的，但帧是双向传输的。</li>
<li>两个数据链路层之间的通信通道需要能够进行双向信息传输。<ul>
<li>一个半双工（半双工）物理通道就足够了 — half-duplex</li>
</ul>
</li>
<li>数据流<ul>
<li>首先发送方发送一个帧，然后接收方发送一个帧，然后发送方发送另一个帧，然后接收方发送另一个帧，依此类推。</li>
</ul>
</li>
</ul>
<h4><span id="simplex-protocol-for-a-noisy-channel-有噪声信道的单工协议">Simplex Protocol for a Noisy Channel  有噪声信道的单工协议</span></h4><ul>
<li>让我们考虑正常情况：通信通道可能会出错。</li>
<li><p>使用定时器和确认的方案： (timer and ackonwledgement)</p>
<ul>
<li><p>发送方在发送一个帧后启动一个定时器 — starts a timer after sending</p>
</li>
<li><p>只有在正确接收到传入帧时，接收器才会发回确认 — sends back an ackonwledgement</p>
</li>
<li><p>如果定时器超时，发送方将重传该帧 — retransmit the frame</p>
</li>
</ul>
</li>
<li>主动确认重传 — <strong>P</strong>ositive <strong>A</strong>ckonwledgement with Retrasmission</li>
<li>自动重复请求 — Automatic Repeat Request</li>
</ul>
<h5><span id="par主动确认重传">PAR(主动确认重传)</span></h5><ul>
<li>上述方案的致命缺陷是什么？<ul>
<li>丢失确认 — Loss of an ackonwledgement</li>
<li>复制帧 — duplicated frame</li>
</ul>
</li>
<li>如何区分第一次看到的帧和重传？<ul>
<li>在每个帧的标题中使用序列号 — sequence number</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211217132345494.png" alt="image-20211217132345494"></p>
<h3><span id="改进">改进</span></h3><ul>
<li>Improve efficiency of transmission<ul>
<li>full-duplex （全双工）</li>
<li>piggybacking （捎带确认）</li>
<li>sliding window （滑动窗口）（flow control）</li>
</ul>
</li>
<li>Sliding window protocol<ul>
<li>Protocol 4：n=1——basic idea of sliding window</li>
<li>Protocol 5： Go Back n （回退n帧）</li>
<li>Protocol 6： Select Repeat （选择性重传）</li>
</ul>
</li>
</ul>
<h4><span id="full-duplex-全双工">full-duplex （全双工）</span></h4><ul>
<li>如何实现全双工数据传输？<ul>
<li>两个独立的单工数据通道</li>
<li>双向数据的一个电路</li>
</ul>
</li>
<li>捎带（捎带确认）Piggybacking<ul>
<li>暂时延迟传出确认，以便他们可以免费乘坐下一个传出数据帧</li>
</ul>
</li>
<li>接收者应该等待捎带多长时间？<ul>
<li>一个特别的方案：等待固定的毫秒数。 （ACK-TIMER）</li>
</ul>
</li>
</ul>
<h4><span id="序列号">序列号</span></h4><ul>
<li>序列号与每个传输的帧相关联。 序列号的范围从 0 到某个最大值 ($2^n - 1$) 循环。</li>
<li>一个窗口是一个序列号列表 — window</li>
<li>发送方维护一个发送窗口(sending window)，其序列号对应于已发送但尚未确认或可以发送的帧 (been sent but are as yet not acknowledged, or can be sent)<ul>
<li>每当一个新的数据包从网络层到达时，它就会被赋予下一个最高的序列号，并且上边界提前一个。</li>
<li>当确认(ackonwledge)进来时，下边界前进一个。</li>
</ul>
</li>
<li>接收器维护一个接收窗口(receiving window)，其序列号与允许接收的帧相对应。<ul>
<li>当接收到序列号等于窗口下边缘的帧时，将其传递到网络层，生成确认，并将窗口旋转一。</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211217133335129.png" alt="image-20211217133335129"></p>
<ul>
<li>Receiver：接收帧后，检查序列号是否为frame_expected(期望帧号)，如果是，接收并且frame_expected+1，即滑动接收窗口（接收窗口）。</li>
<li>Sender：收到确认帧时，检查ack_number是否为next_frame_to_send，如果是，从network_layer取包，next_frame_to_send+1，即滑动singing_window</li>
</ul>
<h4><span id="w1-sliding-window">w=1 sliding window</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211217133553061.png" alt="image-20211217133553061"></p>
<h4><span id="principle-of-protocol-4-1位传输的滑动窗口">Principle of protocol 4 — 1位传输的滑动窗口</span></h4><ul>
<li>1-bit sliding window protocol （w=1）</li>
<li>Window setting 窗口设置<ul>
<li>Sliding window maximum：MAX_SEQ = 1</li>
<li>Initial value：seq =0, ack=1（期待接收seq=0）</li>
</ul>
</li>
<li>Window sliding scheme 窗口滑动模式<ul>
<li>A send frame firstly A发送帧<ul>
<li>（seq=0, ack=1, A0）</li>
</ul>
</li>
<li>B receive A0，send back piggyback-acknowledge  B接收帧，发送捎带确认<ul>
<li>（seq=0, ack=0, B0） </li>
</ul>
</li>
<li>A receive acknowledge （to A0），sliding window，send next frame 接收捎带确认，滑动窗口，发送下一帧<ul>
<li>（seq=1, ack=0, A1）</li>
</ul>
</li>
</ul>
</li>
<li>characteristic<ul>
<li>序列号seq和确认值ack“0”“1”交替</li>
<li>滑动窗口长度W=1，收到确认才移动窗口</li>
<li>保证按顺序将接收到的正确帧只一次上交网络层</li>
</ul>
</li>
</ul>
<h5><span id="正常情况">正常情况</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211217134029555.png" alt="image-20211217134029555"></p>
<h5><span id="不正常情况">不正常情况</span></h5><p>duplicated 重复的</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211217134104143.png" alt="image-20211217134104143"></p>
<p>error control 差错控制</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211217134207826.png" alt="image-20211217134207826"></p>
<h4><span id="line-utilization-rate-of-protocol4信道利用率">Line utilization rate of protocol4（信道利用率）</span></h4><ul>
<li>协议 4 中的一个假设：时间可以忽略不计。<ul>
<li>向前或向后传输时间</li>
<li>接收器处理传入帧的处理时间</li>
</ul>
</li>
<li>事实上，在低速率信道中，往返时间可以非常大，发送方在此期间被阻塞。</li>
<li>线路利用率：<ul>
<li>信道容量为 b bps</li>
<li>帧大小 k 位</li>
<li>往返传播时间 R 秒</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211217134503919.png" alt="image-20211217134503919"></p>
<ul>
<li>例子</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211217155005168.png" alt="image-20211217155005168"></p>
<p>代入公式：$\frac{k}{k+ bR}=\frac{1000}{1000+50000\times0.5}=3.85\%$</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211217162738938.png" alt="image-20211217162738938"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211217163521752.png" alt="image-20211217163521752"></p>
<h5><span id="improve-line-utilization-提高利用率">improve line utilization 提高利用率</span></h5><ul>
<li>增加最大滑动窗口尺寸 W：</li>
<li>线路利用率 = $W\times T_f \ \div \ (T_f+R) = W \times k \ \div \ (k + bR)$</li>
<li>乌托邦案例：线路利用率达到100%，那么最大滑动窗口大小为：<ul>
<li>W = $ (T_f+R) \ \div \ T_f\ $ = 520 / 20 =26</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211217164210121.png" alt="image-20211217164210121"></p>
<h5><span id="pipeline-管道化">Pipeline  管道化</span></h5><ul>
<li>允许发送方在阻塞前最多传输 w 帧 — w frames </li>
<li>每当带宽和往返延迟的乘积很大时，发送端就需要一个大窗口。<ul>
<li>bandwidth and round-trip-delay is large</li>
</ul>
</li>
<li>长流中间的帧损坏或丢失怎么办？<ul>
<li>Go back n — 回退n个</li>
<li>Selective repeat — 选择性重复</li>
</ul>
</li>
</ul>
<h4><span id="protocol-5go-back-n">Protocol 5：go back n</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211217164441970.png" alt="image-20211217164441970"></p>
<ul>
<li>接收方的窗口大小为1，即接收方只按顺序接受帧。</li>
<li>接收器丢弃发生错误后的所有帧，不发送确认。</li>
<li>超时后，发送方按顺序重传所有未确认的帧，从损坏或丢失的帧开始。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211217164729902.png" alt="image-20211217164729902"></p>
<ul>
<li>数据帧</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211217164900106.png" alt="image-20211217164900106"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211217164944399.png" alt="image-20211217164944399"></p>
<ul>
<li>工作原理分析</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211217165036889.png" alt="image-20211217165036889"></p>
<h4><span id="protocol-6selective-repeat">Protocol 6：selective repeat</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211217165213768.png" alt="image-20211217165213768"></p>
<ul>
<li>协议 6 接受无序的帧，但按顺序将数据包传递到网络层。<ul>
<li>accepts frames out of order</li>
<li>接收序列号在接收窗口内的所有帧</li>
<li>在所有编号较低的帧都以正确的顺序传送到网络层之前，不会将帧传递到网络层。</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211217165239461.png" alt="image-20211217165239461"></p>
<ul>
<li>例子</li>
</ul>
<p>接收方收到非期望的正确帧－缓存</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211217165358305.png" alt="image-20211217165358305"></p>
<p>发送方选择帧seq2重传</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211217165418894.png" alt="image-20211217165418894"></p>
<p>接收方收到重传帧seq2－排序上交</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211217165430347.png" alt="image-20211217165430347"></p>
<h5><span id="function-of-nak">Function of NAK</span></h5><ul>
<li>Negative acknowledgement (否定确认)</li>
<li>比协议 5 更有效<ul>
<li>向发送方发送错误帧的 NAK，强制发送方立即重新发送帧而不是超时</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>计网L8</title>
    <url>/2021/12/17/%E8%AE%A1%E7%BD%91L8/</url>
    <content><![CDATA[<h4><span id="内容">内容</span></h4><ul>
<li>Multiple access protocol 多路访问协议</li>
<li><p>A real system(LAN): Ethernet 以太网</p>
<ul>
<li>以太网是利用MAC将各个电脑连接起来的一种协议</li>
<li><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219204511611.png" alt="image-20211219204511611"></li>
<li>IEEE802.3</li>
</ul>
</li>
<li><p>Data Link Layer Switching  数据链接层的交换</p>
<ul>
<li>Bridge 桥</li>
<li>switch 交换机</li>
</ul>
</li>
</ul>
<h4><span id="medium-access-control">Medium Access Control</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211217195242594.png" alt="image-20211217195242594" style="zoom:67%;"></p>
<h4><span id="这一章的内容">这一章的内容</span></h4><ul>
<li>Learn random access protocol(随机访问协议)</li>
<li>Master <strong>pure ALOHA</strong> and <strong>slotted ALOHA</strong></li>
<li>Master the characteristics of each type of CSMA<ul>
<li>1-P CSMA</li>
<li>CSMA/CD</li>
</ul>
</li>
<li>Learn collision-free protocol (无冲突的协议)<ul>
<li>Bit-Map</li>
<li>Binary Countdown</li>
</ul>
</li>
</ul>
<h4><span id="the-problem-of-broadcast-network-广播网络的问题">The problem of Broadcast network 广播网络的问题</span></h4><ul>
<li>Data communication 数据通讯<ul>
<li>Unicast（单播）：One - to - One</li>
<li>Broadcast（广播）：One - to - Everyone</li>
<li>Multicast（组播）：One - to - A group</li>
</ul>
</li>
<li>在任何广播网络中，关键问题是如何在多个竞争用户之间分配单个广播信道。<ul>
<li>allocate a single broadcast channel</li>
</ul>
</li>
<li>广播信道有时被称为多路访问信道或随机访问信道。<ul>
<li>multiaccess channels or random access channels</li>
</ul>
</li>
</ul>
<h4><span id="what-is-mac">What is MAC ?</span></h4><ul>
<li>用于确定谁在多路访问信道上的下一步且属于数据链路层的子层的协议，称为 MAC（Medium Access Control）子层</li>
<li>MAC 子层在 LAN 中尤为重要，其中许多 LAN 使用多路访问信道作为通信的基础。</li>
</ul>
<h3><span id="allocating-channel-分配通道">Allocating channel 分配通道</span></h3><ul>
<li>有两种分配通道的方法：<ul>
<li>静态分配 — static allocation<ul>
<li>频道就像一个电路——只允许一个人使用它。</li>
<li>未使用的带宽会丢失（浪费）</li>
</ul>
</li>
<li>动态分配 — dynamic allocation<ul>
<li>通道是开放的，一些计算机可以访问其他计算机未使用的带宽。</li>
<li>没有专用带宽</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4><span id="static-allocation">Static allocation</span></h4><ul>
<li>FDM（频分多路复用 Frequency Division Multiplexing） </li>
<li>TDM（时分多路复用 Time Division Multiplexing）</li>
</ul>
<h5><span id="problem-of-static-channel-allocation">Problem of Static Channel Allocation</span></h5><ul>
<li>FDM在什么情况下是有效的？<ul>
<li>当只有少量且固定数量的用户，并且每个用户都有大量（缓冲）流量负载时</li>
</ul>
</li>
<li>FDM 有什么问题？<ul>
<li>如果当前对通信感兴趣的用户少于 N 个，则频谱的某些部分将被浪费。</li>
<li>如果超过 N 个用户想要通信，其中一些将被拒绝权限</li>
<li>即使用户数为N且不变，当一些用户处于静止状态时，其他人无法使用他们的带宽，因此只是浪费。</li>
<li>对于突发数据流量（峰值流量与平均流量比为1000:1），分配的小子信道大部分时间都处于空闲状态，但无法处理峰值流量。</li>
</ul>
</li>
</ul>
<h5><span id="poor-performance-of-static-fdm-性能不佳">Poor Performance Of Static FDM 性能不佳</span></h5><p>无 FDM</p>
<ul>
<li>信道容量 C bps</li>
<li>到达率 λ frames/sec</li>
<li>平均帧长 1/μ(bit/frame)</li>
<li>平均时延 T</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211218093834039.png" alt="image-20211218093834039"></p>
<p>有FDM</p>
<ul>
<li>分成N个子通道</li>
<li>每个子信道容量 C/N bps</li>
<li>平均输入率 λ/N</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211218094502766.png" alt="image-20211218094502766"></p>
<p>恰好适用于 FDM 的相同论点也适用于时分复用 (TDM)。</p>
<h4><span id="dynamic-channel-allocation">Dynamic Channel Allocation</span></h4><ul>
<li>在进行动态分配之前，我们必须考虑 5 个关键假设：<ul>
<li>Station Model </li>
<li>Single Channel Assumption</li>
<li>Collision Assumption</li>
<li>Continuous/Slotted Time</li>
<li>Carrier/No Carrier Sense</li>
</ul>
</li>
</ul>
<h5><span id="1-station-model">1 – Station Model</span></h5><ul>
<li>该模型由 N 个independent stations（也称为terminals）组成。</li>
<li>每个站生成用于传输的帧。<ul>
<li>generate frames</li>
</ul>
</li>
<li>一旦生成了一个帧，该站就会被阻塞，并且在该帧成功传输之前什么都不做。</li>
</ul>
<h5><span id="2-single-channel-assumption">2 – Single Channel Assumption</span></h5><ul>
<li>它是模型的核心。</li>
<li>单个通道可用于所有通信。</li>
<li>就硬件而言，所有站都是等效的。</li>
<li>但是协议软件可能会为不同的站点分配优先级。</li>
</ul>
<h5><span id="3-collision-assumption">3 – Collision Assumption</span></h5><ul>
<li>如果同时传输两帧，它们就会“冲突”。</li>
<li>在碰撞中，两帧都完全丢失。</li>
<li>冲突的帧必须稍后再次重传。</li>
<li>所有站点都可以检测冲突。</li>
<li>除了冲突，没有其他错误。</li>
</ul>
<h5><span id="4-continuousslotted-time">4 – Continuous/Slotted Time</span></h5><ul>
<li>连续时间 Continuous Time<ul>
<li>时间被视为一个连续体。</li>
<li>时间不分为离散的间隔。</li>
<li>帧传输可以在任何时刻开始。</li>
</ul>
</li>
<li>空档时间 Slotted Time<ul>
<li>时间被划分为离散的间隔（槽）。</li>
<li>帧传输总是从一个时隙开始。</li>
<li>一个时隙可能包含 0、1 或更多帧。<ul>
<li>0 frames = 空闲时隙</li>
<li>1 frames = 成功传输</li>
<li>2+ frames = 碰撞</li>
</ul>
</li>
</ul>
</li>
<li>有些系统使用一种，有些系统使用另一种。 但是对于给定的系统，只有其中一个成立。</li>
</ul>
<h5><span id="5-carrierno-carrier-sense">5 – Carrier/No Carrier Sense</span></h5><ul>
<li>Carrier sense（载波侦听）<ul>
<li>station可以在发送之前判断频道是否正在使用</li>
<li>如果信道被感知为繁忙，则没有站将尝试使用它，直到它变为空闲。</li>
</ul>
</li>
<li><p>No carrier sense 非载波侦听</p>
<ul>
<li>station在尝试使用该频道之前不会感应到该频道。</li>
<li>只有稍后他们才能确定传输是否成功。</li>
</ul>
</li>
<li><p>LAN一般都有载波侦听。</p>
</li>
<li>请注意，此处的“载波”一词是指电缆上的电信号。</li>
</ul>
<h3><span id="multiple-access-protocol-多路访问协议">Multiple access protocol 多路访问协议</span></h3><ul>
<li>Random Access Protocol 随机访问协议<ul>
<li>特点：竞争使用通道，可能导致冲突</li>
<li>典型的随机访问协议<ul>
<li>ALOHA<ul>
<li>pure ALOHA；</li>
<li>slotted（分槽，分槽）ALOHA</li>
</ul>
</li>
<li>CSMA</li>
<li>CSMA/CD（以太网）</li>
</ul>
</li>
</ul>
</li>
<li>Controlled Access 受控访问协议<ul>
<li>特点：已分配信道，无冲突</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211218101758249.png" alt="image-20211218101758249" style="zoom:67%;"></p>
<h4><span id="aloha-protocol">ALOHA Protocol</span></h4><ul>
<li>Pure ALOHA:<ul>
<li>A Frame is sent at once when it is generated</li>
<li>Collision may be occurred all the time </li>
<li>冲突时间为2D<ul>
<li>前面D时间内传输的帧的后面部分会冲突</li>
<li>后面D时间内传输的帧的前面部分就冲突</li>
</ul>
</li>
</ul>
</li>
<li><p>Slotted ALOHA</p>
<ul>
<li>Frame is sent only at the very beginning of interval </li>
<li>Frame is sent successfully once no collision is occurred at the beginning of interval (slot)</li>
<li>冲突时间为D<ul>
<li>前一个帧传输完毕后，进入时隙的起点，可能在D时间(时隙持续时间)一直发生冲突</li>
</ul>
</li>
</ul>
</li>
<li><p>总结</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219125916564.png" alt="image-20211219125916564"></p>
<h4><span id="carrier-sense-protocols">Carrier Sense Protocols</span></h4><ul>
<li><p>CSMA：Carrier Sense Multiple Access</p>
</li>
<li><p>Characteristic：“先听后发”</p>
<ul>
<li>Improve ALOHA</li>
</ul>
</li>
<li><p>Types</p>
<ul>
<li>Non-persistent CSMA</li>
<li>Persistent CSMA<ul>
<li>1-persistent CSMA</li>
<li>P-persistent CSMA</li>
<li>1-persistent is  a special example of p-persistent<ul>
<li>但前者是连续时间的，后者是分槽的</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>问题：对于1-persistent CSMA，如果一个频道空闲后站点进行发送数据，是否会造成冲突</p>
<ul>
<li>会，有两种情况<ul>
<li>有两个或多个站点同时发送数据</li>
<li>传播延迟时间—Propagation</li>
</ul>
</li>
<li>传输时延是指一个站点从开始发送数据帧到数据帧发送完毕所需要的全部时间</li>
<li>传播时延是指发送端开始发送数据到接收端收到数据所需要的全部时间。</li>
<li>传输时延和发送数据帧大小有关，而传播时延和传输距离相关。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219132807638.png" alt="image-20211219132807638" style="zoom:67%;"></p>
</li>
<li><p>例子：计算冲突窗口</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211218122456920.png" alt="image-20211218122456920"></p>
<ul>
<li>CSMA/CD  — Carrier Sense Multiple Access with Collision Detection<ul>
<li>“先听后发、边发边听”</li>
<li>所有站点在发送时都接收到自己的信号，因此，如果信号不同，站点就会检测到冲突。</li>
<li>一旦检测到冲突，立即中止传输，并在发生冲突时发送阻塞信号(a jam signal)以通知其他站点； </li>
<li>所有站点都需要一个随机的时间来再次重传。</li>
<li>广泛应用于局域网LANs的MAC子层</li>
<li>有三个状态<ul>
<li>Contention竞争</li>
<li>Transmission 传输</li>
<li>idle 空闲</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219133721941.png" alt="image-20211219133721941" style="zoom: 50%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211218123931563.png" alt="image-20211218123931563"></p>
<h4><span id="other-multiple-access-protocol">Other Multiple Access Protocol</span></h4><ul>
<li>Collision-Free protocol (无冲突的协议)<ul>
<li>A Bit-Map protocol(位图协议,预留协议)<ul>
<li>竞争期</li>
<li>传输期</li>
<li><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219134941421.png" alt="image-20211219134941421"></li>
</ul>
</li>
<li>Binary Countdown protocol (二进制倒计数协议)<ul>
<li><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219135435162.png" alt="image-20211219135435162" style="zoom:50%;"></li>
<li><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219135454481.png" alt="image-20211219135454481"></li>
</ul>
</li>
</ul>
</li>
<li>Limited-Contention protocol (有限竞争协议)</li>
<li>WDMA（波分多路访问协议）</li>
<li>MACAW（无线局域网协议）<ul>
<li>MACA：Multiple Access with Collision Avoidance</li>
<li>MACAW ：MACA for wirless</li>
</ul>
</li>
</ul>
<h3><span id="ieee-ethernet-naming-rule">IEEE Ethernet naming rule</span></h3><ul>
<li>10Base2（IEEE 802.3a）<ul>
<li>–10：baseband（unit: Mbps） 10Mbps</li>
<li>–Base：baseband transmission  (基带传输)</li>
<li>–2（或5）：support segment （100米为单位，四舍五入）</li>
</ul>
</li>
<li>10Base-TX（IEEE 802.3X）<ul>
<li>–T：copper UTP</li>
<li>–F：fiber</li>
</ul>
</li>
</ul>
<h4><span id="检测粗或细同轴电缆的问题">检测粗或细同轴电缆的问题</span></h4><ul>
<li>检测电缆断裂、过长（超长）、不良分接头或连接器松动可能是粗同轴电缆或细同轴电缆的主要问题。</li>
<li>时域反射计（时间域反射计）<ul>
<li>发帖</li>
<li>定时发送和接收回声之间的时间间隔</li>
<li>定位回声的来源</li>
</ul>
</li>
</ul>
<h4><span id="topology-of-10base-t">Topology of 10Base-T</span></h4><ul>
<li>Physical topology is star</li>
<li>Logical topology is bus（compete the  bus）</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219135941179.png" alt="image-20211219135941179"></p>
<ul>
<li>优势<ul>
<li>安装成本低于同轴电缆</li>
<li>即插即用，组网灵活</li>
<li>星型拓扑，易分离故障</li>
<li>开放</li>
</ul>
</li>
<li>问题<ul>
<li>多用户共用一条10M总线（通道）</li>
</ul>
</li>
</ul>
<h4><span id="以太网编码-ethernet-encoding">以太网编码 Ethernet encoding</span></h4><ul>
<li>不能直接使用二进制表示电压0V和5V，因为你分不清空闲的发送端(0 volts)和0 bit(0 volts)</li>
<li>使用Manchester encoding，1bit表示一个高伏加低伏，0bit表示一个低伏加高伏</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219140726932.png" alt="image-20211219140726932"></p>
<h4><span id="ieee-802-standard-chapter-1">IEEE 802 standard (chapter 1)</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219140741285.png" alt="image-20211219140741285"></p>
<h4><span id="ethernet-mac-sublayer-protocol">Ethernet MAC sublayer protocol</span></h4><p>有两种不同的MAC子层协议：</p>
<ol>
<li>DIX(DEC, Intel, Xerox)<ul>
<li>使用最广，首先发明</li>
</ul>
</li>
<li>IEEE 802.3<ul>
<li>后发明，使用范围没那么广</li>
</ul>
</li>
</ol>
<h5><span id="destinationsource-address">Destination/Source address</span></h5><p>10-Mbps baseband standard 只使用6个字节的地址</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219141220301.png" alt="image-20211219141220301"></p>
<h5><span id="mac-address-physical-address">MAC address (physical address)</span></h5><p>Ethernet MAC Address</p>
<ul>
<li>Manufacture ID (OUI，Organizationally Unique Identifier ) + NIC ID=24bit + 24bit</li>
<li>例子</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219141404520.png" alt="image-20211219141404520"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219141037706.png" alt="image-20211219141037706"></p>
<p>区别：</p>
<ol>
<li><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219141052943.png" alt="image-20211219141052943"></p>
</li>
<li><p>The Type/Length Field</p>
<ul>
<li>大于1536的是Type，小于等于1536(0x600)的是Length</li>
</ul>
</li>
<li><p>Data field </p>
<ul>
<li>0~1500字节</li>
<li>以太网要求有效帧必须至少64个字节<ul>
<li>其他必须的部分为6+6+2+4=18个字节</li>
<li>最大帧长：1500+18=1518</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>为什么需要至少64字节</p>
<ul>
<li>CSMA/CD：帧的传送时间大于等于$2\tau$</li>
<li>所以小于这个值的说明发生了冲突，提前送回</li>
<li>对于以太网</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219142849263.png" alt="image-20211219142849263"></p>
<h4><span id="binary-exponential-backoff-二进制指数回退算法">Binary Exponential Backoff  二进制指数回退算法</span></h4><ul>
<li>发生碰撞后，该站等待一个随机时间并重试。 随机化是如何完成的？</li>
<li>时间被分成离散的时隙，其长度等于最坏情况的往返传播时间 (2τ)。<ul>
<li>第一次碰撞后，每个站随机等待 0 或 1 个时隙。</li>
<li>第二次碰撞后，每个站随机等待 0、1、2 或 3 个时隙时间。</li>
<li>在 i 次冲突后，会选择 0 到$2^i-1$ 之间的随机数，并跳过该数量的时隙。</li>
<li>达到 10 次冲突后，随机化间隔将冻结在 1023 个时隙。</li>
<li>16次碰撞后，控制器放弃并报告失败。</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219143112438.png" alt="image-20211219143112438"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219143122776.png" alt="image-20211219143122776"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219143657092.png" alt="image-20211219143657092" style="zoom:50%;"></p>
<h4><span id="typical-ethernet">Typical Ethernet</span></h4><ul>
<li>10base2</li>
<li>10base5</li>
<li>10base-T</li>
<li>Improve performance <ul>
<li>Up to 100Mbps</li>
<li>Switched network</li>
</ul>
</li>
</ul>
<h4><span id="交换式以太网">交换式以太网</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219192044424.png" alt="image-20211219192044424"></p>
<ul>
<li>高速背板：backplane</li>
<li>插件卡: plug-in cards</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219192216933.png" alt="image-20211219192216933"></p>
<ul>
<li>Hub：集线器</li>
<li>Switch：交换机</li>
<li><p>Repeater：中继器</p>
</li>
<li><p>插入式卡检查帧是否以连接到同一卡的其他站之一为目的地。</p>
<ul>
<li>如果是，则将帧复制到目标站。</li>
<li>如果没有，帧将通过高速背板发送到目标站的卡。</li>
</ul>
</li>
<li><p>如果连接到同一个插件卡的两台机器同时传输帧会怎样？</p>
<ul>
<li>情况 1：卡上的所有端口都连接在一起形成本地卡上 LAN  — Hub<ul>
<li>在任何时候，每张卡只允许传输一次，但所有卡都可以并行传输。</li>
<li>每张卡形成自己的冲突域，独立于其他。</li>
</ul>
</li>
<li>情况 2：每个输入端口都可以在卡的板载 RAM 中缓冲传入帧 — Switch<ul>
<li>所有输入端口都可以同时接收（和发送）帧 - 并行和全双工(parallel and full-duplex)</li>
<li>每个端口都是一个单独的冲突域，因此不会发生冲突。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4><span id="100mbps-ethernet8023u-快速以太网">100Mbps Ethernet—802.3u  快速以太网</span></h4><ul>
<li><p>带宽：10Mbps -&gt; 100Mbps</p>
</li>
<li><p>快速以太网（IEEE 802.3u）于 1995 年 6 月被 IEEE 正式批准。</p>
<ul>
<li>向下兼容<ul>
<li>保留旧的数据包格式、接口和程序规则</li>
</ul>
</li>
<li>更快<ul>
<li>比特时间从 100 (10 Mbps) 纳秒减少到 10 纳秒 (100 Mbps)。</li>
</ul>
</li>
<li>自动协商 — autonegotiation</li>
</ul>
</li>
<li>快速以太网使用集线器或交换机连接计算机，就像 10Base-T 接线一样。</li>
<li>快速以太网允许使用以下三种类型的电线。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219193214416.png" alt="image-20211219193214416"></p>
<h4><span id="gigabit-ethernet吉比特以太网千兆以太网">Gigabit Ethernet（吉比特以太网）千兆以太网</span></h4><ul>
<li>千兆以太网 (IEEE 802.3z) 于 1998 年被 IEEE 批准。<ul>
<li>向下兼容</li>
<li>比现有的 802.3 和 802.3u 标准更快。</li>
</ul>
</li>
<li>千兆以太网的所有配置都是<strong>点对点</strong>而不是多点。</li>
<li>千兆以太网支持两种不同的操作模式<ul>
<li><strong>全双工：基于交换机的连接</strong></li>
<li><strong>半双工：基于集线器的连接</strong></li>
</ul>
</li>
<li>千兆以太网支持流量控制：一端可以向另一端发送一个特殊的控制帧，告诉它暂停一段时间</li>
</ul>
<h4><span id="解决一些问题">解决一些问题</span></h4><ul>
<li>carrier extension（载荷扩充）<ul>
<li>将帧填充到 512 字节 (8)</li>
<li>所以，最大距离可以是200m=25*8</li>
<li>缺点：线路利用率低，仅为9%（46/512）</li>
</ul>
</li>
<li>frame bursting （帧串）<ul>
<li>在一次传输中传输多个帧</li>
<li>改善线路效用</li>
</ul>
</li>
</ul>
<h4><span id="ieee8022">IEEE802.2</span></h4><ul>
<li>LLC 在以太网和其他 802 协议之上运行。</li>
<li>LLC 通过向网络层提供单一格式和接口来隐藏各种 802 网络之间的差异。</li>
<li>LLC 提供三种服务选项：<ul>
<li>不可靠的数据报服务，</li>
<li>确认数据报服务</li>
<li>可靠的面向连接的服务。</li>
</ul>
</li>
<li>LLC 标头包含三个字段：<ul>
<li>目的地接入点</li>
<li>源接入点</li>
<li>一个控制字段。</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219193408985.png" alt="image-20211219193408985"></p>
<h3><span id="数据链路层交换">数据链路层交换</span></h3><h4><span id="为什么有多个局域网">为什么有多个局域网？</span></h4><ul>
<li>每个部门的目标可能不同</li>
<li>可能在地理上分布在几个建筑物上</li>
<li>可能需要拆分成单独的 LAN 以适应负载</li>
<li>最远的机器之间的物理距离可能太大</li>
<li>为了提高性能</li>
<li>桥梁(Bridge)可以为组织的安全做出贡献</li>
</ul>
<h5><span id="provide-a-higher-load">Provide a higher load</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219193915925.png" alt="image-20211219193915925"></p>
<h5><span id="bridge-operation-from-80211-to-8023">Bridge-operation from 802.11 to 802.3</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219193921803.png" alt="image-20211219193921803"></p>
<h5><span id="bridge-from-802x-to-802y">Bridge from 802.X to 802.Y</span></h5><ul>
<li>问题：<ul>
<li>不同的帧格式——重新封装 re-encapsulation</li>
<li>不同的传输速度 - 缓冲 buffering</li>
<li>不同的最大帧长（如，802.3 1526 字节、802.11 2346 字节）</li>
<li>不同的安全策略</li>
<li>不同的QoS策略</li>
</ul>
</li>
</ul>
<h4><span id="local-internetworking-本地互联">Local internetworking 本地互联</span></h4><ul>
<li>通过透明网桥<strong>(transparent bridges)</strong>连接的多个 LAN 不需要对其硬件和软件进行任何更改。<ul>
<li>透明网桥<ul>
<li>即插即用，无需任何配置 </li>
<li>网络中的站点无需感知网桥的存在与否</li>
</ul>
</li>
</ul>
</li>
<li>透明网桥以混杂模式<strong>（promiscuous mode）</strong>运行，接受在它所连接的所有 LAN 上传输的每一帧。</li>
<li>当帧到达时，网桥必须决定是丢弃还是转发它，如果是后者，则将帧放置在哪个 LAN 上。</li>
<li>通过在网桥内的大（散列）表中查找目标地址来做出决定。</li>
</ul>
<h4><span id="透明网桥">透明网桥</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219194440406.png" alt="image-20211219194440406"></p>
<ul>
<li>网桥维护一个目的地址表和相应的输出行，如下所示：</li>
<li>最初所有的哈希表都是空的。</li>
<li>flooding algorithm：（泛洪）<ul>
<li>未知目的地的每个传入帧都在网桥连接到的所有 LAN 上输出，除了它到达的那个。</li>
</ul>
</li>
<li>backward learning （逆向学习）<ul>
<li>通过查看传入帧的源地址，网桥能够知道哪个机器可以在哪个 LAN 上访问，因此它在其哈希表中创建一个条目，将源机器与传入 LAN 链接起来。</li>
</ul>
</li>
<li>如何处理动态拓扑？<ul>
<li>每当创建哈希表条目时，都会在条目中注明帧的到达时间。</li>
<li>每当来自条目中地址的帧到达时，条目时间就会更新。</li>
<li>桥中的进程会定期扫描哈希表并清除（清除）超过几分钟的所有条目。</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219200728574.png" alt="image-20211219200728574"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219200746854.png" alt="image-20211219200746854"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219200754015.png" alt="image-20211219200754015"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219200839373.png" alt="image-20211219200839373"></p>
<ul>
<li>传入帧的路由过程：<ul>
<li>如果目的局域网和源局域网相同，则丢弃该帧 — discard</li>
<li>如果目标 LAN 和源 LAN 不同，则转发该帧 — forward</li>
<li>如果目标 LAN 未知，请使用泛洪 — flooding</li>
</ul>
</li>
<li>当每一帧到达时，必须应用上述算法。</li>
<li>特殊用途的 VLSI 芯片可以在几微秒内完成查找和更新表条目。</li>
</ul>
<h4><span id="转发">转发</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219200853693.png" alt="image-20211219200853693"></p>
<h4><span id="过滤">过滤</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219200912349.png" alt="image-20211219200912349"></p>
<h4><span id="泛洪">泛洪</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219200932815.png" alt="image-20211219200932815"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219201453421.png" alt="image-20211219201453421"></p>
<h4><span id="透明网桥小结">透明网桥小结</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219201927715.png" alt="image-20211219201927715"></p>
<ul>
<li>Bridge can segment collision-domain 可以分割冲突域</li>
</ul>
<h5><span id="例子">例子</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219202050069.png" alt="image-20211219202050069"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219202103083.png" alt="image-20211219202103083"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219202127421.png" alt="image-20211219202127421"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219202148925.png" alt="image-20211219202148925"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219202157594.png" alt="image-20211219202157594"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219202204127.png" alt="image-20211219202204127"></p>
<h4><span id="spanning-tree-bridge">Spanning tree bridge</span></h4><ul>
<li>为了提高可靠性，一些站点在 LAN 对之间并行使用两个或多个网桥。</li>
<li>这种安排在拓扑中创建了环路。</li>
<li>如果到达未知目的地的帧会发生什么？</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219202713922.png" alt="image-20211219202713922"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219202728808.png" alt="image-20211219202728808"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219202744222.png" alt="image-20211219202744222"></p>
<ul>
<li>解决方案是让网桥相互通信，并使用到达每个 LAN 的生成树覆盖实际拓扑。</li>
<li>在生成树中，从每个源到每个目的地都有唯一的路径，循环是不可能的。</li>
<li>构建生成树<ul>
<li>选择一座桥作为树的根<ul>
<li>序列号最小的网桥成为根。</li>
</ul>
</li>
<li>构建了从根到每个网桥和 LAN 的最短路径树。</li>
<li>如果网或 LAN 出现故障，则会计算新的生成树。</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219203020145.png" alt="image-20211219203020145"></p>
<h4><span id="remote-bridges">Remote Bridges</span></h4><ul>
<li>远程网桥可用于互连远程 LAN。<ul>
<li>在每个 LAN 上放置一个网桥</li>
<li>用点对点线成对连接桥。</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219203142252.png" alt="image-20211219203142252"></p>
<h4><span id="network-devices">Network Devices</span></h4><ul>
<li>Repeaters 中继站<ul>
<li>Are analog devices to connect two cable segments.</li>
<li>A signal appearing on one segment is amplified and put out on the other segment. </li>
<li>Can not understand frames, packets, or headers, but understand volts.</li>
</ul>
</li>
<li>Hubs 集线器<ul>
<li>Frames arriving on any of the lines are sent out on all the others.</li>
<li>The entire hub forms a single collision domain.</li>
<li>All the lines coming into a hub must operate at the same speed.</li>
<li>Do not amplify the incoming signals and are designed to hold multiple line cards each with multiple inputs (one collision domain). </li>
<li>Do not examine the 802 addresses or use them in any way. </li>
</ul>
</li>
<li><p>Bridge 网桥</p>
<ul>
<li>A bridge connects two or more LANs.</li>
<li>When a frame arrives, software in the bridge extracts the destination address from the frame header and looks it up in a table to see where to send the frame.</li>
<li>A bridge may have line cards (like a hub) for different network types and speeds.</li>
<li>Each line forms its own collision domain.</li>
</ul>
</li>
<li><p>Switches 交换机</p>
<ul>
<li>A switch is similar to bridge in its routing on frame addresses.</li>
<li>Switches are often used to connect individual computers (no collision).</li>
<li>Switches must have space for many more line cards.</li>
<li>Each line card provides buffer space for frames arriving on its ports. </li>
<li>Each port forms its own collision domain.</li>
</ul>
</li>
<li>Routers 路由<ul>
<li>When a packet comes into a router, the frame header and trailer are stripped off and the packet located in the frame’s payload field is passed to the routing software.</li>
<li>The routing software uses the packet header to choose an output line.</li>
<li>For an IP packet, the packet header will contain a 32-bit (IPv4) or 128-bit (IPv6) address, but not a 48-bit 802 address.</li>
</ul>
</li>
<li>Gateways<ul>
<li>Transport gateway<ul>
<li>Connect two computers that use different connection-oriented transport protocols</li>
<li>Copy the packets from one connection to the other, reformatting them as need be.</li>
</ul>
</li>
<li>Application gateway<ul>
<li>understand the format and contents of the data</li>
<li>translate messages from one format to another.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219203408886.png" alt="image-20211219203408886"></p>
<h4><span id="l2-data-link-layer-devices">L2 (data link layer) devices</span></h4><ul>
<li>Network interface card (NIC) 网络适配器/网卡</li>
<li>Bridge</li>
<li>Switch</li>
</ul>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>计网L7</title>
    <url>/2021/12/17/%E8%AE%A1%E7%BD%91L7/</url>
    <content><![CDATA[<h4><span id="内容">内容</span></h4><ul>
<li>学习协议验证<ul>
<li>有限状态机模型</li>
<li>Petri网模型</li>
</ul>
</li>
<li>学习示例 DLL 协议<ul>
<li>HDLC<ul>
<li>Frame format</li>
</ul>
</li>
<li>PPP </li>
</ul>
</li>
</ul>
<h2><span id="protocol-verification-协议验证">Protocol verification 协议验证</span></h2><ul>
<li>由于各种协议的复杂性，正确验证它们的正确性非常重要。</li>
<li>验证还应确定协议中是否可能出现死锁(deadlocks)或其他问题。</li>
<li>有几种不同的协议验证方法。<ul>
<li>有限状态机模型 — Finite state machine models</li>
<li>Petri网模型 — Petri net models</li>
</ul>
</li>
</ul>
<h5><span id="finite-state-machine-models">Finite State Machine Models</span></h5><ul>
<li>每个协议机器(protocol machine)（即发送方或接收方）在每个时刻都始终处于特定状态。<ul>
<li>所有状态都表示为节点。</li>
</ul>
</li>
<li>整个系统的状态是两个协议机和通道的所有状态的组合。<ul>
<li>two protocol machines and channel</li>
</ul>
</li>
<li>从每个状态，有零个或多个可能的转换(transitions )到其他状态。 当某些事件发生时会发生转换。<ul>
<li>所有过渡都表示为有向弧 — directed arcs</li>
</ul>
</li>
<li>初始状态(Initial state)对应于系统开始运行时的描述，或在此后不久的某个方便的开始位置。</li>
<li><p>可达性分析</p>
<ul>
<li>哪些状态是可达的，哪些是不可达的</li>
<li>检测协议规范中的各种错误</li>
</ul>
</li>
<li><p>例子</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211217183757903.png" alt="image-20211217183757903"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211217183926236.png" alt="image-20211217183926236"></p>
<h5><span id="petri-net-models">Petri Net Models</span></h5><ul>
<li><p>Petri网有四个基本要素：places(库所), transitions（变迁）, arcs（弧）, and tokens（标记）.</p>
<ul>
<li>一个place代表系统（部分）可能处于的状态。（圆圈）</li>
<li>token指示的当前状态（粗点）</li>
<li>transition由水平或垂直条指示。</li>
<li>每个转换都有零个或多个来自其输入位置的input arcs，以及零个或多个的output arcs，到达其输出位置。</li>
</ul>
</li>
<li><p>如果在每个输入位置至少有一个输入令牌，则transition可以是enabled（激活的）。</p>
</li>
<li>任何启用的转换都可以随意fire（激发），从每个输入位置移除一个令牌并在每个输出位置存放一个令牌。</li>
<li>Petri 网可用于以类似于使用有限状态机的方式检测协议故障。</li>
<li>Petri 网可以用类似于文法的方便的代数形式（代数形式）表示。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211217184239487.png" alt="image-20211217184239487" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211217184249830.png" alt="image-20211217184249830"></p>
<h3><span id="example-dll-protocol">Example DLL protocol</span></h3><ul>
<li>HDLC<ul>
<li>High-Level Data Link Control</li>
</ul>
</li>
<li>PPP<ul>
<li>The Point-to-Point Protocol</li>
</ul>
</li>
</ul>
<h4><span id="hdlc">HDLC</span></h4><p>HDLC的历史</p>
<ul>
<li>IBM 引入了 SDLC（同步数据链路控制）并将其提交给 ANSI 和 ISO，以作为美国和国际标准接受。</li>
<li>ANSI 将其修改为 ADCCP——高级数据通信控制程序 Advanced Data Communication Control Procedure</li>
<li>ISO 将其修改为 HDLC——高级数据链路控制 High-level Data Link Control.</li>
<li>CCITT 为其 LAP（链路访问程序）修改了 HDLC，但后来又将其修改为 LAPB。</li>
<li>它们都非常相似，它们之间只有细微的（但令人讨厌的）差异。</li>
</ul>
<h5><span id="帧的结构">帧的结构</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211217184953564.png" alt="image-20211217184953564"></p>
<ul>
<li>标志序列 — Flag sequence<ul>
<li>识别帧的开始或结束</li>
<li>位填充透明度。</li>
</ul>
</li>
<li>地址字段 — Address field<ul>
<li>识别终端之一（在具有多个终端的线路上）</li>
<li>区分命令和响应（对于点对点线路）</li>
</ul>
</li>
<li>控制领域 — Control field<ul>
<li>用于序列号、确认和其他目的</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211217185625340.png" alt="image-20211217185625340"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211217185637068.png" alt="image-20211217185637068"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211217185646814.png" alt="image-20211217185646814"></p>
<h5><span id="frame-types-帧的种类">Frame Types — 帧的种类</span></h5><ul>
<li><strong>I</strong>nformation Frame(信息帧)</li>
<li><strong>S</strong>upervisory Frame (监控帧)</li>
<li><p><strong>U</strong>nnumbered Frame (无编号帧)</p>
</li>
<li><p>三种帧的Control字段的内容</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211217185904450.png" alt="image-20211217185904450" style="zoom:67%;"></p>
<p>Control field of </p>
<p>(a) An Information frame.</p>
<p>(b) A Supervisory frame.</p>
<p>(c) An Unnumbered frame.</p>
<h5><span id="information-frame信息帧">Information Frame（信息帧）</span></h5><ul>
<li>Seq : N(S)<ul>
<li>发送帧序列号</li>
</ul>
</li>
<li>Next : N(R)<ul>
<li>捎带确认 Piggybacked acknowledgement</li>
<li>捎带尚未接收的第一帧的编号（即预期的下一帧），而不是正确接收的最后一帧的编号。</li>
</ul>
</li>
<li>P/F<ul>
<li>Poll/Final(查询/结束)</li>
<li>当计算机轮询一组终端时使用</li>
</ul>
</li>
</ul>
<h5><span id="supervisory-frame-监控帧">Supervisory Frame （监控帧）</span></h5><ul>
<li>Type 0 (bit3-4: 0 0) 接收就绪<ul>
<li>RR帧=确认帧</li>
<li>当没有用于搭载的反向流量时使用</li>
</ul>
</li>
<li>Type 1 (bit3-4: 0 1)，如协议 5<ul>
<li>RNR=否定确认帧</li>
<li>Next 字段表示未正确接收到的第一个帧</li>
</ul>
</li>
<li>Type 2（位 3-4：1 0）：接收未就绪<ul>
<li>确认所有帧直到但不包括 Next</li>
<li>告诉发件人停止发送</li>
</ul>
</li>
<li>Type 3（位 3-4：1 1）：选择性拒绝<ul>
<li>只要求重传指定的帧</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211217190545855.png" alt="image-20211217190545855"></p>
<ul>
<li>框架结构</li>
<li>数据字段 Data field<ul>
<li>包含任何信息</li>
<li>可以任意长</li>
<li>校验和的效率随着帧长度的增加而下降</li>
</ul>
</li>
<li>校验和字段 Checksum field<ul>
<li>循环冗余码 Cyclic redundancy：16bit – CRC：$x^{16}+x^{12}+x^5+1$</li>
</ul>
</li>
</ul>
<p>协议提供的三个命令</p>
<ul>
<li>DISC (DISConnect) - 允许机器宣布它正在停机（例如，用于预防性维护）。</li>
<li>SNRM（设置正常响应模式） - 允许刚刚重新上线的机器宣布其存在并强制所有序列号归零。<ul>
<li>HDLC 和 LAPB 有一个附加命令，SABM（设置异步平衡模式）。</li>
<li>SABME 和 SNRME 与 SABM 和 SNRM 相同</li>
</ul>
</li>
<li>FRMR (FRaMe Reject) - 表示一个具有正确校验和但不可能语义的帧到达。</li>
</ul>
<h4><span id="dll-in-the-internet">DLL in the internet</span></h4><ul>
<li>Point-to-Point Communication <ul>
<li>Router-Router专线连接</li>
<li>拨号主机-路由器</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211217190938484.png" alt="Point-to-Point Protocol"></p>
<h4><span id="point-to-point-protocol">Point-to-Point Protocol</span></h4><ul>
<li>在 RFC 1661 中定义并在其他几个 RFC（例如 RFC 1662 和 1663）中进一步详细说明。</li>
<li>PPP 提供三个特性：<ul>
<li>一种成帧方法，帧格式也处理错误检测。</li>
<li>用于连接线路、测试线路、协商选项和关闭线路的链路控制协议。<ul>
<li>该协议称为 LCP（链路控制协议）。</li>
</ul>
</li>
<li>一种以独立于要使用的网络层协议的方式协商网络层选项的方法。 选择的方法是为每个支持的网络层使用不同的 NCP（网络控制协议）。</li>
</ul>
</li>
</ul>
<p>Typical Scenario: Connecting A Home PC To Internet Service Provider </p>
<ul>
<li>物理连接建立阶段：<ul>
<li>PC 通过调制解调器呼叫提供商的路由器。</li>
<li>路由器的调制解调器接听电话并建立物理连接。</li>
</ul>
</li>
<li>数据链路层选项协商阶段：<ul>
<li>PC 在一个或多个 PPP 帧的有效载荷字段中向路由器发送一系列 LCP 数据包。 这些数据包及其响应选择要使用的 PPP 参数。</li>
</ul>
</li>
<li>网络层选项协商阶段：<ul>
<li>发送一系列 NCP 数据包以配置网络层并为 PC 分配 IP 地址（如果 PC 想要运行 TCP/IP 协议栈）。</li>
</ul>
</li>
<li>数据通信阶段：<ul>
<li>PC 通过建立的连接发送和接收 IP 数据包。</li>
</ul>
</li>
<li>连接释放阶段：<ul>
<li>当PC完成后，NCP用于拆除网络层连接并释放IP地址。</li>
<li>LCP 用于关闭数据线层连接。</li>
<li>计算机告诉调制解调器挂断电话，释放物理连接。</li>
</ul>
</li>
</ul>
<h5><span id="ppp-frame-format">PPP Frame Format</span></h5><ul>
<li>主要区别<ul>
<li>PPP 是面向字符的，而 HDLC 是面向位的。<ul>
<li>character-oriented</li>
</ul>
</li>
<li>PPP 在拨号调制解调器线路上使用字节填充，因此所有帧都是整数字节。<ul>
<li>byte stuffing </li>
</ul>
</li>
</ul>
</li>
<li>用于无编号模式操作的 PPP 全帧格式 unnumbered mode</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211217192547463.png" alt="image-20211217192547463"></p>
<ul>
<li><p>Flag — Begin with a special byte-01111110 (same as HDLC)</p>
<ul>
<li>若封装在PPP帧中的数据出现0x7E字节，则用2字节序列0x7D、0x5E取代；</li>
<li>若出现0x7D字节，则用2字节序列0x7D、0x5D取代； </li>
</ul>
</li>
<li><p>Address Field —地址字段</p>
<ul>
<li>始终设置为二进制值 11111111</li>
</ul>
</li>
<li><p>Control field — 控制字段</p>
<ul>
<li>默认值为 00000011，表示未编号的帧。</li>
</ul>
</li>
</ul>
<p>考虑到地址和控制字段默认是不变的，所以LCP可以协商将这两个字段排除在外。</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211217192904700.png" alt="image-20211217192904700"></p>
<ul>
<li>Protocol - 告诉 Payload 字段中的数据包类型<ul>
<li>协议字段的默认大小为 2 个字节，可以使用 LCP 协商为 1 个字节。<ul>
<li>当protocol=0x0021时，payload为IP包。</li>
<li>当Protocol= 0xc021 时，payload为 LCP 包。</li>
<li>当protocol=0x8021 时，payload为NCP 包。</li>
</ul>
</li>
</ul>
</li>
<li>Payload(有效负载) - 可变长度，最多达到一些协商的最大值，默认为 1500 字节。</li>
<li>Checksum(校验和) - 通常为 2 个字节（但可以为 4 个字节）</li>
<li>Closing flag(结束标志) – 与开始标志相同</li>
</ul>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>计网L9</title>
    <url>/2021/12/19/%E8%AE%A1%E7%BD%91L9/</url>
    <content><![CDATA[<h4><span id="主要内容">主要内容</span></h4><ul>
<li>packets(包)是如何从源地址传送到目标地址的</li>
<li><p>如何选择路径</p>
<ul>
<li>Routing protocol, Router</li>
<li>Routed protocol: IPv4,IPv6</li>
<li>Others</li>
</ul>
</li>
<li><p>Outline of network  layer</p>
</li>
<li>Outline of Routing algorithm</li>
<li>Learn Dijkstra algorithm</li>
<li>Distance-vector algorithm ：Rip</li>
<li>Link state routing algorithm ：OSPF</li>
<li>Multi-level routing, broadcast routing, mobile routing, adhoc routing, p2p, and et al.</li>
</ul>
<h5><span id="第一部分">第一部分</span></h5><ul>
<li>Main function of network  layer</li>
<li>Routing algorithm<ul>
<li>Static routing algorithm<ul>
<li>Dijkstra</li>
<li>flooding</li>
</ul>
</li>
<li>Dynamic routing algorithm<ul>
<li>DV</li>
<li>LS</li>
</ul>
</li>
</ul>
</li>
<li>Learn Dijkstra algorithm</li>
</ul>
<h2><span id="网络层-network-layer">网络层 network layer</span></h2><h4><span id="网络层的位置">网络层的位置</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219205250810.png" alt="image-20211219205250810" style="zoom:67%;"></p>
<h4><span id="网络层的主要作用">网络层的主要作用</span></h4><p>将数据包从源头一直传输到目的地。</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219205400001.png" alt="image-20211219205400001"></p>
<h3><span id="service-types-provided-by-network-layer-服务类型">Service types provided by network layer 服务类型</span></h3><ul>
<li>Connection oriented service  面向连接：<strong>X.25, ATM   虚电路</strong></li>
<li>Connectionless service 无连接：<strong>IP   数据报</strong></li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219205452271.png" alt="image-20211219205452271" style="zoom: 67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219205547429.png" alt="image-20211219205547429"></p>
<ul>
<li>Virtual-circuit subnet 虚电路子网<ul>
<li>Select a path when connection is established<ul>
<li>建立连接时选择路径</li>
</ul>
</li>
<li>Each packet has a connection-number<ul>
<li>每个数据包都有一个连接号</li>
</ul>
</li>
<li>Connection is removed when communication is over<ul>
<li>通信结束后连接被删除</li>
</ul>
</li>
</ul>
</li>
<li>Datagram subnet 数据报子网<ul>
<li>Each datagram has destination-address<ul>
<li>每个数据报都有目的地址</li>
</ul>
</li>
<li>Each datagram look for path independently<ul>
<li>每个数据报独立寻找路径</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219210127638.png" alt="image-20211219210127638"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219210106534.png" alt="image-20211219210106534"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219210231958.png" alt="image-20211219210231958"></p>
<h3><span id="ipv4协议">IPv4协议</span></h3><h5><span id="介绍">介绍</span></h5><ul>
<li>网际协议版本4</li>
<li>一种无连接的协议，是互联网的核心</li>
<li>也是使 用最广泛的网际协议版本，其后继版本为IPv6</li>
</ul>
<h5><span id="基本功能">基本功能</span></h5><p>internet协议执行两个基本功能 </p>
<ul>
<li>寻址(addressing) </li>
<li>分片(fragmentation)</li>
</ul>
<h5><span id="ipv4数据报格式">IPv4数据报格式</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219210727923.png" alt="image-20211219210727923"></p>
<h5><span id="数据报分片">数据报分片</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219211003459.png" alt="image-20211219211003459"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219211047797.png" alt="image-20211219211047797"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219211103487.png" alt="image-20211219211103487"></p>
<h5><span id="总结">总结</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219211119275.png" alt="image-20211219211119275"></p>
<h5><span id="ip地址">IP地址</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219211204626.png" alt="image-20211219211204626"></p>
<h5><span id="ip地址的分类">IP地址的分类</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219211249325.png" alt="image-20211219211249325"></p>
<h5><span id="一些特殊的地址">一些特殊的地址</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219211333100.png" alt="image-20211219211333100"></p>
<h4><span id="子网的划分">子网的划分</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219211422213.png" alt="image-20211219211422213"></p>
<h3><span id="routing-table">Routing table</span></h3><ul>
<li><p>Static routing</p>
<ul>
<li>Configured by administrator: ip route</li>
</ul>
</li>
<li><p>Dynamic routing</p>
<ul>
<li>Routing algorithm <ul>
<li>Distance vector routing（D-V）</li>
<li>Link state routing（L-S）</li>
</ul>
</li>
</ul>
</li>
<li><p>由管理员配置的路由表项称为<strong>静态路由</strong></p>
<ul>
<li>适合小而稳定的网络，成本更低</li>
<li>默认路由：目的网络地址和子网掩码均为0.0.0.0，如：</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219211623227.png" alt="image-20211219211623227"></p>
</li>
<li><p>可以使用Windows：route print, check routing table</p>
</li>
<li><p>通过路由协议获得的路由表项称为<strong>动态路由</strong></p>
<ul>
<li>适合大型变分网络，成本更高</li>
</ul>
</li>
</ul>
<h4><span id="routed-protocol和routing-protocol的区别">Routed protocol和Routing protocol的区别</span></h4><ul>
<li>Routed protocol  直接连接用户的<ul>
<li>example：IP、IPX</li>
</ul>
</li>
<li>Routing protocol 维持路由间的表格<ul>
<li>Distance vector routing </li>
<li>Link state routing</li>
<li>Hybrid routing</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219211739218.png" alt="image-20211219211739218" style="zoom:67%;"></p>
<h2><span id="routing-algorithm">Routing algorithm</span></h2><ul>
<li>路由算法设计必须考虑以下问题：<ul>
<li>正确性、简单性、鲁棒性、稳定性、公平性和最优性（矛盾、权衡）</li>
<li>Correctness, simplicity, robustness, stability, fairness, and optimality (contradictory、trade-off)</li>
</ul>
</li>
<li>路由算法分类<ul>
<li>静态算法（非自适应路由选择）（not self-adaptive）</li>
<li>动态算法（自适应路由选择）（ self-adaptive ）</li>
</ul>
</li>
</ul>
<h4><span id="路由算法中的度量">路由算法中的度量</span></h4><ul>
<li>Alias：cost，量度、代价、开销、成本</li>
<li>Common metric<ul>
<li>Path length：hop (跳数) </li>
<li>reliability：error rate on line</li>
<li>delay</li>
<li>bandwidth</li>
<li>Load of router</li>
<li>Communication cost</li>
</ul>
</li>
</ul>
<h4><span id="最优化原则-optimization-principle">最优化原则 Optimization principle</span></h4><ul>
<li>如果路由器 J 在从路由器 I 到路由器 K 的最优路径上，那么从 J 到 K 的最优路径也落在同一条路径上</li>
<li><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219212224980.png" alt="image-20211219212224980" style="zoom:67%;"></li>
<li>从所有源到给定目的地的一组最优路由形成以目的地为根的树（称为sink tree）</li>
</ul>
<h4><span id="sink-tree汇集树">Sink tree(汇集树)</span></h4><ul>
<li>汇集树不一定是唯一的</li>
<li>所有路由算法的目标都是发现并使用所有路由器的汇集树</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219212307700.png" alt="image-20211219212307700"></p>
<h3><span id="shortest-path-routing">Shortest path routing</span></h3><ul>
<li><p>定义</p>
<ul>
<li>用于计算一个节点到其他所有节点的最短路径，主要特点是以起始点为 中心向外逐层扩展，直到扩展到终点为止</li>
</ul>
</li>
</ul>
<h4><span id="dijkstra算法">Dijkstra算法</span></h4><ul>
<li>compute shortest path using weight on communication-line</li>
<li><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219212457173.png" alt="image-20211219212457173" style="zoom:80%;"></p>
</li>
<li><p>带有最少行的路径可能不是最短路径</p>
</li>
<li>最短的路可能不是最快的</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219212911855.png" alt="image-20211219212911855"></p>
<h5><span id="步骤">步骤</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219213055109.png" alt="image-20211219213055109"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219213101714.png" alt="image-20211219213101714"></p>
<h5><span id="例子">例子</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219213115305.png" alt="image-20211219213115305"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219213121592.png" alt="image-20211219213121592"></p>
<h4><span id="flooding">Flooding</span></h4><ul>
<li>Every incoming packet is sent out on every outgoing line except the one it arrived on<ul>
<li>不计算路径，有路就走</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219213234071.png" alt="image-20211219213234071" style="zoom:67%;"></p>
<ul>
<li><p>problem：duplicate packets，such as 3，6</p>
</li>
<li><p>解决：</p>
<ul>
<li>在packet-header中加一个计数器，通过节点时减1，计数器为零时丢包</li>
<li>每个节点建立一个寄存器表，数据包再次到达节点时被丢弃</li>
<li>选择性地Flooding</li>
</ul>
</li>
<li>缺点：重复数据包有两个，浪费带宽</li>
<li>优点：可靠性高，路径短，军事上使用频繁</li>
</ul>
<h2><span id="dynamic-routing-algorithm">Dynamic Routing algorithm</span></h2><ul>
<li>Distance vector routing algorithm<ul>
<li>For example: RIP</li>
</ul>
</li>
<li>Link state routing algorithm<ul>
<li>For example: OSPF</li>
</ul>
</li>
<li>Hybrid routing  混合路由<ul>
<li>For example: IGRP</li>
</ul>
</li>
</ul>
<h4><span id="动态的实现">动态的实现</span></h4><ul>
<li>如果路由器需要通信，他们必须说相同的语言，即相同的路由协议</li>
<li>一个新的路由器必须主动介绍自己（问好）</li>
<li>定期发送 hello 数据包以了解其他人的健康状况（保持活动状态）</li>
</ul>
<h4><span id="distance-vector-routing-距离矢量路由">Distance Vector Routing 距离矢量路由</span></h4><ul>
<li>距离矢量路由选择：<ul>
<li>通过让每个路由器维护一个表（即矢量）来操作</li>
<li>给出到每个目的地的最佳已知距离以及使用哪条线路到达那里。</li>
</ul>
</li>
<li>D-V 算法是动态的和分布式的。 常用于小型网络，RIP是D-V的典型例子</li>
<li>RIP：路由信息协议，路由选择信息协议，1988，RFC1058</li>
</ul>
<h5><span id="working-principle-of-dv-dv算法的工作原则">Working principle of DV — DV算法的工作原则</span></h5><ul>
<li>每个路由器使用两个向量 $D_i $和 $S_i$ <ul>
<li>$D_i $表示从一个节点到所有其他节点的距离</li>
<li>$S_i$ 表示下一个节点（跳）</li>
</ul>
</li>
<li>在邻居路由器之间交换路径信息</li>
<li>每个节点根据路径信息更新自己的路由表</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219214243425.png" alt="image-20211219214243425"></p>
<h5><span id="更新表">更新表</span></h5><ul>
<li>交换向量后<ul>
<li>更新距离</li>
<li>更新下一个节点</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219214530162.png" alt="image-20211219214530162"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219232907230.png" alt="image-20211219232907230" style="zoom:67%;"></p>
<h5><span id="练习">练习</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219233157580.png" alt="image-20211219233157580"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211219235557166.png" alt="image-20211219235557166"></p>
<h5><span id="d-v算法的特点">D-V算法的特点</span></h5><ul>
<li>优势<ul>
<li>算法很简单</li>
</ul>
</li>
<li>坏处<ul>
<li>交换的信息太大</li>
<li>路径信息传播缓慢，路径信息可能不同</li>
<li>收敛速度慢，导致无穷计数问题。</li>
<li>不适合大网络</li>
</ul>
</li>
</ul>
<h5><span id="main-features-of-rip">Main features of RIP</span></h5><ul>
<li>RIP 是一种 D-V 路由协议</li>
<li>RIP 使用 hop（跳数）作为度量(metric)</li>
<li>当metric大于15时，认为目的地不可达</li>
<li>默认发送周期为 30 秒</li>
</ul>
<h5><span id="disadvantage-of-rip">Disadvantage of RIP</span></h5><ul>
<li>当目标网络的度量大于 15（如此小）时无法到达</li>
<li>RIP的度量是hop，一路都是router的编号，不太合理</li>
<li>实际中，常数到无穷大，收敛缓慢</li>
</ul>
<h5><span id="the-problems-induced-by-dv">The problems induced by DV</span></h5><ul>
<li>Representation<ul>
<li>routing loop（路由环路）</li>
<li>Count to infinite（计数到无穷问题）</li>
<li>slow Convergence （收敛慢的问题）</li>
</ul>
</li>
<li>Cause<ul>
<li>Trust wrong routing information</li>
</ul>
</li>
</ul>
<h5><span id="main-problem-of-dv">Main problem of DV</span></h5><p>It reacts rapidly to good news, but leisurely to bad news(好消息跑得快，坏消息传得慢)</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220000245076.png" alt="image-20211220000245076"></p>
<h3><span id="link-state-routing-ospf">Link State Routing  OSPF</span></h3><ul>
<li>距离矢量路由一直在 ARPANET 中使用，直到 1979 年它被链路状态路由取代。</li>
<li>链路状态路由的变体现在被广泛使用。</li>
<li>链路状态路由背后的思想由五个部分组成：<ul>
<li>发现它的邻居并了解他们的网络地址。</li>
<li>测量每个邻居的延迟或成本。</li>
<li>构造一个分组，分组中包含刚收到的所有信息</li>
<li>将此分组发送给其他的路由器</li>
<li>计算到所有其他路由器的最短路径。</li>
</ul>
</li>
</ul>
<h4><span id="learning-about-the-neighbors">Learning about the Neighbors</span></h4><ul>
<li>当路由器启动时，它会在每条点对点线路上发送一个特殊的 HELLO 数据包。</li>
<li>期望另一端的路由器发回一个回复，告诉它是谁（使用全局唯一名称）。</li>
<li>当两个或多个路由器通过 LAN 连接时，LAN 可以建模为一个节点。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220001502179.png" alt="image-20211220001502179"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220002158695.png" alt="image-20211220002158695"></p>
<h4><span id="measuring-line-cost-设置到每个邻居的成本度量">Measuring Line Cost 设置到每个邻居的成本度量</span></h4><ul>
<li>为了确定线路的成本，路由器发送一个特殊的 ECHO 数据包，并且要求对方立即发回。</li>
<li>通过测量往返时间，发送路由器可以获得对延迟的合理估计。<ul>
<li>为了获得更好的结果，可以多次进行测试，并使用平均值。</li>
</ul>
</li>
<li>为了将负载考虑在内，往返计时器必须在 ECHO 数据包排队时启动。</li>
<li><p>要忽略负载，应在 ECHO 数据包到达队列前端时启动计时器。</p>
</li>
<li><p>测量延迟时是否应考虑负载？</p>
<ul>
<li>论证可以通过两种方式进行。</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220001724161.png" alt="image-20211220001724161" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220002346064.png" alt="image-20211220002346064"></p>
<h4><span id="building-link-state-packets">Building Link State Packets</span></h4><ul>
<li>链路状态包被构造为发送到其他路由器。 数据包中包含的信息是：<ul>
<li>ID of the sender</li>
<li>sequence number</li>
<li>age</li>
<li>list of neighbors</li>
<li>delay to each neighbor</li>
</ul>
</li>
<li>什么时候建立？<ul>
<li>状态数据包可能会定期构建，或者在某些重要事件发生时构建，例如线路或邻居断开或再次恢复。</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220001940232.png" alt="image-20211220001940232"></p>
<p>(a) A subnet. (b) The link state packets for this subnet.</p>
<h4><span id="distributing-the-link-state-packets-将lsp分组发送给其他的路由器">Distributing The Link State Packets 将LSP分组发送给其他的路由器</span></h4><ul>
<li>基本算法：<ul>
<li>每个状态数据包都包含一个序列号，该序列号随着每个新数据包的发送而递增。</li>
<li>路由器会跟踪它们看到的所有（源路由器、序列）对。</li>
<li>当一个新的链路状态数据包进来时，它会根据已经看到的数据包列表进行检查。<ul>
<li>如果它是新的，它将在除到达的那条线路之外的所有线路上转发（即，flooding）。</li>
<li>如果它是重复的，则将其丢弃—discarded</li>
<li>如果一个序列号低于迄今为止看到的最高序列号的数据包到达，则它被视为已过时而被拒绝。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220002844515.png" alt="image-20211220002844515"></p>
<ul>
<li>基本算法的问题：<ul>
<li>序列号可能会环绕，导致混淆。<ul>
<li>解决方案：使用 32 位序列号。 每秒一个数据包，需要 137 年才能环绕。</li>
</ul>
</li>
<li>如果路由器崩溃，它将失去对自己序列号的跟踪。 如果它再次从序列号 0 开始，新的数据包将被其他路由器拒绝为过时/重复。</li>
<li>如果序列号被破坏并且接收到 65,540 而不是 4（1 位错误），则数据包 5 — 65540 将被拒绝为已过时。</li>
</ul>
</li>
</ul>
<p>00000000000000100<br>10000000000000100</p>
<ul>
<li>路由器崩溃和序列号损坏的解决方案是将age（例如，60）与来自任何路由器的每个状态数据包相关联，并每秒递减一次年龄。</li>
<li>当年龄达到zero时，来自该路由器的信息将被丢弃。</li>
<li><p>通常每 10 秒就会有一个新数据包出现，因此路由器信息仅在路由器关闭时才会超时（或连续丢失 6 个数据包，这种情况不太可能发生）。</p>
</li>
<li><p>对基本算法的一些改进使其更加健壮。</p>
<ul>
<li>当一个状态包进入路由器进行flooding时，它首先被放置在一个保持区（保留区）中等待一小会。</li>
<li>如果来自同一源的另一个状态数据包在传输之前进入，则比较它们的序列号。<ul>
<li>如果它们相等，则丢弃重复项。</li>
<li>如果它们不同，则较旧的将被丢弃。</li>
</ul>
</li>
<li>为了防止线路上的错误，所有状态数据包都被确认。</li>
<li>当一条线路空闲时，保持区被循环扫描以选择要发送的数据包或确认。</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220003427402.png" alt="image-20211220003427402"></p>
<h4><span id="computing-the-new-routes">Computing the New Routes</span></h4><ul>
<li>一组完整的链路状态数据包允许路由器构建整个子网的图。</li>
<li>我们现在可以使用 Dijkstra 算法来计算路由器之间的最短路径。</li>
<li>我们可以在路由器中安装这些信息来引导数据包。 （设置路由表）</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220003603118.png" alt="image-20211220003603118"></p>
<h4><span id="characteristics-of-l-s-routing-algorithm">Characteristics of L-S routing algorithm</span></h4><ul>
<li>好处<ul>
<li>每个路由器的一致性好</li>
<li>收敛性好</li>
<li>适合大网络</li>
</ul>
</li>
<li>缺点<ul>
<li>每个路由器需要更大的存储空间</li>
<li>计算工作量很大</li>
</ul>
</li>
</ul>
<h4><span id="ospf">OSPF</span></h4><ul>
<li>先开最短路径</li>
<li>用图代替真实网络<ul>
<li>每个路由器都是一个节点</li>
<li>计量成本（公制）</li>
<li>可能有几张图</li>
</ul>
</li>
<li>计算最短路径</li>
</ul>
<h3><span id="bgpborder-gateway-protocol边界网关协议">BGP（border gateway protocol）（边界网关协议）</span></h3><ul>
<li>不同的协议 - AS 之间需要 BGP（边界网关协议），因为内部网关协议和外部网关协议的目标不同。</li>
<li>BGP 的定义在 RFCs 1771 到 1774 中。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220003838934.png" alt="image-20211220003838934"></p>
<ul>
<li>外部网关协议路由器的典型策略涉及政治、安全或经济方面的考虑。</li>
<li>鉴于 BGP 对传输流量的特殊兴趣，网络被分为三类之一。<ul>
<li>存根网络 stub networks</li>
<li>多连接网络 multiconnected networks</li>
<li>过境网络 transit networks</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220003953673.png" alt="image-20211220003953673" style="zoom:67%;"></p>
<ul>
<li>BGP 路由器对通过建立 TCP 连接相互通信。</li>
<li>BGP 从根本上说是一种距离矢量协议，但与大多数其他协议（如 RIP）截然不同。<ul>
<li>BGP 路由器会跟踪准确的路径。</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211220004015917.png" alt="image-20211220004015917" style="zoom:67%;"></p>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>软件工程复习L1</title>
    <url>/2021/11/22/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0L1/</url>
    <content><![CDATA[<h1><span id="soft-engineering">Soft engineering</span></h1><h4><span id="定义">定义</span></h4><p>Software engineering is an engineering discipline that is concerned with all aspects of software production from early system specification to maintaining the system after it has gone into use</p>
<p>软件工程是一门工程学科，涉及软件生产的各个方面，从早期的系统规范到系统投入使用后的维护</p>
<h4><span id="engineering-discipline">Engineering discipline</span></h4><ol>
<li>Theories</li>
<li>methods </li>
<li>tools (formal or less formal approach)</li>
</ol>
<h3><span id="software-engineering-solving-problems软件工程三要素">Software Engineering Solving Problems—软件工程三要素</span></h3><ul>
<li>Method<ul>
<li>提供一系列软件开发技术。包括完成开发过程中各方面任务的方法并用某种特殊的语言或图形来描述。<ul>
<li>UML  and other models</li>
<li>Design Pattern</li>
<li>Formal method</li>
<li>Agile Development</li>
</ul>
</li>
</ul>
</li>
<li>Tool<ul>
<li>软件工具为软件方法提供了自动的或半自动的支撑环境。将多种工具集成在一起可构成计算机辅助软件工程（ Computer-Aided Software Engineering  即CASE）的软件开发支撑系统。</li>
</ul>
</li>
<li>Procedure<ul>
<li>软件过程是将软件工程的方法和工具综合起来，进行软件开发活动。<ul>
<li>Analysis (requirement specification)</li>
<li>Design</li>
<li>Implementation</li>
<li>Testing</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3><span id="需要解决的问题">需要解决的问题</span></h3><p>软件产品庞大而复杂</p>
<p>发展需要分析和综合(analysis, synthesis)</p>
<ul>
<li><p>分析：将一个大问题分解成更小的、可以理解的部分</p>
<ul>
<li>抽象是关键</li>
</ul>
</li>
<li>综合：从较小的构建块构建（组合）软件<ul>
<li>组合具有挑战性</li>
</ul>
</li>
</ul>
<p>分析</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211122164158199.png" alt="image-20211122164158199"></p>
<p>综合</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211122164207177.png" alt="image-20211122164207177"></p>
<h3><span id="the-software-life-cycle">The Software Life Cycle</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211122210136246.png" alt="image-20211122210136246"></p>
<h3><span id="software-process">Software Process</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211122210216359.png" alt="image-20211122210216359"></p>
<h4><span id="software-process-model">software process model</span></h4><p>a simplified description of a software process</p>
<ul>
<li>include activities of software process, software products and the role of people involved</li>
</ul>
<h5><span id="software-development-model">software development model</span></h5><ul>
<li>Waterfall approach</li>
<li>Iterative development</li>
<li>Component-based software engineering</li>
</ul>
<h4><span id="development-process-models">Development process models</span></h4><p>four phases</p>
<ul>
<li>analysis (requirement specificiation)</li>
<li>design</li>
<li>implementation</li>
<li>testing</li>
</ul>
<h5><span id="the-waterfall-model">The waterfall model</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211122210959978.png" alt="image-20211122210959978"></p>
<p>a phase cannot be started until the previous phase is completed.</p>
<p>除非前面的阶段结束，否则不会开始新的阶段</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211122211040743.png" alt="image-20211122211040743"></p>
<h5><span id="the-iterative-model">The iterative model</span></h5><p>software is developed in a series of steps. </p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211122211122621.png" alt="image-20211122211122621"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211122211312975.png" alt="image-20211122211312975"></p>
<h2><span id="analysis-phase">ANALYSIS PHASE</span></h2><ul>
<li>开发过程从分析阶段开始</li>
<li>此阶段产生一个规范文档，该文档显示软件将做什么，而不指定如何做</li>
<li>分析阶段可以使用两种不同的方法，这取决于实现阶段是使用过程编程语言还是面向对象语言完成的。</li>
</ul>
<h3><span id="procedure-oriented-analysis">Procedure-oriented analysis</span></h3><ul>
<li>also called structured analysis or classical analysis</li>
<li>是系统实现阶段使用过程语言时使用的分析过程。</li>
</ul>
<h4><span id="data-flow-diagrams">Data flow diagrams</span></h4><p>展示系统中数据的移动</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211122211504868.png" alt="image-20211122211504868"></p>
<h4><span id="entity-relationship-diagrams">Entity-relationship diagrams</span></h4><h4><span id="state-diagrams">State diagrams</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211122212157618.png" alt="image-20211122212157618"></p>
<h3><span id="object-oriented-analysis">Object-oriented analysis</span></h3><ul>
<li>在实现使用面向对象语言时使用的分析过程。</li>
</ul>
<h4><span id="use-case-diagrams">Use case diagrams</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211123191035535.png" alt="image-20211123191035535"></p>
<p>four components: </p>
<ul>
<li>system, use cases, actors and relationships</li>
</ul>
<h4><span id="class-diagrams">Class diagrams</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211123191218465.png" alt="image-20211123191218465"></p>
<h2><span id="design-phase">DESIGN PHASE</span></h2><ul>
<li>定义了系统将如何完成分析阶段定义的内容。</li>
<li>在设计阶段，定义了系统的所有组件。</li>
</ul>
<h3><span id="procedure-oriented-design">Procedure-oriented design</span></h3><ul>
<li>需要设计过程和数据</li>
<li>在面向过程的设计中，整个系统被划分为一组过程或模块。</li>
</ul>
<h4><span id="structure-charts">Structure charts</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211123194112171.png" alt="image-20211123194112171"></p>
<p>在面向过程的设计中，说明模块之间关系的常用工具是结构图。</p>
<h4><span id="modularity-模块化">Modularity 模块化</span></h4><ul>
<li>模块化意味着将一个大型项目分解为易于理解和处理的较小部分。</li>
<li>模块化意味着将一个大任务划分为可以相互通信的小任务</li>
<li>当系统被划分为模块时，有两个主要问题：耦合和内聚（coupling and cohesion）</li>
</ul>
<h5><span id="coupling-耦合">coupling 耦合</span></h5><ul>
<li>耦合是衡量两个模块相互绑定紧密程度的一种方法。</li>
<li><strong>软件系统中模块之间的耦合必须最小化</strong></li>
<li>当两个模块相互依赖时，它们<strong>紧密耦合</strong>—Tightly coupled</li>
<li><strong>松耦合</strong>模块具有一定的依赖性，但它们的互连较弱—Loosely coupled</li>
<li><strong>未耦合</strong>的模块完全没有互连；他们完全没有关系—Uncoupled modules</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211123195056820.png" alt="image-20211123195056820"></p>
<h5><span id="cohesion-内聚">cohesion 内聚</span></h5><ul>
<li>在计算机编程中，内聚性是指模块中的元素属于一起的程度。</li>
<li>从某种意义上说，它是一个类的方法和数据与该类所服务的统一目的或概念之间关系强度的度量。</li>
<li>具有高内聚性的模块往往更可取，因为高内聚性与软件的几个理想特性相关，包括健壮性、可靠性、可重用性和可理解性。</li>
<li><strong>软件系统中模块内的内聚必须最大化。</strong></li>
</ul>
<h3><span id="object-oriented-design">Object-oriented design</span></h3><ul>
<li>在面向对象设计中，设计阶段通过详细说明类的细节继续进行。</li>
<li>一个类由一组变量（属性）和一组方法组成。</li>
<li>面向对象设计阶段列出了这些属性和方法的详细信息</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211124202911781.png" alt="image-20211124202911781"></p>
<h2><span id="implementation-phase">IMPLEMENTATION PHASE</span></h2><p>在这个阶段，程序员在面向过程的设计中为模块编写代码，或者在面向对象的设计中编写程序单元来实现类</p>
<h3><span id="choice-of-language">Choice of language</span></h3><h3><span id="software-quality">Software quality</span></h3><ul>
<li>高质量的软件系统是指满足用户需求、满足组织的操作标准并在为其开发的硬件上高效运行的系统。</li>
<li>如果我们想要实现高质量的软件系统，我们必须能够定义一些质量属性。</li>
</ul>
<h4><span id="software-quality-factors">Software quality factors</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211124203325242.png" alt="image-20211124203325242"></p>
<ul>
<li>操作性</li>
<li>兼容性</li>
<li>可移植性</li>
</ul>
<h2><span id="testing-phase">TESTING PHASE</span></h2><ul>
<li>测试阶段的目标是发现错误，这意味着一个好的测试策略是发现最多错误的策略。</li>
<li>有两种类型的测试：玻璃盒（白盒）和黑盒</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211124203453656.png" alt="image-20211124203453656"></p>
<h3><span id="glass-box-testing">Glass-box testing</span></h3><ul>
<li>玻璃盒测试（或白盒测试）基于了解软件的内部结构。</li>
<li>测试的目标是确定软件的所有组件是否都达到了设计的目的。</li>
<li>玻璃盒测试假设测试人员了解软件的一切。<ul>
<li>在这种情况下，软件就像一个玻璃盒子，盒子里的一切都是可见的。玻璃盒测试由软件工程师或专门团队完成。</li>
</ul>
</li>
</ul>
<h4><span id="basis-path-testing基本路径测试">Basis path testing—基本路径测试</span></h4><p>此方法创建一组测试用例，这些测试用例至少执行软件中的每个语句一次。</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211124204204530.png" alt="image-20211124204204530"></p>
<h3><span id="black-box-testing">Black-box testing</span></h3><ul>
<li>黑盒测试的名字来源于测试软件的概念，它不知道软件内部是什么，也不知道它是如何工作的。换句话说，软件就像一个测试人员看不见的黑匣子。</li>
<li>黑盒测试根据软件应该完成的功能（如输入和输出）测试软件的功能。</li>
</ul>
<h4><span id="exhaustive-testing">Exhaustive testing</span></h4><ul>
<li>最好的黑盒测试方法是测试软件在输入域中的<strong>所有可能值</strong>。</li>
<li>然而，在复杂的软件中，输入域是如此巨大，以至于这样做通常是不切实际的。</li>
</ul>
<h4><span id="random-testing">Random testing</span></h4><ul>
<li>在<strong>随机测试</strong>中，选择输入域中的值子集进行测试。</li>
<li>选择子集的方式必须确保值分布在域输入上，这一点非常重要。</li>
<li>在这种情况下，使用随机数生成器非常有用。</li>
</ul>
<h4><span id="boundary-value-testing">Boundary-value testing</span></h4><ul>
<li>遇到<strong>边界值</strong>时，经常会发生错误。<ul>
<li>例如，如果模块定义其输入之一必须大于或等于100，则测试模块的边界值100非常重要。</li>
</ul>
</li>
<li>如果模块在此边界值处失败，则模块代码中的某些条件（如x）可能会失效≥ 100写为x&gt;100。</li>
</ul>
<h2><span id="documentation">DOCUMENTATION</span></h2><ul>
<li>为了正确使用和有效维护软件，需要文档。</li>
<li>通常，为软件准备三套独立的文档：用户文档、系统文档和技术文档。<ul>
<li>user documentation, system documentation and   technical documentation.</li>
</ul>
</li>
<li>文件编制是一个持续的过程。</li>
</ul>
<h3><span id="user-documentation">User documentation</span></h3><ul>
<li>为了正确运行软件系统，用户需要文档，传统上称为用户指南，它显示了如何一步一步地使用软件。</li>
<li>用户指南通常包含一个教程部分，用于指导用户了解软件的每个功能。<br>一个好的用户指南可以是一个非常强大的营销工具：用户文档在营销中的重要性怎么强调都不过分。</li>
<li>用户指南应该为新手和专家用户编写，一个具有良好用户文档的软件系统肯定会增加销量。</li>
</ul>
<h3><span id="system-documentation">System documentation</span></h3><ul>
<li>系统文档定义了软件本身。</li>
<li>它的编写应该使软件能够由原始开发人员以外的人进行维护和修改。</li>
<li>系统开发的所有四个阶段都应有系统文档。</li>
</ul>
<h3><span id="technical-documentation">Technical documentation</span></h3><ul>
<li>技术文档描述了软件系统的安装和维修。</li>
<li>安装文档定义了软件应如何安装在每台计算机上，例如服务器和客户端。</li>
<li>服务文档定义了在必要时应如何维护和更新系统。</li>
</ul>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>软件工程</category>
      </categories>
  </entry>
  <entry>
    <title>软件工程复习L3</title>
    <url>/2021/12/02/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0L3/</url>
    <content><![CDATA[<h3><span id="requirements-engineering-需求工程">Requirements engineering 需求工程</span></h3><ol>
<li>需求：反映了客户对有助于解决某些问题的系统的需求</li>
<li>需求工程：发现、分析、记录和检查系统服务和约束的过程</li>
</ol>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211202151612933.png" alt="image-20211202151612933"></p>
<h3><span id="the-requirements-process">The Requirements Process</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211202151648375.png" alt="image-20211202151648375"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211202151803745.png" alt="image-20211202151803745"></p>
<p>在实际的开发过程中，获取、分析、建模、编写规约和验证这些需求开发活动不会是线性地、顺序地完成。实际上，这些活动是交叉的、递增的和反复的。</p>
<h3><span id="types-of-requirements">Types of Requirements</span></h3><ul>
<li>Requirements: 在环境域内定义的任何需求，包括系统接口</li>
<li>Specification: 规范仅限于环境和系统域之间的交叉点</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211202152007173.png" alt="image-20211202152007173"></p>
<h3><span id="software-requirements-软件要求">Software requirements 软件要求</span></h3><ul>
<li>用户需求—User requirements<ul>
<li>高级抽象需求—High-level abstract requirements</li>
<li>以自然语言和图表表示的语句，说明系统预期提供的服务以及它必须在哪些约束条件下运行</li>
</ul>
</li>
<li>系统要求—System requirements<ul>
<li>系统应执行的操作的详细说明</li>
<li>详细说明系统的功能、服务和操作限制</li>
<li>应该是准确的</li>
</ul>
</li>
</ul>
<h4><span id="different-kinds-of-software-requirements-for-different-users">Different kinds of software requirements for different users</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211202153519094.png" alt="image-20211202153519094"></p>
<h4><span id="requirement-type">Requirement Type</span></h4><ul>
<li><p>功能要求—Functional requirements</p>
<ul>
<li>系统应提供的服务声明、系统应如何对特定输入做出反应以及系统在特定情况下的行为</li>
</ul>
</li>
<li><p>非功能性需求—Non-functional requirements</p>
<ul>
<li>对系统提供的服务或功能的限制，包括时间限制、开发过程和标准的限制<ul>
<li>timing constraints, constraints on the development process and standards</li>
</ul>
</li>
</ul>
</li>
<li><p>域要求—Domain requirements</p>
<ul>
<li>来自系统的应用领域，并反映该领域的特征和约束    <ul>
<li>application domain of the system</li>
<li>characteristics and constraints of that domain</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5><span id="functional-requirements">Functional requirements</span></h5><ul>
<li><p>描述系统应该做什么</p>
</li>
<li><p>LIBSYS示例</p>
<ul>
<li>用户应能够搜索所有初始数据库集或从中选择子集</li>
</ul>
</li>
<li>完整性—Completeness<ul>
<li>应定义用户所需的所有服务</li>
</ul>
</li>
<li>一致性—Consistency<ul>
<li>需求不应有相互矛盾的定义</li>
</ul>
</li>
</ul>
<h5><span id="non-functional-requirements">Non-functional requirements</span></h5><p>非功能性需求</p>
<ul>
<li>是与系统交付的特定功能不直接相关的需求</li>
<li>可能与紧急系统属性有关，如可靠性、响应时间和存储占用率</li>
<li>未能满足非功能性要求可能意味着整个系统无法使用（飞机系统：可靠性）</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211202180606807.png" alt="image-20211202180606807"></p>
<ul>
<li><p>只要可能，您应该定量地编写非功能性需求，以将其目标转化为定量需求</p>
<ul>
<li>速度：处理事务/秒，用户/事件响应时间</li>
<li>大小：K字节，RAM芯片数</li>
<li>可靠性：平均失效时间</li>
</ul>
</li>
<li><p>如果您可以在需求文档中区分功能性需求和非功能性需求，这将非常有用。实际上，这很难做到</p>
</li>
</ul>
<h3><span id="specification-规范">Specification 规范</span></h3><ul>
<li>需求是用文本文档中的自然语言语句编写的<ul>
<li>缺乏清晰性，难以精确和明确</li>
</ul>
</li>
</ul>
<h4><span id="指导方针">指导方针</span></h4><ul>
<li>发明一种标准格式</li>
<li>始终如一地使用语言</li>
<li>使用文本突出显示来选择需求的关键部分</li>
<li>尽可能避免使用计算机术语</li>
</ul>
<h4><span id="自然语言问题">自然语言问题</span></h4><ul>
<li>自然语言通常用于编写系统需求规范，它可能会造成混乱和难以理解</li>
<li>自然语言理解依赖于规范读者和作者对同一概念使用相同的词语</li>
<li>自然语言需求规范过于灵活</li>
<li>没有简单的方法来模块化自然语言需求</li>
</ul>
<h4><span id="structured-language-specifications">Structured language specifications</span></h4><p>优点</p>
<ul>
<li>保持自然语言的大部分表达性和可理解性</li>
<li>确保规范具有一定程度的一致性</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211202182027889.png" alt="image-20211202182027889"></p>
<h4><span id="interface-specification-接口规范">Interface specification 接口规范</span></h4><p>三种类型的接口</p>
<ul>
<li>程序接口（如API）</li>
<li>数据结构</li>
<li>数据表示（如位的顺序）</li>
</ul>
<h4><span id="the-software-requirements-document-软件要求文档">The software requirements document 软件要求文档</span></h4><ul>
<li><p>或称为软件需求规范（SRS）— Software requirements specification</p>
</li>
<li><p>软件需求规范的读者</p>
<ul>
<li>系统客户</li>
<li>管理者</li>
<li>系统工程师</li>
<li>系统测试工程师</li>
<li>系统维护工程师</li>
</ul>
</li>
<li><p>需求文档的结构</p>
<ul>
<li>前言</li>
<li>介绍</li>
<li>用户需求定义</li>
<li>系统架构</li>
<li>系统需求说明</li>
<li>系统模型</li>
<li>系统演化</li>
<li>附录</li>
<li>指数<br><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211202184429244.png" alt="image-20211202184429244"></li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211202184445826.png" alt="image-20211202184445826"></p>
<h3><span id="modeling-建模">Modeling 建模</span></h3><h4><span id="抽象abstraction">抽象—Abstraction</span></h4><p>抽象有助于控制问题复杂度，抓住问题的本质,获取一般和特殊关系</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211202184522462.png" alt="image-20211202184522462"></p>
<h4><span id="modeling-notations-建模符号">Modeling Notations 建模符号</span></h4><ul>
<li><p>对于建模、记录和沟通决策，使用标准符号(standard notations)是很重要的</p>
</li>
<li><p>建模帮助我们彻底理解需求</p>
</li>
</ul>
<h5><span id="entity-relationship-diagrams">Entity-Relationship Diagrams</span></h5><p>一种用于表示概念模型的流行图形符号范式</p>
<ul>
<li>Entity<ul>
<li>描述为矩形，表示具有公共属性和行为的真实世界对象的集合</li>
</ul>
</li>
<li>Relationship<ul>
<li>描述为两个实体之间的边缘，边缘中的菱形指定关系类型</li>
</ul>
</li>
<li>attribute<ul>
<li>实体上的注释，用于描述与该实体关联的数据或属性</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211202185437375.png" alt="image-20211202185437375"></p>
<h5><span id="event-traces-事件跟踪">Event Traces 事件跟踪</span></h5><ul>
<li><p>真实世界实体之间交换的事件序列的图形描述</p>
<ul>
<li><p>A graphical description of a sequence of events that are exchanged between real-world entities</p>
</li>
<li><p>垂直线(Vertical line)：不同实体的时间线，其名称显示在该行的顶部</p>
</li>
<li><p>水平线(Horizontal line)：围绕该线的两个实体之间的事件或交互</p>
</li>
<li><p>时间是从上到下的</p>
</li>
</ul>
</li>
<li><p>每个图都描述了一个跟踪，表示几种可能的行为之一</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211202185953907.png" alt="image-20211202185953907"></p>
<ul>
<li>Message Sequence Chart<ul>
<li>一种增强的事件跟踪表示法，具有创建和销毁实体、指定操作和计时器以及组成跟踪的功能<ul>
<li>垂直线(Vertical line)表示参与的实体</li>
<li>消息(Message)被描述为从发送实体到接收实体的箭头</li>
<li>动作(Action)被指定为位于实体执行行上的带标签的矩形</li>
<li>条件(Condition)是实体演化中的重要状态，表示为标记的六边形</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211202190202894.png" alt="image-20211202190202894"></p>
<h5><span id="petri-nets">Petri Nets</span></h5><p>一种形式或状态转换(state-transition)符号，用于对并发活动及其交互进行建模</p>
<ul>
<li><p>圆圈(Circle)（地点）代表活动或条件</p>
</li>
<li><p>条形图(Bar)表示转换(transitions)</p>
</li>
<li><p>圆弧(Arcs)将transitions与其输入位置和输出位置连接起来</p>
</li>
<li><p>这些位置由令牌(tokens)填充，这些令牌充当转换的启用条件</p>
</li>
<li><p>可以为每个arc指定一个权重(weight)，该权重指定在触发转换时从arc的输入位置移除多少tokens</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211202190559118.png" alt="image-20211202190559118"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211202191331482.png" alt="image-20211202191331482"></p>
<h4><span id="functions-and-relations">Functions and Relations</span></h4><ul>
<li>形式化方法或途径：基于数学的规范和设计技术</li>
<li>形式化方法将需求或软件行为建模为数学函数或关系的集合<ul>
<li>函数指定系统执行和输出的状态</li>
<li>每当输入值映射多个输出值时，就会使用关系</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211202195756431.png" alt="image-20211202195756431"></p>
<h5><span id="functions-and-relations的示例parnas表">Functions and Relations的示例：Parnas表</span></h5><ul>
<li>列标题和行标题是用于指定案例的谓词</li>
<li>条目“X”在指定条件下可能无效，或者条件组合不可行</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211202191723989.png" alt="image-20211202191723989"></p>
<h4><span id="decision-tables">Decision Tables</span></h4><ul>
<li>它是功能规范的表格表示，将事件和条件映射到适当的响应或操作</li>
<li>如果有n个输入条件，则有2n个可能的输入条件组合</li>
<li>映射到同一组结果的组合可以组合到单个列中</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211202191506177.png" alt="image-20211202191506177"></p>
<h4><span id="decision-trees">Decision Trees</span></h4><ul>
<li>三种类型的“节点”<ul>
<li>决策节点(Decision nodes)-由正方形表示</li>
<li>机会节点(Chance nodes)-由圆表示</li>
<li>终端节点(Terminal nodes)-由三角形表示（可选）</li>
</ul>
</li>
<li>求解该树需要修剪决策节点上除最佳决策外的所有决策，并在机会节点上找到所有可能的自然状态的期望值</li>
<li>从左到右创建树</li>
<li>从右到左求解树</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211202191622969.png" alt="image-20211202191622969"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211202191628263.png" alt="image-20211202191628263"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211202191635538.png" alt="image-20211202191635538"></p>
<h4><span id="logic">Logic</span></h4><ul>
<li><strong>操作符号(operational notation)</strong>是用于描述问题或建议的软件解决方案的情景行为的符号<ul>
<li>基于案例的行为模型</li>
<li>示例：状态机、事件跟踪、数据流图、功能方法</li>
</ul>
</li>
<li><strong>描述性表示(descriptive notation)</strong>法是根据问题的性质或变体来描述问题或建议解决方案的表示法<ul>
<li>示例：逻辑</li>
</ul>
</li>
</ul>
<h2><span id="petri-nets">Petri Nets</span></h2><h4><span id="介绍">介绍</span></h4><ul>
<li>Graphical and Mathematical modeling tools<ul>
<li>图形和数学建模工具</li>
</ul>
</li>
<li>图形工具<ul>
<li>视觉传达辅助</li>
</ul>
</li>
<li>数学工具<ul>
<li>状态方程、代数方程等</li>
</ul>
</li>
<li>并发(concurrent)、异步(asynchronous)、分布式(distributed)、并行(parallel)、非确定性(nondeterministic)和/或随机(stochastic)系统</li>
</ul>
<h3><span id="非正式定义">非正式定义</span></h3><ul>
<li>Petri Nets的图形表示是一个二部图（bipartite graph）</li>
<li><p>有两种节点(node)</p>
<ul>
<li>Places：通常是模型资源(resource)或系统的部分状态 圆形</li>
<li>transitions: 模型状态转换和同步 方形</li>
</ul>
</li>
<li><p>Arcs: 是有向的并且总是连接不同类型的节点</p>
</li>
</ul>
<p>例子</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211203210228697.png" alt="image-20211203210228697"></p>
<h4><span id="state">State</span></h4><ul>
<li>系统的状态是通过用令牌(token)标记位置来建模的</li>
<li>一个地方可以用有限数量（可能为零）的标记来标记</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204101154695.png" alt="image-20211204101154695"></p>
<h4><span id="fire-触发">Fire 触发</span></h4><ul>
<li>转换 t 在某个标记中被称为启用，如果对于从位置 p 到 t 的每条arc，标记中都存在一个不同的标记</li>
<li>启用的转换可以触发并产生新的标记</li>
<li><p>在标记中触发转换 t 是一个原子(atomic)操作</p>
</li>
<li><p>触发转换会导致两件事：</p>
<ul>
<li>对于连接 p 到 t 的每条弧线，从任何位置 p 的标记中减去一个记号</li>
<li>对于连接 t 到 p 的每条弧线，在任何位置 p 的标记上添加一个记号</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204101430144.png" alt="image-20211204101430144"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204103020418.png" alt="image-20211204103020418"></p>
<h4><span id="图形表示">图形表示</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204102920728.png" alt="image-20211204102920728" style="zoom: 80%;"></p>
<h4><span id="nondeterminism-不确定性">Nondeterminism 不确定性</span></h4><ul>
<li>Petri Networks的执行是不确定的<ul>
<li>可以同时启用多个转换，其中任何一个都可以触发</li>
<li>不需要触发 - 它们随意触发，在时间 0 到无穷大之间，或者根本不触发</li>
</ul>
</li>
</ul>
<h4><span id="concurrency-并发">Concurrency 并发</span></h4><p>独立输入允许“并发”触发转换</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204103439584.png" alt="image-20211204103439584" style="zoom:67%;"></p>
<h4><span id="conflict-冲突">Conflict 冲突</span></h4><p>重叠输入使转换发生冲突 — Overlapping inputs put transitions in conflict</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204103604849.png" alt="image-20211204103604849" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204104230851.png" alt="image-20211204104230851" style="zoom: 80%;"></p>
<p>​                                可能激发序列$t1,t3,t5$无限循环，而 $t2,t4,t6$被“饿死”</p>
<p>Solution</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204104641014.png" alt="image-20211204104641014" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204105126996.png" alt="image-20211204105126996"></p>
<h4><span id="mutual-exclusion-互斥">Mutual Exclusion 互斥</span></h4><p>两个子网强制同步</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204103823306.png" alt="image-20211204103823306"></p>
<h4><span id="bounded-buffers-有界缓冲区">Bounded Buffers 有界缓冲区</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204103948044.png" alt="image-20211204103948044"></p>
<h4><span id="liveness-and-deadlock-活性与死锁">Liveness and Deadlock 活性与死锁</span></h4><ul>
<li>活力：<ul>
<li>如果一个转换永远不能触发，它就是死锁的。</li>
<li>如果转换永远不会死锁，它就是live的。</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204104050868.png" alt="image-20211204104050868"></p>
<h4><span id="时间-petri-network">时间 Petri Network</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204105207232.png" alt="image-20211204105207232"></p>
<ul>
<li>时间Petri网的思想：即使一个变迁处于使能状态，它也必须经过$t_{min}$之后才能被触发，且必须在$t_{max}$之前。</li>
</ul>
<h4><span id="fork-and-join">Fork and Join</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204105304807.png" alt="image-20211204105304807"></p>
<h4><span id="iteration-1-or-more-times">Iteration: 1 or more times</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204105317302.png" alt="image-20211204105317302"></p>
<h4><span id="exercise">Exercise</span></h4><h5><span id="一个交通灯">一个交通灯</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204105351123.png" alt="image-20211204105351123"></p>
<h5><span id="example-single-traffic-light">Example: Single traffic light</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204105428616.png" alt="image-20211204105428616" style="zoom:67%;"></p>
<h5><span id="两盏交通灯">两盏交通灯</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204134005268.png" alt="image-20211204134005268" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204134158854.png" alt="image-20211204134158854"></p>
<p>使用互斥的原理</p>
<h5><span id="restaurant">Restaurant</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204134708357.png" alt="image-20211204134708357"></p>
<h5><span id="restaurant-two-scenarios">Restaurant (Two Scenarios)</span></h5><ul>
<li>Scenario 1:<ul>
<li>Waiter takes order from customer 1; serves customer 1; takes order from customer 2; serves customer 2.</li>
</ul>
</li>
<li>Scenario 2:<ul>
<li>Waiter takes order from customer 1; takes order from customer 2; serves customer 2; serves customer 1.</li>
</ul>
</li>
</ul>
<h3><span id="formal-definition">Formal Definition</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204135504618.png" alt="image-20211204135504618"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204135455138.png" alt="image-20211204135455138"></p>
<h4><span id="related-models">Related Models</span></h4><h5><span id="finite-state-processes">Finite State Processes</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204135729080.png" alt="image-20211204135729080" style="zoom:67%;"></p>
<p>Finite State Nets</p>
<ul>
<li>Some Petri nets can be modelled by FSPs</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204135753385.png" alt="image-20211204135753385" style="zoom:67%;"></p>
<h4><span id="implementing-petri">Implementing Petri</span></h4><ul>
<li>我们可以以集中或分散的方式实现 Petri 网结构<ul>
<li>集中—Centralized<ul>
<li>单个“网络管理器”监视网络的当前状态，并触发启用的转换。</li>
</ul>
</li>
<li>分散—Decentralized<ul>
<li>Transitions 是进程，places 是共享资源，transitions 竞争获取令牌。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5><span id="centralized-schemes">Centralized schemes</span></h5><p>在一种可能的集中式方案中，管理器选择并触发启用的转换。</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204140100281.png" alt="image-20211204140100281" style="zoom:67%;"></p>
<p>可以并行触发并发启用的转换。</p>
<h5><span id="decentralized-schemes">Decentralized schemes</span></h5><p>转换是过程，令牌是地方持有的资源</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204140207126.png" alt="image-20211204140207126"></p>
<h4><span id="role-of-a-token">Role of a token</span></h4><p>token可以起到以下作用：</p>
<ul>
<li>物理对象，例如产品、零件、药物、人；</li>
<li>信息对象，例如消息、信号、报告；</li>
<li>对象的集合，例如装有产品的卡车、装有零件的仓库或地址文件；</li>
<li>状态指示符，例如进程所处状态的指示符，或对象状态的指示符；</li>
<li>条件指示符：令牌的存在表明是否满足某个条件。</li>
<li>一种通信媒介，如电话线、中间人或通信网络；</li>
<li>缓冲区：例如，仓库、队列或邮筒；</li>
<li>地理位置，例如仓库、办公室或医院中的某个地方；</li>
<li>可能的状态或状态条件：例如，电梯所在的楼层，或有专家可用的条件。</li>
</ul>
<h4><span id="role-of-a-transition">Role of a transition</span></h4><ul>
<li>事件：例如，开始手术、患者死亡、季节变化或交通灯从红色变为绿色；</li>
<li>对象的转换，例如调整产品、更新数据库或更新文档；</li>
<li>对象的运输：例如，运输货物或发送文件。</li>
</ul>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>软件工程</category>
      </categories>
  </entry>
  <entry>
    <title>软件工程复习L2</title>
    <url>/2021/11/24/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0L2/</url>
    <content><![CDATA[<h2><span id="软件工程过程和软件生命期">软件工程过程和软件生命期</span></h2><h3><span id="软件生命期life-cycle">软件生命期（Life cycle)</span></h3><p> 一个软件从定义、开发、使用和维护，直到最终被废弃，所经历的生存过程称为软件生存期或叫生命期。</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211126002105214.png" alt="image-20211126002105214"></p>
<h3><span id="软件过程模型software-process-models">软件过程模型—Software process models</span></h3><ul>
<li>是软件过程的抽象表示</li>
<li>三种过程模型<ul>
<li>瀑布模型—The waterfall model<ul>
<li>规范、开发、验证和演变的过程活动被视为单独的过程阶段</li>
</ul>
</li>
<li>进化发展—Evolutionary development<ul>
<li>交叉规范、开发和验证活动</li>
</ul>
</li>
<li>基于组件的软件工程—Component-based software engineering<ul>
<li>基于多个可重用组件的存在</li>
<li>集成这些组件</li>
</ul>
</li>
</ul>
</li>
<li>为过程建模的原因<ul>
<li>形成共识</li>
<li>找到并评估实现过程目标的适当活动</li>
<li>针对将要使用的特定情况定制通用流程</li>
</ul>
</li>
</ul>
<h3><span id="瀑布模型waterfall-model">瀑布模型—Waterfall model</span></h3><ul>
<li>瀑布模型中没有迭代</li>
<li>大多数软件开发应用了大量的迭代</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211126002630359.png" alt="image-20211126002630359"></p>
<h4><span id="缺点">缺点</span></h4><ul>
<li>不提供如何在开发期间处理产品和活动变更的指导（假设需求可以冻结）</li>
<li>将软件开发视为制造过程而不是创造性过程</li>
<li>不存在导致创建最终产品的迭代活动</li>
<li>在最终产品之前需要等待很长时间</li>
</ul>
<h4><span id="原型">原型</span></h4><ul>
<li>原型是部分开发的产品</li>
<li>原型设计有帮助<ul>
<li>开发人员评估替代设计策略（设计原型）</li>
<li>用户了解系统将是什么样子（用户界面原型）</li>
</ul>
</li>
<li>原型设计对于验证和确认很有用</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211126004128301.png" alt="image-20211126004128301"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211201162353533.png" alt="image-20211201162353533"></p>
<h4><span id="v-model">V Model</span></h4><ul>
<li>是瀑布模型的一种变体</li>
<li>使用<strong>单元测试</strong>来验证程序设计—unit testing</li>
<li>使用<strong>集成测试</strong>验证体系结构（系统）设计—integration testing</li>
<li>使用<strong>验收测试</strong>来验证需求—acceptance testing</li>
<li>如果在验证和确认过程中发现问题，在重新实施右侧测试之前，可以重新执行V的左侧</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211201162851514.png" alt="image-20211201162851514"></p>
<h3><span id="evolutionary-development">Evolutionary development</span></h3><ul>
<li>定义：开发一个初始实现，将其公开给用户评论，并通过多个版本对其进行优化，直到开发出一个合适的系统</li>
<li>原型设计的两种基本类型<ul>
<li>探索性开发—Exploratory development</li>
<li>一次性原型—Throwaway prototyping</li>
</ul>
</li>
<li>优点<ul>
<li>规范可以增量开发</li>
<li>是开发中小型系统的好方法</li>
</ul>
</li>
</ul>
<p>规范可以增量开发</p>
<p>是开发中小型系统的好方法</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211201163842767.png" alt="image-20211201163842767"></p>
<h4><span id="incremental-development">Incremental development</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211201164009981.png" alt="image-20211201164009981"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211201164018137.png" alt="image-20211201164018137"></p>
<p>优点：</p>
<ul>
<li>客户不必等到整个系统交付后才能从中获得价值</li>
<li>客户可以使用早期的增量作为原型，并获得经验，为以后的系统增量需求提供信息</li>
<li>整体项目失败的风险较低</li>
<li>大多数重要的系统服务不可避免地会受到最多的测试</li>
</ul>
<p>增量和迭代的区别：Increments and Iterations</p>
<ul>
<li>增量开发：从小型功能子系统开始，并在每个新版本中添加功能</li>
<li>迭代开发：从整个系统开始，然后在每个新版本中更改每个子系统的功能</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211201164231530.png" alt="image-20211201164231530"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211201164648550.png" alt="image-20211201164648550"></p>
<h4><span id="spiral-development">Spiral development</span></h4><ul>
<li><p>这个过程被表示为一个螺旋</p>
</li>
<li><p>螺旋中的每个循环表示软件过程的一个阶段</p>
</li>
<li><p>螺旋中的每个环路被分成四个扇区</p>
<ul>
<li>目标设定—Objective setting</li>
<li>风险评估—Risk assessment</li>
<li>开发和验证—Development and validation</li>
<li>计划—Planning</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211201165000518.png" alt="image-20211201165000518"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211201165219030.png" alt="image-20211201165219030"></p>
<h3><span id="component-based-software-engineeringcbse">Component-based software engineering—CBSE</span></h3><p>软件重用</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211201165248953.png" alt="image-20211201165248953"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211201165314227.png" alt="image-20211201165314227"></p>
<h3><span id="other-process-models">Other Process Models</span></h3><p>Relies on Formal Method (形式化方法) </p>
<h4><span id="operational-specification-model">Operational Specification Model</span></h4><p>在开发过程的早期执行（检查）需求并评估其影响</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211201165606271.png" alt="image-20211201165606271"></p>
<h4><span id="transformational-model">Transformational Model</span></h4><ul>
<li>较少的主要发展步骤</li>
<li>应用一系列转换将规范更改为可交付系统</li>
<li>Relies on formalism—基于形式</li>
<li>需要正式规范（允许转换）</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211201165738326.png" alt="image-20211201165738326"></p>
<h3><span id="过程活动process-activities">过程活动—Process activities</span></h3><h4><span id="software-specification">Software specification</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211201165837218.png" alt="image-20211201165837218"></p>
<h4><span id="software-design-and-implementation">Software design and implementation</span></h4><ul>
<li>软件设计是对要实现的软件结构、作为系统一部分的数据、系统组件之间的接口以及有时使用的算法的描述</li>
<li>设计过程</li>
</ul>
<h5><span id="the-software-design-process">The software design process</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211201170057439.png" alt="image-20211201170057439"></p>
<h5><span id="software-implementation">Software implementation</span></h5><p>软件开发</p>
<ul>
<li><p>从系统设计过程中自然遵循</p>
</li>
<li><p>CASE工具可用于从设计生成框架程序，包括定义和实现接口的代码</p>
</li>
<li><p>编程是一项个人活动，没有一般流程可遵循</p>
</li>
</ul>
<h5><span id="the-debugging-process">The debugging process</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211201170130441.png" alt="image-20211201170130441"></p>
<h4><span id="software-validation">Software validation</span></h4><ul>
<li><p>验证和确认（V&amp;V）旨在表明系统符合其规范并满足系统客户的要求。</p>
</li>
<li><p>包括检查和审查流程和系统测试。</p>
<ul>
<li>checking and review processes and system testing.</li>
</ul>
</li>
<li><p>系统测试涉及使用从系统要处理的实际数据的规范派生的测试用例来执行系统。</p>
<ul>
<li>test cases</li>
</ul>
</li>
</ul>
<h5><span id="the-testing-process">The testing process</span></h5><p>  <img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211201201749444.png" alt="image-20211201201749444"></p>
<h5><span id="system-testing">System testing</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211201202716375.png" alt="image-20211201202716375"></p>
<h5><span id="system-evolution">System evolution</span></h5><p>软件优化（软件维护）的成本可能比软件开发要高得多</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211201202851419.png" alt="image-20211201202851419"></p>
<h4><span id="computer-aided-software-engineering-case">Computer-Aided software engineering (CASE)</span></h4><ul>
<li><p>计算机辅助软件工程（CASE）</p>
</li>
<li><p>包括设计编辑器、数据字典、编译器、调试器、系统构建工具等</p>
<ul>
<li><p>活动的示例可以使用CASE实现自动化：</p>
</li>
<li><p>图形系统模型的发展</p>
</li>
<li><p>使用数据字典理解设计</p>
</li>
<li><p>从用户创建的图形界面描述生成用户界面</p>
</li>
<li><p>通过提供有关正在执行的程序的信息进行程序调试</p>
</li>
<li><p>自动将程序从编程语言的旧版本转换为更新版本</p>
</li>
</ul>
</li>
</ul>
<h5><span id="case整合">CASE整合</span></h5><ul>
<li>Tools<ul>
<li>支持单个流程任务，如设计一致性检查、文本编辑等。</li>
</ul>
</li>
<li>Workbenches<ul>
<li>支持流程阶段，如规范或设计，通常包括许多集成工具。</li>
</ul>
</li>
<li>Environments<ul>
<li>支持整个软件过程的全部或大部分。通常包括几个集成工作台。</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211202145430105.png" alt="image-20211202145430105"></p>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>软件工程</category>
      </categories>
  </entry>
  <entry>
    <title>软件工程复习L5</title>
    <url>/2021/12/06/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0L5/</url>
    <content><![CDATA[<ul>
<li>Software Design是后续开发步骤及软件维护工作的基础。</li>
<li>如果没有设计，只能建立一个不稳定的系统结构</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211206084922046.png" alt="image-20211206084922046" style="zoom: 50%;"></p>
<h2><span id="the-design-process">The Design Process</span></h2><ul>
<li>设计是找出如何实现所有客户要求的创造性过程； 由此产生的计划也称为设计</li>
<li>早期设计决策针对系统架构(system’s architecture)</li>
<li>后来的设计决策解决了如何实现各个单元(individual units)</li>
</ul>
<h3><span id="design-is-a-creative-process">Design is a Creative Process</span></h3><ul>
<li>利用现有解决方案的多种方法<ul>
<li>克隆(Cloning)：完全借用设计/代码，稍作调整</li>
<li>参考模型(Reference models)：建议如何分解系统的通用架构</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211206140607945.png" alt="image-20211206140607945" style="zoom:67%;"></p>
<h3><span id="design-process-model-设计过程模型">Design Process Model 设计过程模型</span></h3><ul>
<li>设计软件系统是一个迭代过程(iterative process)</li>
<li>最终的结果是软件架构文档(software architecture document)</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211206140656325.png" alt="image-20211206140656325"></p>
<h4><span id="the-role-of-the-architect">The Role of the Architect</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211206140747286.png" alt="image-20211206140747286"></p>
<h3><span id="decomposition-and-views-分解和视图">Decomposition and Views 分解和视图</span></h3><ul>
<li>系统关键元素的高级描述</li>
<li>创建具有越来越多细节的信息层次(hierarchy)结构</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211206141005309.png" alt="image-20211206141005309"></p>
<h4><span id="popular-design-methods">Popular Design Methods</span></h4><ul>
<li>一些设计问题没有现成的解决方案<ul>
<li>设计师必须分解以隔离关键问题</li>
</ul>
</li>
<li>一些流行的设计方法：<ul>
<li>功能分解—Functional decomposition</li>
<li>面向数据的分解—Data-oriented decomposition</li>
<li>面向过程的分解—Process-oriented decomposition</li>
<li>面向事件的分解—Event-oriented decomposition</li>
<li>面向对象的设计—Object-oriented design</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211206141515894.png" alt="image-20211206141515894"></p>
<h3><span id="architectural-design-结构设计">Architectural design 结构设计</span></h3><ul>
<li>识别子系统(sub-systems)并建立子系统控制和通信的框架(framework)</li>
<li>是设计过程的<strong>第一阶段</strong></li>
</ul>
<h4><span id="architectural-styles-and-strategies">Architectural Styles and Strategies</span></h4><p>Pipes-and-Filter</p>
<ul>
<li><p>该系统有用于输入和输出的数据流（管道）和数据的转换（过滤器）</p>
</li>
<li><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211206141800681.png" alt="image-20211206141800681" style="zoom:50%;"></p>
</li>
<li><p>几个重要的属性</p>
<ul>
<li>设计者可以将整个系统对输入和输出的影响理解为滤波器的组成</li>
<li>过滤器可以很容易地在其他系统上重复使用</li>
<li>系统进化很简单</li>
<li>允许并发执行过滤器</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>不适合处理交互式应用程序</li>
</ul>
</li>
<li><p>数据流模型（Data-flow model）</p>
</li>
<li><p>例子：发票处理系统的流水线模型</p>
<ul>
<li><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211206154848321.png" alt="image-20211206154848321"></li>
</ul>
</li>
</ul>
<p>Client-Server</p>
<ul>
<li>两种类型的组件：<ul>
<li>服务器组件提供服务</li>
<li>客户端使用请求/回复协议访问它们</li>
</ul>
</li>
</ul>
<p>​    <img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211206200511889.png" alt="image-20211206200511889"></p>
<ul>
<li><p>该模型的主要组成部分</p>
<ul>
<li>一组服务器(servers)</li>
<li>一组客户(clients)</li>
<li>一个网络(network)</li>
</ul>
</li>
<li><p>例子</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211206155214036.png" alt="image-20211206155214036" style="zoom: 50%;"></p>
</li>
</ul>
<p>Peer-to-Peer (P2P)</p>
<ul>
<li>每个组件都充当自己的进程，并充当其他对等组件的客户端和服务器(both a client and a server)。</li>
<li>任何组件都可以向任何其他对等组件发起请求(request)。</li>
<li>特征<ul>
<li>扩大规模—Scale up well</li>
<li>增加系统容量—Increased system capabilities</li>
<li>高度容忍失败—Highly tolerant of failures</li>
</ul>
</li>
<li><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211206155428970.png" alt="image-20211206155428970"></li>
</ul>
<p>Publish-Subscribe</p>
<ul>
<li>组件通过广播(broadcasting)和响应事件(reacting)进行交互<ul>
<li>组件通过订阅(subscribe)事件来表达对事件的兴趣</li>
<li>当另一个组件宣布（发布）该事件发生时，订阅组件会收到通知</li>
</ul>
</li>
<li><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211206160051791.png" alt="image-20211206160051791" style="zoom:50%;"></li>
</ul>
<p>Repositories</p>
<ul>
<li>两个组件<ul>
<li>中央数据存储—central data store</li>
<li>对其进行操作以存储、检索和更新信息的组件的集合—store, retrieve and update information</li>
</ul>
</li>
<li>挑战在于决定组件将如何交互<ul>
<li>A traditional database：事务触发流程执行</li>
<li>A blackboard：中央存储控制触发过程</li>
</ul>
</li>
<li><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211206184555459.png" alt="image-20211206184555459" style="zoom:67%;"></li>
<li>优点：开放(openness)<ul>
<li>数据表示可供各种程序员（供应商）使用，因此他们可以构建访问存储库的工具<br>但也有一个缺点：数据格式必须是所有组件都可以接受的</li>
<li><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211206184653363.png" alt="image-20211206184653363"></li>
</ul>
</li>
<li>黑板系统<ul>
<li><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211206184816652.png" alt="image-20211206184816652"></li>
</ul>
</li>
<li>专家系统<ul>
<li><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211206184914109.png" alt="image-20211206184914109"></li>
</ul>
</li>
</ul>
<p>Layering</p>
<ul>
<li>层是分层的(hierarchical)<ul>
<li>每一层都为其外部提供服务，并充当其内部层的客户</li>
</ul>
</li>
<li>好处<ul>
<li>高度抽象—High levels of abstraction</li>
<li>添加和修改图层相对容易—add and modify a layer</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>构建系统层并不总是那么容易</li>
<li>系统性能可能会受到层间额外协调的影响—extra coordination</li>
</ul>
</li>
<li><p>有时称为抽象机器模型(abstract machine model)</p>
</li>
<li><p>将系统组织成层</p>
</li>
<li><p>版本管理系统的分层模型</p>
</li>
<li><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211206185213510.png" alt="image-20211206185213510" style="zoom:67%;"></li>
<li><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211206185654588.png" alt="image-20211206185654588" style="zoom:50%;"></li>
<li><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211206185734582.png" alt="image-20211206185734582" style="zoom:67%;"></p>
</li>
<li><p>Combining Architectural Styles</p>
<ul>
<li><p>实际的软件架构很少基于纯粹的一种风格</p>
</li>
<li><p>建筑风格可以通过多种方式组合</p>
</li>
<li><p>在不同的层使用不同的样式</p>
</li>
<li><p>使用混合样式对不同的组件或交互类型进行建模</p>
</li>
<li><p>如果架构表示为模型的集合，则必须创建文档以显示模型之间的关系</p>
</li>
<li><p>例子</p>
<ul>
<li><p>Combination of Publish-Subscribe, Client-Server, and Repository Architecture Styles</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211206190044008.png" alt="image-20211206190044008"></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4><span id="control-styles">Control styles</span></h4><ul>
<li>必须控制子系统(Sub-system)</li>
<li>两种通用控件样式<ul>
<li>集中控制 Centralized control<ul>
<li>一个子系统全面负责控制和启动和停止其他子系统</li>
</ul>
</li>
<li>基于事件的控制 Event-based control<ul>
<li>每个子系统都可以响应外部生成的事件</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5><span id="centralized-control-集中控制">Centralized control 集中控制</span></h5><ul>
<li>集中控制模式 Centralized control model<ul>
<li>一个子系统被指定为系统控制器，负责管理其他子系统的执行</li>
</ul>
</li>
<li><p>受控子系统是顺序执行还是并行执行 (sequentially or in parallel)</p>
<ul>
<li>调用返回模型(call-return model)（自顶向下的子程序模型）</li>
<li>管理器模型(manager model)，（一个系统组件被指定为系统管理器并控制其他系统进程的启动、停止和协调）</li>
</ul>
</li>
<li><p>Call-return model</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211206191155914.png" alt="image-20211206191155914"></p>
</li>
<li><p>Real-time system control</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211206191222153.png" alt="image-20211206191222153"></p>
</li>
</ul>
<h5><span id="event-driven-systems">Event-driven systems</span></h5><ul>
<li>Event 事件<ul>
<li>可能是一个信号，可以从菜单中获取一系列值或命令输入</li>
</ul>
</li>
<li>两种事件驱动的控制模型<ul>
<li>广播模型—Broadcast models</li>
<li>中断驱动模型—Interrupt-driven models</li>
</ul>
</li>
</ul>
<p>Broadcast model</p>
<ul>
<li>子系统注册对特定事件的兴趣</li>
<li>所有事件都可以广播到所有子系统</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211206191520177.png" alt="image-20211206191520177"></p>
<p>Interrupt-driven control</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211206191540061.png" alt="image-20211206191540061" style="zoom:67%;"></p>
<h4><span id="design-principlesmodularity-模块化">Design Principles—Modularity 模块化</span></h4><ul>
<li>模块化是将系统的各个不相关方面分开的原则，以便可以单独研究每个方面<ul>
<li>每个模块都将易于理解和开发</li>
<li>更容易定位故障（因为每个故障的可疑模块较少）</li>
<li>更容易更改系统（因为对一个模块的更改影响相对较少的其他模块</li>
</ul>
</li>
<li>为了确定设计分离关注点的程度，我们使用两个衡量模块独立性的概念：耦合和内聚</li>
</ul>
<h5><span id="coupling-耦合">Coupling 耦合</span></h5><ol>
<li><p>tightly coupled 紧密耦合</p>
<ul>
<li>两个模块在彼此高度依赖时紧密耦合</li>
</ul>
</li>
<li><p>loosely coupled 松散耦合</p>
<ul>
<li>松散耦合的模块有一定的依赖性，但它们的互连性很弱</li>
</ul>
</li>
<li><p>uncoupled 未耦合</p>
<ul>
<li>未耦合的模块根本没有互连； 他们完全不相关</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211206191958282.png" alt="image-20211206191958282"></p>
</li>
</ol>
<h5><span id="cohesion-内聚">Cohesion 内聚</span></h5><p>内聚是指模块内部元素（例如，数据、函数、内部模块）内部和之间的依赖关系</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211206192438081.png" alt="image-20211206192438081"></p>
<h4><span id="design-principles">Design Principles</span></h4><ul>
<li><p>使用图表进行两种设计</p>
<ul>
<li>扇入(fan-in)是指使用特定软件单元的单元数</li>
<li>扇出(fan-out)是指特定软件单元使用的单元数</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211206193733464.png" alt="image-20211206193733464"></p>
</li>
<li><p>扇出 = 一个模块直接调用\控制的模块数。      3 &lt;= fan-out &lt;=9</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211206194049295.png" alt="image-20211206194049295" style="zoom:67%;"></p>
<ul>
<li>扇入 = 直接调用该模块的模块数</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211206194230477.png" alt="image-20211206194230477" style="zoom:67%;"></p>
<ul>
<li><p>在不破坏独立性的前提下，fan-in 大的比较好。</p>
</li>
<li><p>选择适当的深度、宽度、扇出和扇入 </p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211206194429083.png" alt="image-20211206194429083"></p>
</li>
</ul>
<p>深度 = 分层的层数。过大表示分工过细。</p>
<p>宽度 = 同一层上模块数的最大值。过大表示系统复杂度大。</p>
<ul>
<li>我们可以尝试使用称为sandwiching的技术打破使用图中的循环<ul>
<li>循环的一个单元被分解成两个单元，这样新单元之一就没有依赖关系了</li>
<li>可以多次应用夹层，以打破紧耦合单元或长依赖链中的相互依赖关系</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211206194724078.png" alt="image-20211206194724078"></p>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>软件工程</category>
      </categories>
  </entry>
  <entry>
    <title>软件工程复习L6</title>
    <url>/2021/12/07/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0L6/</url>
    <content><![CDATA[<h3><span id="overview-of-patterns">Overview of Patterns</span></h3><ul>
<li><p>针对特定上下文中出现的常见软件问题提出解决方案</p>
</li>
<li><p>捕获软件参与者之间的重复结构和动态，以促进成功设计的重用</p>
</li>
<li><p>帮助解决关键的软件设计力量</p>
<p>Flexibility 灵活性<br>Extensibility 可扩展性<br>Dependability 可靠性<br>Predictability 可预测性<br>Scalability 可延展性<br>Efficiency 效率</p>
</li>
<li><p>一般编纂设计策略、约束和“最佳实践”的专业知识</p>
</li>
<li><p>可以在类中编码并按原样重用的数据结构（即链表、哈希表）</p>
</li>
<li><p>复杂的特定领域设计（针对整个应用程序或子系统）</p>
</li>
<li><p>如果它们不是熟悉的数据结构或复杂的特定领域子系统，它们是什么？</p>
<ul>
<li>为解决特定上下文中的一般设计问题而定制的通信对象和类的描述</li>
</ul>
</li>
</ul>
<h3><span id="the-gang-of-four-gof">The “gang of four” (GoF)</span></h3><p>设计模式书目录 23 种不同的模式</p>
<ul>
<li>不同类别问题的解决方案，在 C++ 和 Smalltalk 中</li>
<li>问题及解决方案适用范围广，多人使用多年</li>
<li>模式建议在分析、设计和编程中重用的机会</li>
<li>GOF 以结构化格式呈现每个模式</li>
</ul>
<h3><span id="elements-of-design-patterns">Elements of Design Patterns</span></h3><p>设计模式有4个基本要素：</p>
<ul>
<li>图案名称：增加设计师的词汇量 — Pattern</li>
<li>问题：意图、上下文、何时应用 — Problem</li>
<li>解决方案：类UML结构，抽象代码 — Solution</li>
<li>结果：结果和权衡 — Consequences</li>
</ul>
<h3><span id="three-types-of-gof-patterns">Three Types of GoF Patterns</span></h3><ul>
<li>创作模式： Creational Patterns<ul>
<li>处理初始化和配置对象</li>
</ul>
</li>
<li>结构模式： Structural Patterns<ul>
<li>类或对象的组合</li>
<li>解耦接口和类的实现</li>
</ul>
</li>
<li>行为模式： Behavioral Patterns<ul>
<li>处理对象社会之间的动态交互    </li>
<li>他们如何分配责任</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211207200924741.png" alt="image-20211207200924741"></p>
<h4><span id="structural-patterns">Structural patterns</span></h4><ul>
<li>组装对象以实现新功能</li>
<li>示例：代理 Proxy<ul>
<li>代理充当另一个对象的方便代理或占位符。</li>
<li>例子？<ul>
<li>Remote Proxy 远程代理：不同地址空间中对象的本地代表</li>
<li>Virtual Proxy 虚拟代理：代表应该按需加载的大对象</li>
<li>Protected Proxy 受保护代理 ：保护对原始对象的访问</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5><span id="proxy-pattern-structure">Proxy Pattern - Structure</span></h5><ul>
<li>意图<ul>
<li>为另一个对象提供代理或占位符以控制对其的访问。</li>
</ul>
</li>
<li>结构</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211207201300893.png" alt="image-20211207201300893"></p>
<h5><span id="type-structural-patterns">Type:  Structural Patterns</span></h5><ul>
<li>适配器：将类的接口转换为客户期望的接口</li>
<li>桥：将抽象与许多可能的实现联系起来</li>
<li>合成的：将部分-整体层次结构表示为树结构</li>
<li>装饰器：动态地为对象附加额外的责任</li>
<li>正面：简化子系统的接口</li>
<li>蝇量级：高效共享多个细粒度对象</li>
<li>代理：为另一个对象提供代理或占位符以控制对其的访问</li>
</ul>
<h4><span id="adapter-pattern">Adapter pattern</span></h4><ul>
<li>问题：如何解决不兼容的接口(incompatible interfaces)或为具有不同接口的相似组件提供稳定的接口？</li>
<li>解决方案：通过一个中间适配器将原来的接口组件转换成另一个。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211207201937993.png" alt="image-20211207201937993"></p>
<h5><span id="using-an-adapter-adapt-postsale-request-to-soap-xml-interface">Using an Adapter: adapt postSale request to SOAP XML interface</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211207202019828.png" alt="image-20211207202019828"></p>
<h5><span id="adapter-pattern-uses-inheritance">Adapter pattern uses inheritance</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211207202032548.png" alt="image-20211207202032548"></p>
<h5><span id="object-adapter">Object Adapter</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211207202247802.png" alt="image-20211207202247802"></p>
<h5><span id="优点">优点</span></h5><ul>
<li>减少与实现特定细节的耦合—Reduces coupling</li>
<li>多态性和间接性揭示了提供的基本行为 — Polymorphism and indirection</li>
<li>在类图中包含新类中的设计模式名称（例如，TaxMasterAdapter），代码根据已知的设计模式与其他开发人员进行交流</li>
</ul>
<h4><span id="composite-pattern">Composite Pattern</span></h4><p>Composite 允许客户端统一处理单个对象和对象的组合。</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211207202714983.png" alt="image-20211207202714983" style="zoom:80%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211207202726486.png" alt="image-20211207202726486"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211207202732760.png" alt="image-20211207202732760"></p>
<h4><span id="facade-pattern-外观图案">Facade Pattern 外观图案</span></h4><ul>
<li>为子系统中的一组对象提供统一的接口。</li>
<li>Facades 允许我们提供一个封闭的架构</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211207202810628.png" alt="image-20211207202810628"></p>
<h5><span id="structure-of-the-facade-pattern">Structure of the Facade Pattern</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211207203128488.png" alt="image-20211207203128488"></p>
<h3><span id="type-creational-patterns">Type:  Creational Patterns</span></h3><ul>
<li>单例：保证访问单个（唯一）实例 — Singleton</li>
<li>简单工厂：创建专门的、复杂的对象 — Simple Factory</li>
<li>抽象工厂：打造专业化工厂家族 — Abstract Factory</li>
<li>工厂方法：定义一个用于创建对象的接口，但让子类决定实例化哪个类 — Factory Method</li>
<li>Builder：一步一步构造一个复杂的对象 </li>
<li>原型：从原型克隆新实例 — Prototype</li>
<li>延迟初始化：延迟昂贵的创建，直到需要它 — Lazy initialization</li>
</ul>
<h4><span id="singleton-pattern">Singleton pattern</span></h4><ul>
<li>一个只有实例并提供全局访问点的类</li>
<li>全局变量可能很危险！ （副作用，打破信息隐藏）</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211207203328425.png" alt="image-20211207203328425"></p>
<h4><span id="simple-factory-pattern">Simple Factory pattern</span></h4><ul>
<li>背景/问题 Context/Problem<ul>
<li>当有特殊考虑时，谁应该负责创建对象，例如复杂的逻辑，希望分离创建责任以获得更好的内聚性等等</li>
</ul>
</li>
<li>解决方案 Solution<ul>
<li>创建一个 Pure Fabrication 来处理创建</li>
</ul>
</li>
</ul>
<h5><span id="how-does-simple-factory-work">How does Simple Factory work</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211207214553512.png" alt="image-20211207214553512"></p>
<h5><span id="factory-can-create-different-objects">Factory can create different objects</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211207215159520.png" alt="image-20211207215159520"></p>
<h4><span id="factory-pattern">Factory  Pattern</span></h4><ul>
<li>意图：<ul>
<li>定义用于创建对象的接口，但让子类决定实例化哪个类。</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211207215758961.png" alt="image-20211207215758961"></p>
<h5><span id="abstract-factory-pattern">Abstract Factory Pattern</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211207215807812.png" alt="image-20211207215807812"></p>
<p>example</p>
<p>The Client remains blissfully unaware of the various concrete classes in this example. </p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211207215830944.png" alt="image-20211207215830944"></p>
<p>Advantages 优点</p>
<ul>
<li>将复杂创建的职责分离为内聚的辅助类</li>
<li>隐藏复杂的创建逻辑，例如从文件初始化</li>
<li>处理内存管理策略，例如回收或缓存</li>
</ul>
<h4><span id="behavioral-patterns">Behavioral Patterns</span></h4><ul>
<li>责任链：Chain of Responsible<ul>
<li>请求委托给负责的服务提供商</li>
</ul>
</li>
<li>命令： Command<ul>
<li>Request 或 Action 是一流的对象，因此是可存储的</li>
</ul>
</li>
<li>迭代器： Iterator<ul>
<li>按顺序聚合和访问元素</li>
</ul>
</li>
<li>翻译： Interpreter<ul>
<li>小语法的语言解释器</li>
</ul>
</li>
<li>调解员： Mediator<ul>
<li>协调其同事之间的互动</li>
</ul>
</li>
<li><p>纪念： Memento</p>
<ul>
<li>Snapshot 私下捕获和恢复对象状态</li>
</ul>
</li>
<li><p>观察员： Observer</p>
<ul>
<li>当观察到的对象发生变化时，观察者会自动更新</li>
</ul>
</li>
<li>状态： State<ul>
<li>其行为取决于其状态的对象</li>
</ul>
</li>
<li>战略： Strategy<ul>
<li>用于选择多种算法之一的抽象</li>
</ul>
</li>
<li>模板方法： Template Method<ul>
<li>派生类提供的带有一些步骤的算法</li>
</ul>
</li>
<li>游客： Visitor<ul>
<li>应用于异构对象结构元素的操作</li>
</ul>
</li>
</ul>
<h4><span id="observer-pattern">Observer pattern</span></h4><ul>
<li>意图：<ul>
<li>定义对象之间的一对多依赖关系，这样当一个对象改变状态时，它的所有依赖对象都会得到通知并自动更新</li>
</ul>
</li>
<li>在模型-视图-控制器框架中使用(MVC)<ul>
<li>模型是问题域</li>
<li>视图是窗口系统</li>
<li>控制器是鼠标/键盘控制</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208091549549.png" alt="image-20211208091549549" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208091555768.png" alt="image-20211208091555768" style="zoom:67%;"></p>
<h4><span id="command-pattern">Command pattern</span></h4><ul>
<li>概要或意图：Synopsis or Intent<ul>
<li>将一个请求封装成一个对象，从而让你参数化具有不同请求、队列或日志请求的客户端，并支持可撤销的操作</li>
</ul>
</li>
<li>解决方案： Solution<ul>
<li>Command 对象的接口可以是一个简单的 execute() 方法</li>
<li>额外的方法可以支持撤销和重做</li>
<li>命令可以是持久的并且可以全局访问，就像普通对象一样</li>
</ul>
</li>
</ul>
<h5><span id="command-pattern-structure">Command Pattern Structure:</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208091926644.png" alt="image-20211208091926644" style="zoom:67%;"></p>
<ul>
<li><p>参与者（参与此模式的类和/或对象）Participants：</p>
<ul>
<li>Command 声明用于执行操作的接口</li>
<li>ConcreteCommand 定义了 Receiver 对象和通过调用 Receiver 上的相应操作来实现 Execute 之间的绑定</li>
<li>调用者(Invoker)要求命令执行请求</li>
<li>接收者(Receiver)知道如何执行与执行请求相关的操作</li>
<li>客户端(Client)创建一个 ConcreteCommand 对象并设置其接收器</li>
</ul>
</li>
<li><p>结果 Consequences：</p>
<ul>
<li>您可以撤消/重做任何命令(undo/redo)<ul>
<li>每个命令存储恢复状态所需的内容</li>
</ul>
</li>
<li>您可以将命令存储在堆栈或队列中(store Commands)<ul>
<li>命令处理器模式维护历史</li>
</ul>
</li>
<li>添加新命令很容易，因为您不必更改现有类(you do not have to change existing classes )<ul>
<li>命令是一个抽象类，你可以从中派生出新的类</li>
<li>execute()、undo() 和 redo() 是多态函数</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4><span id="state-pattern-motivation">State Pattern – Motivation</span></h4><ul>
<li>考虑一个代表网络连接的 TCPConnection 类。</li>
<li>当 TCPConnection 对象收到来自其他对象的请求时，它会根据其当前状态做出不同的响应。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208092609241.png" alt="image-20211208092609241"></p>
<ul>
<li>意图：允许对象在其内部状态改变时改变其行为。 从客户端的角度来看，该对象似乎改变了它的类。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208092632136.png" alt="image-20211208092632136"></p>
<h4><span id="builder-pattern">Builder  Pattern</span></h4><h5><span id="builder-example">Builder  -  Example</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208092642639.png" alt="image-20211208092642639"></p>
<ul>
<li>意图：将复杂对象的构建与其表示分开，以便相同的构建过程可以创建不同的表示。</li>
<li>结构</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208092712391.png" alt="image-20211208092712391"></p>
<ul>
<li>客户端创建 Director 对象并使用所需的 Builder 对象对其进行配置。</li>
<li>每当应该构建产品的一部分时，Director 都会通知构建者。</li>
<li>Builder 处理来自主管的请求并向产品添加部件。</li>
<li>客户端从构建器中检索产品。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208095100149.png" alt="image-20211208095100149"></p>
<h4><span id="prototype-pattern">Prototype Pattern</span></h4><ul>
<li>意图：使用原型实例指定要创建的对象种类，并通过复制此原型来创建新对象。</li>
<li>结构 客户要求原型克隆自身</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208095119392.png" alt="image-20211208095119392"></p>
<h4><span id="bridge-pattern">Bridge Pattern</span></h4><ul>
<li><p>意图：将抽象与其实现分离，以便两者可以独立变化。</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208095221281.png" alt="image-20211208095221281" style="zoom:50%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208095414518.png" alt="image-20211208095414518" style="zoom:50%;"></p>
</li>
</ul>
<h4><span id="decorator-pattern">Decorator Pattern</span></h4><ul>
<li><p>绘画示例</p>
<ul>
<li>虽然画挂在墙上可以有框也可以没有框，但往往是加框的，而真正挂在墙上的是框。</li>
<li><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208095435627.png" alt="image-20211208095435627" style="zoom:67%;"></li>
</ul>
</li>
<li><p>意图</p>
<ul>
<li>动态地为对象附加额外的职责。</li>
<li>装饰器提供了一种灵活的替代子类来扩展功能。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208101009268.png" alt="image-20211208101009268" style="zoom:67%;"></p>
</li>
</ul>
<h4><span id="strategy-pattern">Strategy Pattern</span></h4><ul>
<li><p>意图</p>
<ul>
<li>定义一系列算法，封装每个算法，并使它们可以互换。 策略让算法独立于使用它的客户端而变化。</li>
</ul>
</li>
<li><p>结构</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208101039211.png" alt="image-20211208101039211" style="zoom:67%;"></p>
</li>
<li><p>策略定义了一组可以互换使用的算法。</p>
</li>
<li><p>到机场的交通方式是战略的一个例子。</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208101111028.png" alt="image-20211208101111028"></p>
<h4><span id="iterator-pattern">Iterator Pattern</span></h4><ul>
<li>诸如列表之类的聚合对象应该为您提供一种访问其元素而不暴露其内部结构的方法。</li>
<li>关键思想是把访问和遍历的责任从列表对象中取出，放入迭代器对象中。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208101339617.png" alt="image-20211208101339617" style="zoom:67%;"></p>
<ul>
<li>意图<ul>
<li>提供一种顺序访问聚合对象的元素而不暴露其底层表示的方法。</li>
</ul>
</li>
<li>结构</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208101407434.png" alt="image-20211208101407434"></p>
<h3><span id="benefits-of-design-patterns">Benefits of Design Patterns</span></h3><ul>
<li><p>设计模式可实现软件架构的大规模重用，并有助于文档系统</p>
</li>
<li><p>模式明确地捕捉专家知识和设计权衡，并使其更广泛地可用</p>
</li>
<li><p>模式有助于改善开发人员的沟通</p>
</li>
<li><p>模式名称形成一个共同的词汇</p>
</li>
</ul>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>软件工程</category>
      </categories>
  </entry>
  <entry>
    <title>软件工程复习L4</title>
    <url>/2021/12/03/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0L4/</url>
    <content><![CDATA[<h2><span id="process-models">Process models</span></h2><ul>
<li>工作流模型—Workflow model<ul>
<li>流程模型显示了整个流程以及系统支持的流程</li>
</ul>
</li>
<li>数据流模型—Dataflow model<ul>
<li>数据流模型可用于显示流程以及从一个流程到另一个流程的信息流</li>
</ul>
</li>
</ul>
<h4><span id="workflow-model">Workflow model</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204201314252.png" alt="image-20211204201314252" style="zoom:80%;"></p>
<h5><span id="equipment-procurement-process">Equipment procurement process</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204201949043.png" alt="image-20211204201949043"></p>
<h4><span id="data-flow-diagrams">Data flow diagrams</span></h4><ol>
<li>DFD 从功能角度对系统进行建模。</li>
<li>跟踪和记录与流程相关的数据如何有助于全面了解系统。</li>
<li>数据流图还可用于显示系统与其环境中的其他系统之间的数据交换。</li>
</ol>
<h5><span id="insulin-pump-dfd">Insulin pump DFD</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204202147596.png" alt="image-20211204202147596"></p>
<h5><span id="order-processing-dfd">Order processing DFD</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204202242194.png" alt="image-20211204202242194"></p>
<h2><span id="modeling-using-the-unified-modeling-language-uml">Modeling using the Unified Modeling Language (UML)</span></h2><h3><span id="uml-diagrams">UML Diagrams</span></h3><h4><span id="dynamic-modeling">Dynamic  modeling</span></h4><ul>
<li>Use Case Diagrams 用例图<ul>
<li>Use Case diagrams &amp; descriptions</li>
</ul>
</li>
<li>State Diagrams 状态图<ul>
<li>State diagrams —— State Machine</li>
</ul>
</li>
<li>Interaction Diagrams 互动图<ul>
<li>Sequence &amp; collaboration diagrams</li>
</ul>
</li>
</ul>
<h4><span id="static-modeling">Static  modeling</span></h4><ul>
<li>Implementation Diagrams <ul>
<li>Package, Component &amp; Deployment diagrams</li>
</ul>
</li>
<li>Static Structure Diagrams<ul>
<li>Class &amp; object diagrams</li>
</ul>
</li>
</ul>
<h2><span id="dynamic-modeling">Dynamic  modeling</span></h2><h3><span id="use-case">Use Case</span></h3><p>用例(use case)指定了一个系统或系统的一部分的行为，是一组动作序列的描述，包括系统为给参与者带来可观察到的价值结果而执行的变量</p>
<p>参与者(actor)是与系统、子系统或类交互的外部人员、过程或事物的理想化。参与者描述外部用户与系统的交互</p>
<ul>
<li>用于描述系统中的主要流程以及流程（用例）(processes(use cases))与外部系统或称为参与者(actor)的个人之间的交互。</li>
<li>一旦开发了概述，就可以将其扩展到包括子流程。</li>
<li>用例描述是一个通用场景，是一系列描述参与者和用例之间交互的每个步骤的句子。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204203229715.png" alt="image-20211204203229715"></p>
<ul>
<li>用例(use case)在用例图中呈现为椭圆。用例总是标有其名称。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204203542673.png" alt="image-20211204203542673"></p>
<ul>
<li>在用例图中，参与者被呈现为一个棍状人物。每个参与者参与一个或多个用例。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204203644664.png" alt="image-20211204203644664" style="zoom:67%;"></p>
<ul>
<li>参与者可以参与与其他参与者的泛化(generalization)关系。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204203734677.png" alt="image-20211204203734677" style="zoom:67%;"></p>
<ul>
<li>参与者只能通过关联连接到用例。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204203847465.png" alt="image-20211204203847465" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204203936135.png" alt="image-20211204203936135"></p>
<h3><span id="state-machine">State Machine</span></h3><ul>
<li>对象在其生命周期中的任何给定时间都必须处于某种特定状态。</li>
<li>对象从一种状态过渡到另一种状态是影响它的某个事件的结果。</li>
<li>可以为UML模型中的任何类、协作、操作或用例创建状态图。</li>
<li>状态图中只能有一个启动状态(<strong>start state</strong>)，但可能有许多中间和最终状态(<strong>final state</strong>)。</li>
</ul>
<h4><span id="state-diagrams">State Diagrams</span></h4><p>状态机视图通过建模每个类对象的生命周期来描述对象随时间的动态行为。</p>
<p>每个对象都被视为一个孤立的实体，通过检测事件并对其作出响应来与世界其他地方进行通信。</p>
<p>事件表示对象可以检测到的各种变化，任何可以影响对象的东西都可以被描述为一个事件</p>
<ul>
<li>状态是一组值，用于描述某一时刻的对象。</li>
<li>状态图提供了一个对象在接收连续消息时发生的情况的精确视图。</li>
<li>并非每个类都需要有状态图——只有当它们是非常动态的时，它才有助于理解对象的所有可能状态，并且当消息触发从一个状态到另一个状态的每次转换时。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204204319541.png" alt="image-20211204204319541"></p>
<h5><span id="例子">例子</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204205257996.png" alt="image-20211204205257996"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204205445442.png" alt="image-20211204205445442"></p>
<h4><span id="sequence-diagram">Sequence Diagram</span></h4><p>序列图是强调消息时间顺序的交互图。它显示一组对象以及这些对象发送和接收的消息。</p>
<p>从图形上看，序列图是一个表格，显示沿X轴排列的对象和沿Y轴按时间递增排序的消息。</p>
<ul>
<li>以图形方式演示场景</li>
<li>它们显示对象相互传递消息的顺序</li>
<li>消息：请求对象执行方法（调用方法）</li>
<li>它们显示创建和销毁对象的时间</li>
</ul>
<h5><span id="objects-对象">objects 对象</span></h5><p>序列图中的对象呈现为一个框，框中有一条从框中向下的虚线。</p>
<p>这条线被称为对象生命线，它表示对象在一段时间内的存在。</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204221112081.png" alt="image-20211204221112081" style="zoom:67%;"></p>
<h5><span id="message-消息">Message 消息</span></h5><ul>
<li>消息呈现为水平箭头，随着时间沿着对象生命线向下移动，从一个对象传递到另一个对象。</li>
<li>条件（如[check=“true”]）指示消息何时传递。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204221342952.png" alt="image-20211204221342952" style="zoom:67%;"></p>
<p>最后的箭头表示从上一条消息返回，而不是新消息。</p>
<h5><span id="iteration-marker-迭代标记">iteration marker 迭代标记</span></h5><p>迭代标记，例如*（如图所示）或*[i=1..n]，指示消息将按指示重复。</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204221451860.png" alt="image-20211204221451860" style="zoom:67%;"></p>
<h5><span id="例子">例子</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204221532887.png" alt="image-20211204221532887"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211204222532776.png" alt="image-20211204222532776"></p>
<h4><span id="collaboration-diagram">Collaboration Diagram</span></h4><ul>
<li>协作图强调参与交互的对象之间的关系。 </li>
<li>与序列图不同，您不必在协作图中明确显示对象的时间线。 </li>
<li>事件序列由消息前面的序列号指示。</li>
<li><p>对象标识符的形式为 objectName : className，并且可以省略 objectName 或 className，并且冒号的位置表示 objectName: 或 :className。</p>
</li>
<li><p>提供显示事件发生顺序的第二种方式</p>
</li>
<li>对象显示在由指示它们之间的链接的线连接的矩形中。</li>
<li>数字表示操作的执行顺序。</li>
<li>数字与消息名称和指示流向的箭头一起书写。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205085637041.png" alt="image-20211205085637041"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205090403671.png" alt="image-20211205090403671"></p>
<ul>
<li>协作图和序列图都源自 UML 元模型中的相同信息，因此您可以采用一种形式的图并将其转换为另一种形式。 </li>
<li>它们在语义上是等价的。</li>
</ul>
<h4><span id="activity-diagram">Activity Diagram</span></h4><ul>
<li>活动图本质上是一个流程图，显示了从活动到活动的控制流。</li>
<li>使用活动图来指定、构建和记录对象社会的动态，或对操作的控制流进行建模。 </li>
<li>交互图强调从对象到对象的控制流，而活动图则强调从活动到活动的控制流。 </li>
<li>活动是状态机内正在进行的非原子执行。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205091228952.png" alt="image-20211205091228952" style="zoom:80%;"></p>
<h2><span id="static-modeling">Static Modeling</span></h2><h3><span id="classes-类">Classes 类</span></h3><ul>
<li><p>类是对共享相同属性、操作、关系和语义的一组对象的描述。</p>
</li>
<li><p>在图形上，一个类被呈现为一个矩形，通常在单独的、指定的隔间中包含它的名称、属性和操作。</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205091451636.png" alt="image-20211205091451636"></p>
<h4><span id="class-names">Class Names</span></h4><p>类的名称是类的图形表示中唯一必需的标记。 它总是出现在最上面的隔间中。</p>
<h4><span id="class-attributes">Class Attributes</span></h4><ul>
<li>属性是一个类的命名属性，用于描述被建模的对象。</li>
<li><p>在类图中，属性出现在名称隔间正下方的第二个隔间中。</p>
</li>
<li><p>属性通常以以下形式列出：</p>
<ul>
<li>属性名称：类型</li>
</ul>
</li>
<li><p>派生属性是可以从其他属性计算出来的属性，但实际上并不存在。 </p>
<ul>
<li>例如，一个人的年龄可以从他的出生日期计算出来。 </li>
<li>派生属性由前面的“/”指定，如下所示：/ 年龄：日期</li>
</ul>
</li>
<li><ul>
<li>+public </li>
<li>#protected</li>
<li>-private</li>
<li>/derived</li>
</ul>
</li>
</ul>
<h4><span id="class-operations">Class Operations</span></h4><ul>
<li>操作描述类行为</li>
<li>并出现在第三个隔间。</li>
</ul>
<p>您可以通过声明其签名来指定操作：列出所有参数的名称、类型和默认值，如果是函数，则列出返回类型。</p>
<p>绘制类时，不必在每个图中都显示属性和操作。</p>
<h4><span id="class-responsibilities">Class Responsibilities</span></h4><ul>
<li><p>一个类也可以在类图中包含它的职责。</p>
</li>
<li><p>责任是类执行特定服务的合同或义务。</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205092213468.png" alt="image-20211205092213468"></p>
<h4><span id="relationships">Relationships</span></h4><ul>
<li><p>在 UML 中，对象互连（逻辑或物理）建模为关系。</p>
</li>
<li><p>UML中存在三种关系：</p>
<ul>
<li><p><strong>依赖 — dependencies</strong></p>
</li>
<li><p><strong>泛化 — generalizations</strong></p>
</li>
<li><p><strong>关联 — associations</strong></p>
</li>
</ul>
</li>
</ul>
<h5><span id="dependency-relationships-依赖关系">Dependency Relationships 依赖关系</span></h5><ul>
<li>依赖项表示两个或多个元素之间的语义关系。 </li>
<li>从 CourseSchedule 到 Course 的依赖存在是因为 Course 被用于 CourseSchedule 的添加和删除操作。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205092830042.png" alt="image-20211205092830042"></p>
<h5><span id="generalization-relationships-泛化关系">Generalization Relationships 泛化关系</span></h5><ul>
<li>类似于继承关系</li>
<li>泛化将子类与其超类连接起来。 </li>
<li>它表示从超类到子类的属性和行为的继承，并表示在更一般的超类的子类中的特化。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205093032876.png" alt="image-20211205093032876"></p>
<ul>
<li>UML 允许一个类从多个超类继承，尽管一些编程语言（例如 Java）不允许多重继承。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205093056088.png" alt="image-20211205093056088"></p>
<h5><span id="association-relationships-关联关系">Association Relationships 关联关系</span></h5><ul>
<li><p>如果模型中的两个类需要相互通信，则它们之间必须存在链接。</p>
</li>
<li><p>关联表示该链接。</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205093130944.png" alt="image-20211205093130944"></p>
<ul>
<li>我们可以通过向表示关联的行添加多重装饰来指示关联的多重性。</li>
</ul>
<p>该示例表明学生有一个或多个讲师：</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205093215815.png" alt="image-20211205093215815"></p>
<p>该示例表明每个教师都有一个或多个学生：</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205093230826.png" alt="image-20211205093230826"></p>
<p>我们还可以使用角色名称指示关联中对象的行为（即对象的角色）。</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205093243923.png" alt="image-20211205093243923"></p>
<p>为关系命名</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205093440398.png" alt="image-20211205093440398"></p>
<p>我们可以指定双重联系。</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205093524627.png" alt="image-20211205093524627"></p>
<ul>
<li><p>我们可以通过定义关联的可导航性(navigability)来约束关联关系。 </p>
<p>在这里，路由器对象通过向服务器（调用其操作）发送消息来从 DNS 对象请求服务。 关联的方向表明服务器不知道路由器。</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205093612517.png" alt="image-20211205093612517"></p>
<ul>
<li>关联也可以是对象本身，称为链接类(link classes)或关联类(association classes)。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205093802781.png" alt="image-20211205093802781"></p>
<ul>
<li>一个类可以有一个自关联。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205093821070.png" alt="image-20211205093821070"></p>
<ul>
<li><p>我们可以通过称为聚合(aggregations)和组合(compositions)的特殊关联对包含其他对象的对象进行建模。</p>
</li>
<li><p>聚合指定了聚合（整体）和组成部分之间的<strong>整体-部分关系</strong>，其中该部分可以独立于聚合而存在。 聚合由关联上的空心菱形装饰表示。</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205094247213.png" alt="image-20211205094247213"></p>
<ul>
<li>组合表示整体对部分的所有权和重合的生命周期（即，它们作为一个整体存在和消亡）。 组合由关联上的填充菱形装饰表示。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205094351594.png" alt="image-20211205094351594"></p>
<h4><span id="interfaces">Interfaces</span></h4><ul>
<li>接口是一组命名的操作，它指定对象的行为而不显示它们的内部结构。 </li>
<li>它可以通过一个或两个隔间的矩形在模型中呈现，接口名称上方带有构造型 。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205094503459.png" alt="image-20211205094503459"></p>
<h5><span id="interface-services">Interface Services</span></h5><ul>
<li>接口不会被实例化。 </li>
<li>它们没有属性或状态。 </li>
<li>相反，它们指定了相关类提供的服务。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205094521148.png" alt="image-20211205094521148"></p>
<h5><span id="interface-realization-relationship">Interface Realization Relationship</span></h5><ul>
<li>实现关系将类与提供其行为规范的接口连接起来。 </li>
<li>它由一条带有空心三角形的虚线呈现，指向说明符。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205094621606.png" alt="image-20211205094621606"></p>
<h4><span id="enumeration">Enumeration</span></h4><p>枚举是一种用户定义的数据类型，由名称和枚举文字的有序列表组成。</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205094744793.png" alt="image-20211205094744793"></p>
<h4><span id="exception">Exception</span></h4><ul>
<li><p>可以像任何其他类一样建模。</p>
</li>
<li><p>注意名称隔间中的构造型。</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205094819401.png" alt="image-20211205094819401"></p>
<h4><span id="package-diagrams">Package Diagrams</span></h4><ul>
<li>包是将定义的类组织成组。</li>
<li>它们代表逻辑软件模块。</li>
<li>它们使用与类图相同的关联（聚合、关联、泛化/特化、依赖……）<ul>
<li>(aggregation, association, generalization/specialization, dependency,…)</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205094946918.png" alt="image-20211205094946918"></p>
<h5><span id="packages">Packages</span></h5><ul>
<li>包是一种类似容器的元素，用于将其他元素组织成组。</li>
<li>一个包可以包含类和其他包和图表。</li>
<li>包可用于在不同包中的类之间提供受控访问。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205095011208.png" alt="image-20211205095011208" style="zoom:67%;"></p>
<ul>
<li>在此图中，FrontEnd 包中的类和BackEnd 包中的类不能相互访问。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205095029899.png" alt="image-20211205095029899" style="zoom:67%;"></p>
<ul>
<li>BackEnd 包中的类现在可以访问 FrontEnd 包中的类。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205095111300.png" alt="image-20211205095111300" style="zoom:80%;"></p>
<ul>
<li>我们可以对包之间的泛化和依赖关系建模。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205095127197.png" alt="image-20211205095127197" style="zoom:80%;"></p>
<h4><span id="component-diagram">Component Diagram</span></h4><ul>
<li>组件图是在面向对象系统的物理方面建模时发现的两种图之一。 </li>
<li>它们显示了一组组件之间的组织和依赖关系。</li>
<li>使用组件图对系统的静态实现视图进行建模。 </li>
<li><p>这涉及对驻留在节点上的物理事物进行建模，例如可执行文件、库、表、文件和文档。</p>
</li>
<li><p>组件是任何形式的软件</p>
</li>
<li>组件图显示软件组件及其关系（虚线箭头）</li>
<li>它们从高级视图显示物理组件，以显示代码模块是如何分布的。</li>
<li>它们更常与部署图(deploymend diagrams )一起使用，而不是分开使用。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205095242158.png" alt="image-20211205095242158"></p>
<h5><span id="example">example</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205095253166.png" alt="image-20211205095253166" style="zoom:80%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205095331827.png" alt="image-20211205095331827" style="zoom:80%;"></p>
<h4><span id="deployment-diagram">Deployment Diagram</span></h4><ul>
<li>部署图是在面向对象系统的物理方面建模时发现的两种图之一。 </li>
<li>它们显示了运行时处理节点的配置以及它们上的组件。</li>
<li><p>使用部署图为系统的静态部署视图建模。 这涉及对系统执行的硬件拓扑进行建模。</p>
</li>
<li><p>每个节点或处理元素都由一个 3D 框表示。</p>
</li>
<li>通信/关系用实线表示</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205095413971.png" alt="image-20211205095413971"></p>
<ul>
<li>组件是具有明确定义的接口的物理实现单元，旨在用作系统的可替换部分。 </li>
<li>设计良好的组件不直接依赖于其他组件，而是依赖于组件支持的接口。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205095455679.png" alt="image-20211205095455679"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211205095651709.png" alt="image-20211205095651709"></p>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>软件工程</category>
      </categories>
  </entry>
  <entry>
    <title>软件工程复习L8</title>
    <url>/2021/12/08/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0L8/</url>
    <content><![CDATA[<h3><span id="formal-methods">Formal methods</span></h3><ul>
<li>形式规范(<strong>Formal specification</strong>)是更普遍的技术集合的一部分，这些技术被称为“形式化方法”</li>
<li>这些都是基于软件的数学表示和分析</li>
<li>形式化方法包括<ul>
<li>形式规范 Formal specification</li>
<li>规格分析与证明 Specification analysis and proof</li>
<li>转型发展 Transformational development</li>
<li>程序验证 Program verification</li>
</ul>
</li>
</ul>
<h4><span id="formal-specification">Formal Specification</span></h4><ul>
<li><p>形式规范的目标：</p>
<ul>
<li>完全的</li>
<li>持续的</li>
<li>简洁的</li>
<li>明确的</li>
<li>有效——准确说明用户想要什么</li>
</ul>
</li>
<li><p>基于形式语义模型的规范</p>
</li>
<li><p>什么是语义？ semantics</p>
<ul>
<li><p>语义意味着“意义”</p>
</li>
<li><p>形式语义：用数学表达的意义</p>
</li>
<li><p>形式语义模型：数学中语言的完整语义定义</p>
</li>
<li><p>什么数学？</p>
<ul>
<li>离散数学！</li>
</ul>
</li>
<li><p>形式语义允许各方之间进行可靠的通信 dependable communication</p>
</li>
</ul>
</li>
<li><p>什么是形式语义模型？ formal semantic model</p>
</li>
</ul>
<h5><span id="types-of-languages">Types Of Languages</span></h5><ul>
<li>程序：Procedural<ul>
<li>由计算机要执行的所需动作序列定义的计算</li>
<li>大多数高级语言都是程序化的</li>
</ul>
</li>
<li>声明：Declarative<ul>
<li>由计算机应处于的期望状态定义的计算</li>
<li>许多规范语言都是声明性的</li>
</ul>
</li>
<li>语言的最大区别在于：<ul>
<li>声明式(Declarative)：不说如何，只说什么</li>
<li>程序性的(Procedural)：什么都不说，只说怎么做</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208111939917.png" alt="image-20211208111939917"></p>
<ul>
<li><p>Library Example: Informal Statement 图书馆示例：非规范声明</p>
<ul>
<li>一本书可以成堆、保留或借出</li>
<li>如果一本书在书架中或被保留，则可以请求</li>
<li>我们想<ul>
<li>形式化概念和陈述<ul>
<li>证明一些定理以获得对规范正确的信心</li>
</ul>
</li>
</ul>
</li>
<li>首先让我们形式化一些概念<br>S: the book is in the stacks<br>R: the book is on reserve<br>L: the book is on loan<br>Q: the book is requested</li>
<li><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208112106030.png" alt="image-20211208112106030" style="zoom: 33%;"></p>
</li>
<li><p>如果需要一本书，那么它就在书架上或保留<br><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208112142220.png" alt="image-20211208112142220" style="zoom:33%;"></p>
</li>
</ul>
</li>
</ul>
<h5><span id="resolution-refutation-归结法">Resolution Refutation 归结法</span></h5><ul>
<li>一旦定理证明者表明否定目标(negated goal)与给定的公理集不一致，那么原始目标必须是一致的。</li>
<li>这证明了定理</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208112539632.png" alt="image-20211208112539632"></p>
<p>例子</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208124735101.png" alt="image-20211208124735101" style="zoom: 50%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208124752944.png" alt="image-20211208124752944" style="zoom:50%;"></p>
<ul>
<li>解析原则(resolution principle)，描述了一种在最小替换的条款数据库中查找矛盾的方法</li>
<li>归结法通过否定要证明的陈述并将否定的目标添加到已知或已假定为真的公理集合来证明定理</li>
<li>然后它使用推理的分解规则来证明这导致了一个矛盾</li>
</ul>
<p>步骤</p>
<ul>
<li>把前提或公理变成从句形式</li>
<li>将要以从句形式证明的内容的否定添加到公理集合中</li>
<li>一起解析这些子句，产生从它们逻辑上遵循的新子句</li>
<li>通过生成空子句产生矛盾</li>
<li>用于产生空子句的替换是那些否定目标的反面为真的替换</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208130238599.png" alt="image-20211208130238599" style="zoom: 67%;"><br>演绎可以用一棵树来表示——演绎树。</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208131207032.png" alt="image-20211208131207032" style="zoom:50%;"></p>
<ul>
<li><p>例子1</p>
<ul>
<li><p>We wish to prove that  “Fido will die” from the statements that</p>
</li>
<li><p>“Fido is a dog” and  “all dogs are animals” and  “all animals will die”</p>
</li>
<li><p>Convert these predicates to clause form</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208131444807.png" alt="image-20211208131444807" style="zoom: 67%;"></p>
</li>
<li><p>Negate the conclusion that fido will die ¬die(fido)</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208131712310.png" alt="image-20211208131712310" style="zoom:67%;"></p>
</li>
</ul>
</li>
<li><p>例子2</p>
<ul>
<li>Jack owns a dog.</li>
<li>Every dog owner is an animal lover.</li>
<li>No animal lover kills an animal.</li>
<li>Either Jack or Curiosity killed the cat, who is named Tuna.</li>
<li>Did Curiosity kill the cat? </li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208140009875.png" alt="image-20211208140009875" style="zoom: 50%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208140435481.png" alt="image-20211208140435481"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208141203112.png" alt="image-20211208141203112"></p>
<ul>
<li>例子3</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208141315599.png" alt="image-20211208141315599" style="zoom:67%;"></p>
<h3><span id="introduction">Introduction</span></h3><h4><span id="形式方法-formal-methods">形式方法 Formal methods</span></h4><ul>
<li>提高软件质量，减少错误</li>
<li>只有少数软件是用形式化方法开发的<ul>
<li>成功的软件工程</li>
<li>市场变化</li>
<li>形式方法的范围有限</li>
<li>形式方法的可扩展性有限</li>
</ul>
</li>
<li>应用于某些领域，如关键系统</li>
</ul>
<h4><span id="形式规范-formal-specification">形式规范 Formal specification</span></h4><ul>
<li>紧接着系统要求</li>
<li>详细需求规范和形式规范之间的紧密反馈循环</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208144220087.png" alt="image-20211208144220087" style="zoom:50%;"></p>
<p>Software development costs with formal specification</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208144234536.png" alt="image-20211208144234536" style="zoom:50%;"></p>
<h5><span id="形式规范语言-formal-specification-languages">形式规范语言 Formal specification languages</span></h5><ul>
<li>代数方法 Algebraic approach<ul>
<li>系统是根据操作及其关系来描述的</li>
<li>Larch(Guttag et al., 1985,1993), OBJ(Futatsugi et al., 1985), Lotos(Bolognesi and Brinksma, 1987)</li>
</ul>
</li>
<li>基于模型的方法 Model-based approach<ul>
<li>系统模型是使用数学结构（例如集合和序列）构建的，系统操作由它们如何修改系统状态来定义</li>
<li>Z(Spivey, 1992), VDM(Jones, 1980), B(Wordsworth, 1986), CSP(Hoare, 1985), Petri Nets(Peterson, 1981)</li>
</ul>
</li>
</ul>
<h4><span id="接口规范-interface-specification">接口规范 Interface specification</span></h4><ul>
<li>大型系统被分解为子系统，这些子系统之间具有明确定义的接口</li>
<li>子系统接口的规范允许不同子系统的独立开发</li>
<li><p>接口可以定义为抽象数据类型或对象类</p>
</li>
<li><p>形式化规范的代数方法特别适用于接口规范</p>
</li>
</ul>
<h5><span id="sub-system-interfaces">Sub-system interfaces</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208144746069.png" alt="image-20211208144746069"></p>
<h5><span id="sub-system-interface-specification">Sub-system interface specification</span></h5><ul>
<li>代数方法<ul>
<li>接口类似于对象类<ul>
<li>介绍，声明指定的排序（类型名称）</li>
<li>描述，其中操作被非正式地描述</li>
<li>签名，定义对象类或抽象数据类型的接口语法</li>
<li>公理，通过定义一组表征抽象数据类型行为的公理来定义操作的语义</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4><span id="recursion-in-specifications">Recursion in specifications</span></h4><p>操作通常以递归方式指定。</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208145614558.png" alt="image-20211208145614558"></p>
<p>例子：一个扇区</p>
<ul>
<li>表示受控扇区的对象上的关键操作是<ul>
<li>Enter。 在管制空域增加一架飞机；</li>
<li>Leave。 将飞机移出管制空域；</li>
<li>Move。 将飞机从一个高度移动到另一个高度；</li>
<li>Lookup。 给定飞机标识符，返回其当前高度；</li>
</ul>
</li>
</ul>
<h5><span id="primitive-operations">Primitive operations</span></h5><ul>
<li>有时需要引入额外的操作来简化规范</li>
<li>然后可以使用这些更原始的操作定义其他操作</li>
<li>Primitive operations<ul>
<li>Create。 使扇区实例存在</li>
<li>Put。 添加一架没有安全检查的飞机</li>
</ul>
</li>
</ul>
<h4><span id="behavioral-specification">Behavioral specification</span></h4><ul>
<li>基于模型的规范 Model-based specification</li>
<li>抽象状态机语言 (AsmL) Abstract State Machine Language</li>
</ul>
<p>Abstract State Machine Language (AsmL)</p>
<ul>
<li>AsmL 是一种可执行的规范语言，用于对数字系统的结构和行为进行建模</li>
<li>抽象帮助我们将复杂的问题简化为可管理的单元，并防止我们迷失在细节的海洋中</li>
<li>AsmL 提供了多种功能，允许您以非常经济、高级的方式描述系统的相关状态</li>
</ul>
<h5><span id="state-transitions">State transitions</span></h5><p>机器的行为（它的运行）总是可以被描述为由状态转换链接的状态序列</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208150708459.png" alt="image-20211208150708459"></p>
<h5><span id="evolution-of-state-variables-状态变量的演化">Evolution of state variables 状态变量的演化</span></h5><p>state variables: (Name, Value) </p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208150737499.png" alt="image-20211208150737499"></p>
<p>例子：</p>
<p>图表显示了机器的运行，该机器对订单的处理方式进行建模</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208150824074.png" alt="image-20211208150824074"></p>
<ul>
<li>每个过渡操作：<ul>
<li>可以看作是在当前状态上调用机器的控制逻辑的结果</li>
<li>计算子序列状态作为输出</li>
</ul>
</li>
</ul>
<h5><span id="control-logic">Control Logic</span></h5><p>机器控制逻辑是一个黑匣子，它以状态字典 S1 作为输入，并给出一个新字典 S2 作为输出</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208150947611.png" alt="image-20211208150947611"></p>
<p>两个字典 S1 和 S2 具有相同的一组键，但与每个变量名称关联的值在 S1 和 S2 之间可能不同</p>
<ul>
<li>例子：读取文件</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208151028282.png" alt="image-20211208151028282"></p>
<ul>
<li>例子：图像表示</li>
</ul>
<p>​        <img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208151045183.png" alt="image-20211208151045183"></p>
<h5><span id="behavioral-specification">Behavioral specification</span></h5><ul>
<li>Z Schema<ul>
<li>Schema signature</li>
<li>Schema predicate</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208151119411.png" alt="image-20211208151119411" style="zoom:50%;"></p>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>软件工程</category>
      </categories>
  </entry>
  <entry>
    <title>软件工程复习L9</title>
    <url>/2021/12/08/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0L9/</url>
    <content><![CDATA[<h3><span id="第一步画出控制流图">第一步：画出控制流图</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208151519512.png" alt="image-20211208151519512"></p>
<h4><span id="画出其程序流程图和对应的控制流图如下">画出其程序流程图和对应的控制流图如下</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208152104634.png" alt="image-20211208152104634" style="zoom:67%;"></p>
<h3><span id="第二步计算圈复杂度">第二步：计算圈复杂度</span></h3><p>有以下三种方法计算圈复杂度：</p>
<ul>
<li>流图中区域的数量对应于环型的复杂性;</li>
<li>给定流图G的圈复杂度V(G)，定义为V(G)=E-N+2，E是流图中边的数量，N是流图中结点的数量;</li>
<li>给定流图G的圈复杂度V(G)，定义为V(G)=P+1，P是流图G中判定结点的数量。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208152311633.png" alt="image-20211208152311633" style="zoom:67%;"></p>
<h3><span id="第三步导出测试用例">第三步：导出测试用例</span></h3><ul>
<li>根据上面的计算方法，可得出四个独立的路径。</li>
<li>(一条独立路径是指，和其他的独立路径相比，至少引入一个新处理语句或一个新判断的程序通路。V(G)值正好等于该程序的独立路径的条数。)<ul>
<li>路径1：4-14</li>
<li>路径2：4-6-7-14</li>
<li>路径3：4-6-8-10-13-4-14</li>
<li>路径4：4-6-8-11-13-4-14</li>
</ul>
</li>
</ul>
<h3><span id="总结mccabe的确定基路径集合的算法">总结：McCabe的确定基路径集合的算法</span></h3><ul>
<li><p>McCabe开发了一种算法，用于确定程序的基本路径集合，方法如下：</p>
<p>1、选择一个基线路径（应该对应某个“正常案例”，建议选择尽可能多判断节点的路径）</p>
<p>2、沿基线路径后退，碰到判定节点后翻转，将翻转后的路径作为基线路径，重复本步骤，直到所有的判定节点都被翻转。</p>
<ul>
<li>注意：为遵循先易后难的原则，对于循环，一般先让路径跳过循环，然后考虑进入循环。</li>
</ul>
</li>
<li><p>基本路径集通常并不唯一。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>软件工程</category>
      </categories>
  </entry>
  <entry>
    <title>软件工程复习L7</title>
    <url>/2021/12/08/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0L7/</url>
    <content><![CDATA[<h4><span id="introduction">Introduction</span></h4><ul>
<li>软件测试的两个不同目标<ul>
<li>向开发人员和客户证明软件满足要求 — software meets requirements</li>
<li>在软件的行为不正确、不受欢迎或不符合其规范的情况下发现软件中的故障或缺陷 — discover faults or defects</li>
</ul>
</li>
<li><p>埃兹格·迪克斯特拉：</p>
<ul>
<li>“测试只能显示错误的存在，而不是它们的缺失”</li>
</ul>
</li>
<li><p>软件测试过程模型 software testing process</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208101736773.png" alt="image-20211208101736773"></p>
<h4><span id="software-testing-process">Software Testing Process</span></h4><p>数据处理 -&gt; 设计测试用例 -&gt; 判断结果</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208101807120.png" alt="image-20211208101807120"></p>
<ul>
<li>验收测试：<ul>
<li>如果软件是给一个客户开发的，需要进行一系列验收测试来保证满足客户所有的需求。验收测试主要由用户而不是开发者来进行的。</li>
</ul>
</li>
<li>Alpha测试与Beta测试：<ul>
<li>如果一个软件是给很多客户使用的，可使用Alpha测试与Beta测试。</li>
</ul>
</li>
<li>Alpha测试：<ul>
<li>是在一个受控的环境下，由用户在开发者的指导下进行测试，由开发者负责记录错误和使用中出现的问题。</li>
</ul>
</li>
<li>Beta测试：<ul>
<li>由最终用户在自己的场所进行，开发发者通常不在场，也不能控制应用的环境。由用户记录错误和使用中出现的问题，并定期地交给开发者来解决。</li>
</ul>
</li>
</ul>
<h5><span id="integration-testing-集成测试">Integration testing 集成测试</span></h5><ul>
<li>系统集成的过程包括从其组件构建一个系统，并针对组件交互引起的问题测试生成的系统</li>
<li>集成测试期间出现的一个主要问题是定位错误 localizing errors</li>
<li>为了更容易地定位错误，您应该始终使用增量方法进行系统集成和测试</li>
<li>一个好的经验法则是首先集成实现最常用功能的组件。 这意味着最常用的组件接受最多的测试</li>
<li>系统被视为组件的层次结构<ul>
<li><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208103125760.png" alt="image-20211208103125760" style="zoom:33%;"></li>
</ul>
</li>
</ul>
<h5><span id="incremental-integration-testing">Incremental integration testing</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208102057966.png" alt="image-20211208102057966" style="zoom:67%;"></p>
<h5><span id="integration-testing-strategies-集成测试策略">Integration Testing Strategies 集成测试策略</span></h5><ul>
<li>选项：<ul>
<li>“大爆炸”方法 — big bang</li>
<li>增量构建策略 — incremental construction strategy</li>
</ul>
</li>
</ul>
<p>Big-Bang Integration Example</p>
<p>需要存根和驱动程序来测试独立组件</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208102946769.png" alt="image-20211208102946769"></p>
<p>系统被视为组件的层次结构</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211209153135521.png" alt="image-20211209153135521" style="zoom:50%;"></p>
<h5><span id="bottom-up-integration-example">Bottom-Up Integration Example</span></h5><p>测试序列及其依赖关系</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208103141408.png" alt="image-20211208103141408" style="zoom:50%;"></p>
<h5><span id="top-down-integration-example">Top-Down Integration Example</span></h5><p>只有A是自己测试的</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208103155416.png" alt="image-20211208103155416" style="zoom:50%;"></p>
<h5><span id="modified-top-down-integration-example">Modified Top-Down Integration Example</span></h5><p>在合并之前对每个级别的组件进行单独测试</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208103217703.png" alt="image-20211208103217703" style="zoom:50%;"></p>
<h4><span id="集成测试的策略">集成测试的策略：</span></h4><ul>
<li>自顶向下测试：从顶模块开始，沿被测程序的结构图逐渐向下测试。按照移动路线的差异，又可区分为两种不同的实施策略：<ul>
<li>先广度后深度实施步骤。<br>组装顺序：M1-M2-M3-M4-M5-M6-M7-M8</li>
<li>先深度后广度实施步骤。<br>组装顺序：M1-M2-M5-M6-M8-M3-M4-M7</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208103314118.png" alt="image-20211208103314118"></p>
<h4><span id="black-box-and-white-box-testing">Black-box and White-box testing</span></h4><h5><span id="黑箱测试">黑箱测试</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208103522113.png" alt="image-20211208103522113" style="zoom:50%;"></p>
<h5><span id="白箱测试">白箱测试</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208103527360.png" alt="image-20211208103527360" style="zoom:50%;"></p>
<h4><span id="release-testing-发布测试">Release testing 发布测试</span></h4><ul>
<li>发布测试是测试将分发给客户的系统发布的过程</li>
<li>发布测试通常是一个黑盒测试过程，其中测试源自系统规范</li>
<li>黑盒测试</li>
<li>另一个名称是功能测试</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208103614848.png" alt="image-20211208103614848"></p>
<h5><span id="black-box-testing">Black box testing</span></h5><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208103640550.png" alt="image-20211208103640550"></p>
<ul>
<li>导致异常行为的输入</li>
<li><p>显示缺陷存在的输出</p>
</li>
<li><p>惠特克 (2002) 指导方针：</p>
<ul>
<li>选择强制系统生成所有错误消息的输入</li>
<li>设计导致输入缓冲区溢出的输入</li>
<li>多次重复相同的输入或一系列输入</li>
<li>强制生成无效输出</li>
<li>强制计算结果过大或过小</li>
</ul>
</li>
<li><p>LIBSYS 示例：</p>
<ul>
<li>使用正确和不正确的登录来测试登录机制，以检查是否接受了有效用户和拒绝了无效用户</li>
<li>使用针对已知来源的查询来测试搜索工具，以检查搜索机制是否确实在查找文档</li>
<li>测试系统演示工具以检查有关文档的信息是否正确显示</li>
<li>测试请求下载权限的机制</li>
<li>测试表明下载的文档可用的电子邮件响应</li>
</ul>
</li>
</ul>
<h4><span id="performance-testing-性能测试">Performance testing 性能测试</span></h4><ul>
<li>发现缺陷的一种有效方法是围绕系统的限制设计测试。 在性能测试中，这意味着对系统施加压力——因此得名压力测试(stress testing)</li>
<li>压力测试的两大功能<ul>
<li>它测试系统的故障行为</li>
<li>它会给系统带来压力，并可能导致通常不会发现的缺陷曝光</li>
</ul>
</li>
</ul>
<h4><span id="component-testing-组件测试">Component testing 组件测试</span></h4><ul>
<li>组件测试（或单元测试）是测试系统中单个组件的过程</li>
<li>要测试的不同类型的组件<ul>
<li>对象中的单个函数或方法</li>
<li>具有多个属性和方法的对象类</li>
<li>由几个不同的对象或功能组成的复合组件</li>
</ul>
</li>
</ul>
<h4><span id="interface-testing-接口测试">Interface testing 接口测试</span></h4><ul>
<li>许多组件由几个相互作用的对象组成</li>
<li>测试这些复合组件然后主要关注测试组件接口的行为</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208104515798.png" alt="image-20211208104515798" style="zoom:50%;"></p>
<ul>
<li>接口测试的一些通用指南<ul>
<li>检查要测试的代码并明确列出对外部组件的每次调用</li>
<li>当指针通过接口传递时，始终使用空指针参数测试接口 — pointers</li>
<li>在通过程序接口调用组件的情况下，设计应该导致组件失败的测试</li>
<li>在消息传递系统中使用压力测试，如上一节所述 — stress testing</li>
<li>在多个组件通过共享内存交互的情况下，设计测试以改变这些组件的激活顺序</li>
</ul>
</li>
</ul>
<h4><span id="test-case-design">Test case design</span></h4><ul>
<li>设计测试系统的测试用例（输入和预测输出）</li>
<li>测试用例设计的各种方法<ul>
<li>基于需求的测试，其中测试用例旨在测试系统需求 — Requirements-based testing</li>
<li>分区测试，识别输入和输出分区并设计测试，以便系统执行来自所有分区的输入并在所有分区中生成输出 — Partition testing</li>
<li>结构测试，您使用程序结构的知识来设计测试程序的所有部分 — Structural testing</li>
</ul>
</li>
</ul>
<h5><span id="requirements-based-testing">Requirements-based testing</span></h5><ul>
<li>基于需求的测试是一种系统的测试用例设计方法，您可以在其中考虑每个需求并为其派生一组测试</li>
<li><p>LIBSYS 要求</p>
<ul>
<li>用户应能够搜索所有初始数据库集或从中选择一个子集</li>
<li>系统应提供合适的查看器供用户阅读文档库中的文档</li>
<li>每个订单都应分配一个唯一标识符（ORDER_ID），用户应能够将其复制到帐户永久存储区</li>
</ul>
</li>
<li><p>LIBSYS 测试：</p>
<ul>
<li>发起用户搜索已知存在和已知不存在的项目，其中一组数据库包括一个数据库</li>
<li>…..，包括两个数据库</li>
<li>……，包括两个以上的数据库</li>
<li>从一组数据库中选择一个数据库并启动用户搜索已知存在和已知不存在的项目</li>
<li>从一组数据库中选择一个以上的数据库，然后……</li>
</ul>
</li>
</ul>
<h5><span id="partition-testing">Partition testing</span></h5><ul>
<li>输入数据和输出结果通常属于不同的类，其中一个类的所有成员都是相关的。</li>
<li>这些类中的每一个都是一个等效分区(equivalence partition)或域，其中程序对每个类成员都以等效的方式运行。</li>
<li>应从每个分区中选择测试用例。</li>
</ul>
<p>Equivalence partitioning</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208105102329.png" alt="image-20211208105102329" style="zoom:67%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208105324356.png" alt="image-20211208105324356"></p>
<p>Equivalence partition for search routine</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208105430022.png" alt="image-20211208105430022"></p>
<h5><span id="structural-testing">Structural testing</span></h5><ul>
<li>结构测试是一种测试用例设计的方法，其中测试源自对软件结构和实现的知识</li>
<li>有时称为“白盒”测试</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208105543923.png" alt="image-20211208105543923"></p>
<p>Path testing</p>
<ul>
<li>路径测试是一种<strong>结构测试</strong>策略，其目标是通过组件或程序来执行每条独立的执行路径</li>
<li>通过程序的路径数通常与其大小成正比</li>
<li>路径测试不会测试通过程序的所有路径的所有可能组合</li>
<li>路径测试的起点是程序流程图 (a program flow graph)</li>
<li>路径测试的目标是确保通过程序的每个独立路径至少执行一次</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208105636833.png" alt="image-20211208105636833" style="zoom: 50%;"></p>
<h4><span id="when-to-stop-testing-more-faulty">When to Stop Testing More faulty?</span></h4><p>Probability of finding faults during the development</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208105701057.png" alt="image-20211208105701057" style="zoom:50%;"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208105715142.png" alt="image-20211208105715142"></p>
<h4><span id="fault-seeding">Fault seeding</span></h4><h5><span id="何时停止测试停止方法">何时停止测试停止方法</span></h5><ul>
<li>覆盖标准 Coverage criteria</li>
<li><p>故障播种 Fault seeding</p>
<ul>
<li>$\frac{检测到的种子故障}{种子错误总数} = \frac{检测到的非种子故障}{非种子错误总数}$</li>
</ul>
</li>
<li><p>N=Sn/s</p>
<ul>
<li>S:播种故障数，n找到非播种故障数，其中播种故障s个</li>
</ul>
</li>
<li>两个独立的测试小组测试<ul>
<li>两个小组的有效性 E1=x/n, E2=y/n</li>
<li>两个小组共同发现了q个故障</li>
<li>小组1的有效性 E1=x/n=q/y  并且 E2 =y/n=q/x</li>
<li>因此推导出 n= q/(E1*E2)，用q/y，q/x来模拟有效性</li>
<li>n = x*y/q</li>
</ul>
</li>
</ul>
<h5><span id="何时停止测试识别容易出错的代码">何时停止测试识别容易出错的代码</span></h5><ul>
<li>跟踪开发过程中在每个组件中发现的故障数量</li>
<li>收集关于每个组件的测量（例如，大小、决策数量）</li>
<li>分类树(Classification trees)：一种统计技术，可对大量测量信息进行排序并创建决策树以显示最佳预测值<ul>
<li>树有助于确定哪些组件可能有大量错误</li>
</ul>
</li>
</ul>
<p>An Example of a Classification Tree</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images/image-20211208110525260.png" alt="image-20211208110525260" style="zoom:50%;"></p>
<p>Test automation 测试自动化</p>
<ul>
<li>测试是软件过程中一个昂贵且费力的阶段</li>
<li>一些工具：<ul>
<li>Test manager<br>Test data generator<br>Oracle<br>File comparator<br>Report generator<br>Dynamic analyzer<br>Simulator</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>课程笔记</category>
        <category>软件工程</category>
      </categories>
  </entry>
  <entry>
    <title>Linux3</title>
    <url>/2023/04/06/Linux3/</url>
    <content><![CDATA[<h2><span id="计算机的基本结构和x86结构">计算机的基本结构和X86结构</span></h2><ul>
<li><p>CPU：中央处理器</p>
<ul>
<li>包括三个部分：运算单元、数据单元、控制单元</li>
<li>运算单元：运算器等，做加法、做位移等</li>
<li>数据单元：如CPU内部的缓存和寄存器组，可暂时存放数据和运算结果</li>
<li>控制单元：统一的指挥中心</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/Eagle_kc0pdOikrY.png" alt></p>
</li>
<li><p>Bus：总线，高速通道</p>
<ul>
<li><p>地址总线（Address Bus）</p>
</li>
<li><p>数据总线（Data Bus）</p>
</li>
</ul>
</li>
<li><p>Memory：内存，可保存中间结果</p>
</li>
<li><p>I/O：输入设备和输出设备</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/Eagle_vosEvXkxY5.png" alt="Eagle_vosEvXkxY5"></p>
<h3><span id="8086结构">8086结构</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/Eagle_li0mogYL7W.png" alt="Eagle_li0mogYL7W"></p>
<h4><span id="数据单元">数据单元</span></h4><ul>
<li>16位的通用寄存器：8个<ul>
<li>AX、BX、CX、DX、SP、BP、SI、DI</li>
<li>可分成两个8位使用的寄存器：AX、BX、CX、DX</li>
</ul>
</li>
</ul>
<h4><span id="控制单元">控制单元</span></h4><ul>
<li>IP寄存器：指令指针寄存器，指向代码段中下一条指令位置</li>
<li>16位的段寄存器：4个，指向不同进程的地址空间<ul>
<li>CS、DS、SS、ES</li>
<li>CS：代码段寄存器（Code Segment Register）</li>
<li>DS：数据段寄存器</li>
<li>SS：栈寄存器</li>
<li>CS和DS两者都存储着一个段的起始地址</li>
</ul>
</li>
<li>可知，一个段的大小为$2^{16}=64k$</li>
</ul>
<p>注意点：8086的地址总线地址是20位，即空间为$1M$，而CS、DS都是16位，需要凑足20位，即“<strong>起始地址*16+偏移量</strong>”</p>
<h3><span id="32位处理器">32位处理器</span></h3><ul>
<li><strong>地址总线变为32根</strong>，即内存变为$2^{32}=4G$</li>
<li>扩展通用寄存器：<strong>8个16位拓展到8个32位的</strong>，保留16位和8位的使用方式</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/Eagle_xu0LLe78l2.png" alt="Eagle_xu0LLe78l2"></p>
<ul>
<li>重新定义段寄存器<ul>
<li>内存中某个位置存储着一个<strong>表格</strong>，表格存储着多项段描述符，而<strong>段描述符存放着段起始位置</strong></li>
<li>CS、SS、DS、ES仍为16位，但存储的是<strong>选择子</strong>（Selector），即<strong>段描述符</strong>（Segment Descriptor）在表格中的位置</li>
</ul>
</li>
<li><strong>实模式</strong>（Real Pattern）和<strong>保护模式</strong>（Protected Pattern）<ul>
<li><strong>前者是8086的段寻址方式</strong>，系统刚刚启动时，CPU是处于实模式的</li>
<li><strong>后者是重新定义的段寻址方式</strong>，当需要更多内存时，便转为保护模式</li>
<li>通过<strong>切换模式进行兼容</strong></li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/Eagle_yMzeCiMcCR.png" alt="Eagle_yMzeCiMcCR"></p>
<h2><span id="bios到bootloader">BIOS到bootloader</span></h2><h3><span id="bios时期">BIOS时期</span></h3><ul>
<li><p>全称：<strong>Basic Input and Output System</strong>，即基本输入输出系统</p>
<ul>
<li>位于主板的ROM上，该ROM固化了一些初始化的程序</li>
</ul>
</li>
<li><p>X86系统中，将1M空间最上面的<strong>0xF0000到0xFFFFF</strong>这64K映射给ROM，到这部分地址访问时，会访问ROM</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/Eagle_yFI0BCtMEA.png" alt="Eagle_yFI0BCtMEA" style="zoom:80%;"></p>
<ul>
<li>电源刚加电的时候，会进行重置工作<ul>
<li><strong>CS设置为0xFFFF</strong></li>
<li><strong>IP设置为0x0000</strong></li>
<li>第一条指令会指向<strong>0xFFFF0</strong>，该指令有一个JMP命令，跳到ROM中做初始化工作的代码，BIOS便开始进行初始化的工作</li>
</ul>
</li>
<li>首先，BIOS会检查系统的硬件</li>
<li>然后，建立中断向量表和中断服务程序</li>
</ul>
<h3><span id="bootloader时期">bootloader时期</span></h3><ul>
<li><p>操作系统安装在硬盘上，BIOS界面上有个启动盘的选项</p>
</li>
<li><p><strong>启动盘</strong>一般位于第一个扇区，占<strong>512字节</strong>，且以<strong>0xAA55</strong>结束，会在512字节内启动相关的代码</p>
</li>
<li><p>Linux中有个叫<strong>Grub2</strong>的工具，是搞系统启动的</p>
<ul>
<li><p>全称：<strong>Grand Unified Bootloader Version 2</strong></p>
</li>
<li><p><strong>配置系统启动的选项</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grub2 -mkconfig -o /boot/grub2/grub.cfg</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>将启动程序安装到相应的位置</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grub2 -install /dev/sda</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>grub2第一个安装的是<strong>boot.img</strong>，它由<strong>boot.S</strong>编译而成，有<strong>512字节</strong>，正式安装到启动盘的第一个扇区，该扇区通常称为<strong>MBR</strong>（Master Boot Record，主引导记录/扇区）</p>
</li>
<li><p>BIOS完成任务后，会将<strong>boot.img</strong>从硬盘加载到内存中的<strong>0x7c00</strong>来运行，<strong>boot.img</strong>会加载grub2的另一个镜像<strong>core.img</strong></p>
</li>
<li><p><strong>core.img</strong>由<strong>lzma_decompress.img、diskboot.img、kernel.img</strong>和一系列模块组成，功能丰富</p>
</li>
<li><p><strong>boot.img</strong>先加载的是<strong>core.img</strong>的第一个扇区，从硬盘启动的话，这个扇区存储着<strong>diskboot.img</strong>，对应代码为<strong>diskboot.S</strong></p>
</li>
<li><p><strong>boot.img</strong>将控制权交给<strong>diskboot.img</strong>，<strong>diskboot.img</strong>的任务是将<strong>core.img</strong>的其他部分加载进来</p>
<ul>
<li>首先是解压缩程序<strong>lzma_decompress.img</strong>，对应代码是<strong>stratup_raw.S</strong>，<strong>执行时，会调用real_to_prot，切换到保护模式</strong></li>
<li>然后是<strong>kernel.img</strong>，它是压缩过的，执行时需要解压缩</li>
<li>最后是各个模块module对应的映像</li>
</ul>
</li>
</ul>
<h3><span id="从实模式切换到保护模式">从实模式切换到保护模式</span></h3><ol>
<li><strong>启用分段</strong><ul>
<li>在内存里面建立<strong>段描述符表</strong>，将寄存器里面的段存储器变成段选择子，指向某个段描述符</li>
</ul>
</li>
<li><p><strong>启动分页</strong></p>
<ul>
<li>将内存分成相等大小的块</li>
</ul>
</li>
<li><p><strong>打开Gate A20</strong></p>
<ul>
<li>即第21根地址线的控制线</li>
<li>切换保护模式的函数<strong>DATA32 call real_to_prot</strong>会打开Gate A20</li>
</ul>
</li>
<li>解压缩<strong>kernel.img</strong>，跳转到<strong>kernel.img</strong>开始运行<ul>
<li><strong>kernel.img</strong>对应代码为<strong>startup.S</strong>和一堆c文件</li>
<li><strong>startup.S</strong>会调用<strong>grub_main</strong>，是<strong>grub kernel</strong>的主函数，该函数里的<strong>grub_load_config()</strong>会开始解析<strong>grub.conf</strong>文件中的配置信息</li>
<li>正常启动时，<strong>grub_main</strong>最后会调用<strong>grub_command_execute(“normal”, 0, 0)</strong>，最终会调用<strong>grub_normal_execute()</strong>函数，该函数中的<strong>grub_show_menu()</strong>会显示出让你选择的操作系统的列表</li>
<li>选定启动某个操作系统后，就开始调用<strong>grub_menu_execute_entry()</strong>，解析并执行选择项<ul>
<li>如<strong>linux16</strong>命令，表示装载指定的内核文件，并传递内核启动参数，<strong>grub_cmd_linux()</strong> 函数会被调用，会首先读取 Linux 内核镜像头部的一些数据结构，放到内存中的数据结构来，进行检查。如果检查通过，则会读取整个 Linux 内核镜像到内存</li>
<li><strong>initrd</strong> 命令，用于为即将启动的内核传递 init ramdisk 路径。于是grub_cmd_initrd() 函数会被调用，将 initramfs 加载到内存中来。</li>
</ul>
</li>
<li>然后，<strong>grub_command_execute(“boot”, 0, 0)</strong>才开始真正启动内核</li>
</ul>
</li>
</ol>
<h2><span id="内核初始化">内核初始化</span></h2><h3><span id="内核的启动">内核的启动</span></h3><ul>
<li><p>从入口函数<strong>strat_kernel()</strong>开始</p>
</li>
<li><p>在 <strong>init/main.c</strong> 文件中，<strong>start_kernel</strong> 相当于内核的 main 函数，里面是各种各样的初始化函数XXXX_init</p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/Eagle_7XBvFBrNJy.png" alt="Eagle_7XBvFBrNJy" style="zoom:80%;"></p>
<ul>
<li>进程列表初始化：创始进程<ul>
<li><strong>set_task_stack_end_magic(&amp;init_task)</strong></li>
<li>也称为<strong>0号进程</strong>，是<strong>唯一一个没有通过 fork 或者 kernel_thread 产生的进程</strong>，是进程列表的第一个</li>
<li>Process List（进程列表）</li>
</ul>
</li>
<li>中断初始化：trap_init()中设置了很多<strong>中断门</strong>（Interrupt Gate），用于处理各种中断，响应用户需求<ul>
<li>其中有一个<strong>set_system_intr_gate(IA32_SYSCALL_VECTOR, entry_INT80_32)</strong>，是系统调用的中断门</li>
<li>系统调用也是通过发送中断的方式进行的</li>
<li>64位的有另外的系统调用方法</li>
</ul>
</li>
<li>内存初始化：<strong>mm_init()</strong>就是用来初始化内存管理模块的</li>
<li>调度初始化：<strong>sched_init()</strong>是用来初始化调度模块的</li>
<li>基于内存的文件系统rootfs的初始化：调用<strong>vfs_caches_init()</strong><ul>
<li>在该函数里面，会调用<strong>mnt_init()-&gt;init_rootfs()</strong>，其中有一行代码，<strong>register_filesystem(&amp;rootfs_fs_type)</strong>。在 VFS 虚拟文件系统里面注册了一种类型，我们定义为 <strong>struct file_system_type rootfs_fs_type</strong></li>
<li>为兼容各种各样的文件系统，将文件的相关数据结构和操作抽象出来，形成一个抽象层对上提供统一的结构，该抽象层即为<strong>VFS（Virtual File System），虚拟文件系统</strong></li>
</ul>
</li>
<li>其他方面的初始化：调用<strong>rest_init()</strong></li>
</ul>
<h3><span id="初始化一号进程">初始化一号进程</span></h3><ul>
<li><p><strong>rest_init()</strong>的第一个大工作便是，用 <strong>kernel_thread(kernel_init, NULL, CLONE_FS)</strong> 创建第二个进程，这个是<strong>1 号进程</strong>。</p>
<ul>
<li>该进程是用户态所有进程的祖先</li>
<li>1号进程将运行一个用户进程，一旦有了用户进程，资源便需要进行区分以及分配，所以x86提供了分层的权限机制，把区域分成了四个Ring，越往里权限越高，越往外权限越低</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/Eagle_fZBd4yoRAd.png" alt="Eagle_fZBd4yoRAd"></p>
<ul>
<li>Ring0：存放访问关键资源的代码，也称为<strong>内核态（Kernel Mode）</strong></li>
<li>Ring3：存放普通的代码程序，也称为<strong>用户态（User Mode）</strong></li>
<li>系统处于保护模式时，除了可访问空间变大，另一个功能便是保护，当处于用户态的代码想要执行更高权限的指令，这种行为是被禁止的</li>
<li>当用户态程序要访问核心资源时，可以进行系统调用，此时会暂停用户态程序的执行，进入内核态，内核完成相应操作后，系统调用结束，暂停的程序继续运行<ul>
<li>暂停的实现：把程序运行的情况保存下来，把当前CPU寄存器的值暂存到一个地方，系统调用结束后，返回时再恢复回去</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/Eagle_8UYzYWWzu1.png" alt="Eagle_8UYzYWWzu1"></p>
<ul>
<li>整个过程：用户态 — 系统调用 — 保存寄存器 — 内核态执行系统调用 — 恢复寄存器 — 返回用户态继续运行</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/Eagle_DEOUixLW9T.png" alt="Eagle_DEOUixLW9T" style="zoom:50%;"></p>
</li>
</ul>
<h4><span id="从内核态到用户态">从内核态到用户态</span></h4><ul>
<li><p>在执行<strong>kernel_thread</strong>函数，即创建1号进程的时候，我们处于内核态</p>
</li>
<li><p>当需要到用户态去运行一个程序时</p>
<ul>
<li><strong>kernel_thread</strong>的一个参数为一个函数<strong>kernel_init</strong>，该进程会运行这个函数</li>
<li>在<strong>kernel_init</strong>里面，会调用<strong>kernel_init_freeable()</strong>，其中有段代码</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!ramdisk_execute_command)</span><br><span class="line">	ramdisk_execute_command = <span class="string">&quot;/init&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>而在<strong>kernel_init</strong>函数中，有段代码块</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(ramdisk_execute_command) &#123;</span><br><span class="line">	ret = run_init_process(ramdisk_execute_command);</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!try_to_run_init_process(<span class="string">&quot;/sbin/init&quot;</span>) ||</span><br><span class="line">   !try_to_run_init_process(<span class="string">&quot;/etc/init&quot;</span>) ||</span><br><span class="line">   !try_to_run_init_process(<span class="string">&quot;/bin/init&quot;</span>) ||</span><br><span class="line">   !try_to_run_init_process(<span class="string">&quot;/bin/sh&quot;</span>))</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;	</span><br><span class="line"></span><br><span class="line"><span class="comment">// run_init_process代码</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">run_init_process</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *init_filename)</span> </span>&#123;</span><br><span class="line">    argv_init[<span class="number">0</span>] = init_filename;</span><br><span class="line">    <span class="keyword">return</span> do_execve(getname_kernel(init_filename),</span><br><span class="line">                    (<span class="keyword">const</span> <span class="keyword">char</span> __user *<span class="keyword">const</span> __user *)argv_init,</span><br><span class="line">                    (<span class="keyword">const</span> <span class="keyword">char</span> __user *<span class="keyword">const</span> __user *)envp_init);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>这说明，<strong>1号进程运行的是一个文件</strong>，<strong>run_init_process</strong>函数中调用的是<strong>do_execve</strong><ul>
<li><strong>execve</strong>是一个系统调用，其作用是运行一个执行文件</li>
</ul>
</li>
<li><p>它尝试取运行ramdisk的”/init”，或者普通文件系统上的”/sbin/init”、”/etc/init”、”/bin/init”、”/bin/sh”。不同版本的Linux会选择不同的文件启动，只要启动一个就可以了</p>
</li>
<li><p>利用执行init文件的机会，从内核态回到用户态，在运行init时，调用了do_execve，其中，<strong>do_execve -&gt; do_execveat_common -&gt;exec_binprm -&gt; search_binary_handler</strong>，这里面会调用一段代码：</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search_binary_handler</span><span class="params">(struct linux_binprm *bprm)</span> </span>&#123;</span><br><span class="line">	......</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">linux_binfmt</span> *<span class="title">fmt</span>;</span></span><br><span class="line">	......</span><br><span class="line">	retval = fmt-&gt;load_binary(bprm);</span><br><span class="line">	.....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>也就是说，要运行一个程序，需要加载这个二进制文件，他是有一定格式的</li>
<li>Linux一个常用的格式是<strong>ELF（Executable and Linkable Format，可执行与可链接格式）</strong></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">linux_binfmt</span> <span class="title">elf_format</span> =</span> &#123;</span><br><span class="line">    .<span class="keyword">module</span> = THIS_MODULE,</span><br><span class="line">    .load_binary = load_elf_binary,</span><br><span class="line">    .load_shlib = load_elf_library,</span><br><span class="line">    .core_dump = elf_core_dump,</span><br><span class="line">    .min_coredump = ELF_EXEC_PAGESIZE,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>其实就是先调用<strong>load_elf_binary</strong>，最后调用<strong>start_thread</strong></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span></span></span><br><span class="line"><span class="function"><span class="title">start_thread</span><span class="params">(struct pt_regs *regs, <span class="keyword">unsigned</span> <span class="keyword">long</span> new_ip,</span></span></span><br><span class="line"><span class="params"><span class="function">             <span class="keyword">unsigned</span> <span class="keyword">long</span> new_sp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    set_user_gs(regs, <span class="number">0</span>);</span><br><span class="line">    regs-&gt;fs = <span class="number">0</span>;</span><br><span class="line">    regs-&gt;ds = __USER_DS;</span><br><span class="line">    regs-&gt;es = __USER_ES;</span><br><span class="line">    regs-&gt;ss = __USER_SS;</span><br><span class="line">    regs-&gt;cs = __USER_CS;</span><br><span class="line">    regs-&gt;ip = new_ip;</span><br><span class="line">    regs-&gt;sp = new_sp;</span><br><span class="line">    regs-&gt;flags = X86_EFLAGS_IF;</span><br><span class="line">    force_iret();</span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL_GPL(start_thread);</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>pt_regs</strong>便是寄存器，是在系统调用时内核用于保存用户态运行上下文的</li>
<li>将用户态的代码段CS设置为<strong>_USER_CS</strong>，将用户态的数据段DS设置为<strong>_USER_DS</strong>，还有指令指针寄存器IP和栈指针寄存器SP，补上了系统调用中保存寄存器的步骤</li>
<li>iret是用于从系统调用中返回，这时候会恢复寄存区，CS和IP恢复了，指向用户态下一个要执行的语句，DS和SP也恢复了，指向用户态函数栈的栈顶，下一条指令便从用户态开始运行</li>
</ul>
</li>
</ul>
<h4><span id="ramdisk的作用">ramdisk的作用</span></h4><ul>
<li>init在上面步骤中从内核态到用户态了，一开始到用户态的是ramdisk的init，后来会启动真正根文件系统上的init，成为所有用户态进程的祖先</li>
<li>Linux访问存储设备，要有驱动才能访问，如果存储系统数目很有限，那驱动可直接放到内核中</li>
<li>但如果存储系统太多了，都放进内核，内核就太大了，因此，我们先弄一个基于内存的文件系统<ul>
<li>内存访问是不需要驱动的，这个就是ramdisk，此时它便是根文件系统</li>
</ul>
</li>
<li>运行ramdisk上的/init，等它运行完了就已经在用户态了</li>
<li>/init程序会先根据存储系统的类型来加载驱动，有了驱动就可以设置真正的根文件系统，ramdisk上的/init会启动文件系统上的init</li>
<li>接下来便是各种系统的初始化，启动系统的服务和控制台，用户便可以登录进来。</li>
</ul>
<h3><span id="创建2号进程">创建2号进程</span></h3><ul>
<li><strong>rest_init</strong>第二件大事情便是第三个进程—2号进程<ul>
<li>该进程<strong>统一管内核态的进程</strong></li>
</ul>
</li>
<li><strong>kernel_thread(kthreadd, NULL, CLONE_FS|CLONE_FILES)</strong>又一次使用kernel_thread函数创建进程</li>
<li>从内核态来看，无论是进程还是线程，我们可以统称为任务(Task)，都使用相同结构</li>
<li><strong>kthreadd</strong>函数，负责所有内核态的线程的调度和管理，是内核态所有线程运行的祖先</li>
</ul>
<h3><span id="小结">小结</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/Eagle_r7yARfs6Hr.png" alt="Eagle_r7yARfs6Hr"></p>
<h2><span id="系统调用">系统调用</span></h2><h3><span id="glibc对系统调用的封装">glibc对系统调用的封装</span></h3><div class="table-container">
<table>
<thead>
<tr>
<th>glibc</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>syscalls.list</td>
<td>罗列所有glibc的函数对应的系统调用</td>
</tr>
<tr>
<td>make-syscall.sh</td>
<td>根据syscalls.list配置文件，对封装好的系统调用生成文件</td>
</tr>
<tr>
<td>syscall-template.S</td>
<td>使用宏，定义了系统调用的调用方式</td>
</tr>
</tbody>
</table>
</div>
<p>以系统调用open为例子，看系统调用是如何实现的，解析从glibc中是如何调用到内核的open</p>
<ul>
<li>我们开始在用户态进程里面调用open函数，为了方便，大部分用户会选择使用中介，即调用的是glibc里面的open函数</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">\\ open函数的定义</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *pathname, <span class="keyword">int</span> flags, <span class="keyword">mode_t</span> mode)</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>在glibc的源代码中，有个文件<strong>syscalls.list</strong>，里面列着所有glibc的函数对应的系统调用</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"># File name Caller  Syscall name    Args    Strong name    Weak names</span><br><span class="line">  open         -      open         Ci:siv    __libc_open   __open ope</span><br></pre></td></tr></table></figure>
<ul>
<li>glibc还有一个脚本<strong>make-syscall.sh</strong>，可根据上面的配置文件，对于每一个封装好的系统调用，生成一个文件<ul>
<li>该文件里面定义了一些宏，例如#define SYSCALL_NAME open</li>
</ul>
</li>
<li>glibc还有一个文件<strong>syscall-template.S</strong>，使用上面这个宏，定义了这个系统调用的调用方式</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">T_PSEUDO (SYSCALL_SYMBOL, SYSCALL_NAME, SYSCALL_NARGS)</span><br><span class="line">	<span class="function">ret</span></span><br><span class="line"><span class="function"><span class="title">T_PSEUDO_END</span> <span class="params">(SYSCALL_SYMBOL)</span></span></span><br><span class="line"><span class="function">   </span></span><br><span class="line"><span class="function"><span class="meta">#<span class="meta-keyword">define</span> T_PSEUDO(SYMBOL, NAME, N)        PSEUDO (SYMBOL, NAME, N)</span></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>
<p>这里的PSEUDO也是一个宏，定义如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PSEUDO(name, syscall_name, args)   \</span></span><br><span class="line"><span class="meta">	.text;								   \</span></span><br><span class="line"><span class="meta">	ENTRY (name)                           \</span></span><br><span class="line"><span class="meta">	  DO_CALL(syscall_name, args);         \</span></span><br><span class="line"><span class="meta">	  cmpl $-4095, %eax;                   \</span></span><br><span class="line"><span class="meta">	  jae SYSCALL_ERROR_LABEL                 </span></span><br></pre></td></tr></table></figure>
<p>里面对于任何一个系统调用，都会调用<strong>DO_CALL</strong>，这也是一个宏，这个宏32位和64位的定义不同</p>
<h3><span id="32位系统调用过程">32位系统调用过程</span></h3><p>sysdep.h文件</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">* Linux takes system call arguments in registers:</span><br><span class="line">    syscall number  %eax         call-clobbered</span><br><span class="line">    arg <span class="number">1</span>           %ebx         call-saved</span><br><span class="line">    arg <span class="number">2</span>           %ecx         call-clobbered</span><br><span class="line">    arg <span class="number">3</span>           %edx         call-clobbered        </span><br><span class="line">    arg <span class="number">4</span>           %esi         call-saved        </span><br><span class="line">    arg <span class="number">5</span>           %edi         call-saved        </span><br><span class="line">    arg <span class="number">6</span>           %ebp         call-saved</span><br><span class="line">......</span><br><span class="line">*/</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DO_CALL(syscall_name, args)                           \    </span></span><br><span class="line">	PUSHARGS_#<span class="meta">#args                               \</span></span><br><span class="line"><span class="meta">    DOARGS_##args                                 \</span></span><br><span class="line"><span class="meta">    movl $SYS_ify (syscall_name), %eax;                          \</span></span><br><span class="line"><span class="meta">    ENTER_KERNEL                                  \</span></span><br><span class="line"><span class="meta">    POPARGS_##args</span></span><br></pre></td></tr></table></figure>
<ul>
<li>我们请求参数放在寄存器里面，根据系统调用的名称，得到系统调用号，放在寄存器<strong>eax</strong>中，然后执行<strong>ENTER_KERNEL</strong></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">define</span> ENTER_KERNEL int $0x80</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>int就是interrupt，中断的意思，int  $0x80就是触发一个软中断，通过它可以陷入(trap)内核</p>
</li>
<li><p>内核启动的时候，有一个<strong>trap_init()</strong>，其中有这样的代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">set_system_intr_gate(IA32_SYSCALL_VECTOR, entry_INT80_32)</span><br></pre></td></tr></table></figure>
<ul>
<li>这是一个软中断的陷入门，当接收到一个系统调用的时候，<strong>entry_INT80_32</strong>就被调用了</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ENTRY(entry_INT80_32)</span><br><span class="line">    ASM_CLAC</span><br><span class="line">    pushl   %eax                    <span class="comment">/* pt_regs-&gt;orig_ax */</span></span><br><span class="line">    SAVE_ALL pt_regs_ax=$-ENOSYS    <span class="comment">/* save rest */</span></span><br><span class="line">    movl    %esp, %eax        </span><br><span class="line">    call    do_syscall_32_irqs_on</span><br><span class="line">.Lsyscall_32_done:</span><br><span class="line">......</span><br><span class="line">.Lirq_return:</span><br><span class="line">	INTERRUPT_RETURN</span><br></pre></td></tr></table></figure>
<ul>
<li>通过push和SAVE_ALL将当前用户态的寄存器，保存在pt_regs结构里面</li>
</ul>
</li>
<li><p>进入内核之前，保存所有的寄存器，然后调用<strong>do_syscall_32_irqs_on(即DO_CALL)</strong>，实现如下</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> __always_inline <span class="keyword">void</span> <span class="title">do_syscall_32_irqs_on</span><span class="params">(struct pt_regs *regs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">thread_info</span> *<span class="title">ti</span> =</span> current_thread_info();</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> nr = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)regs-&gt;orig_ax;</span><br><span class="line">	......</span><br><span class="line">	<span class="keyword">if</span> (likely(nr &lt; IA32_NR_syscalls)) &#123;</span><br><span class="line">		regs-&gt;ax = ia32_sys_call_table[nr](</span><br><span class="line">			(<span class="keyword">unsigned</span> <span class="keyword">int</span>)regs-&gt;bx, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)regs-&gt;cx,</span><br><span class="line">			(<span class="keyword">unsigned</span> <span class="keyword">int</span>)regs-&gt;dx, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)regs-&gt;si,</span><br><span class="line">			(<span class="keyword">unsigned</span> <span class="keyword">int</span>)regs-&gt;di, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)regs-&gt;bp);</span><br><span class="line">	&#125;</span><br><span class="line">	syscall_return_slowpath(regs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><p>在这里，可以看到，将系统调用号从<strong>eax</strong>里面取出来，然后根据系统调用号，在系统调用表中找到相应的函数进行调用，并将寄存器中保存的参数取出来，作为函数参数</p>
</li>
<li><p>根据宏定义，<strong>#define ia32_sys_call_table sys_call_table</strong>，系统调用就是放在这个表里面</p>
</li>
<li><p>当系统调用结束之后，在<strong>entry_INT80_32</strong>之后，紧接着调用的是<strong>INTERRUPT_RETURN</strong>，找到它的定义，也就是<strong>iret</strong></p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INTERRUPT_RETURN   iret</span></span><br></pre></td></tr></table></figure>
<ul>
<li>iret指令将原来用户态保存的现场恢复回来，包含代码段、指令指针寄存器等，此时用户态进程恢复执行</li>
</ul>
<h4><span id="小结">小结</span></h4><p><img src="https://cdn.jsdelivr.net/gh/Ye2222/blogImage@main/images2/Eagle_bILzSuHPt8.png" alt="Eagle_bILzSuHPt8" style="zoom:80%;"></p>
<h3><span id="64位系统调用过程">64位系统调用过程</span></h3><p>x86_64的sysdep.h文件</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* The Linux/x86-64 kernel expects the system call parameters in</span></span><br><span class="line"><span class="comment">registers according to the following table:</span></span><br><span class="line"><span class="comment">syscall number rax</span></span><br><span class="line"><span class="comment">    arg 1 rdi</span></span><br><span class="line"><span class="comment">    arg 2 rsi</span></span><br><span class="line"><span class="comment">    arg 3 rdx</span></span><br><span class="line"><span class="comment">    arg 4 r10</span></span><br><span class="line"><span class="comment">    arg 5 r8</span></span><br><span class="line"><span class="comment">    arg 6 r9</span></span><br><span class="line"><span class="comment">......</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DO_CALL(syscall_name, args)       \</span></span><br><span class="line"><span class="meta">    lea SYS_ify (syscall_name), %rax;       \</span></span><br><span class="line"><span class="meta">    syscall</span></span><br></pre></td></tr></table></figure>
<ul>
<li>跟32位的步骤一样，将系统调用名称转换为系统调用号，放到寄存器rax。但是这里是真正进行调用，不是用中断了，改用syscall指令了，传递参数的寄存器也变了</li>
<li>syscall指令使用了一种特殊的寄存器，叫<strong>特殊模块寄存器（Model Specific Registers，简称MSR）</strong><ul>
<li>这种寄存器是CPU为完成某些特殊控制功能为目的的寄存器，其中就有系统调用</li>
</ul>
</li>
<li>系统初始化的时候，trap_init除了初始化上面的中断模式，还会调用<strong>cpu_init-&gt;syscall_init</strong>，其中有段代码：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">wrmsrl(MSR_LSTAR, (<span class="keyword">unsigned</span> <span class="keyword">long</span>)entry_SYSCALL_64);</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>rdmsr</strong>和<strong>wrmsr</strong>是用来读写特殊模块寄存器的<ul>
<li><strong>MSR_LSTAR</strong>是一个特殊的寄存器，当<strong>syscall</strong>指令调用的时候，会从寄存器里面拿出函数地址来调用，也就是调用<strong>entry_SYSCALL_64</strong></li>
<li>在arch/x86/entry/entry_64.S中定义了<strong>entry_SYSCALL_64</strong></li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> ENTER(entry_SYSCALL_64)  </span><br><span class="line">		pushq   $__USER_DS                      <span class="comment">/* pt_regs-&gt;ss */</span></span><br><span class="line">        <span class="function">pushq   <span class="title">PER_CPU_VAR</span><span class="params">(rsp_scratch)</span>        <span class="comment">/* pt_regs-&gt;sp */</span></span></span><br><span class="line"><span class="function">        pushq   %r11                            <span class="comment">/* pt_regs-&gt;flags */</span></span></span><br><span class="line"><span class="function">        pushq   $__USER_CS                      <span class="comment">/* pt_regs-&gt;cs */</span></span></span><br><span class="line"><span class="function">        pushq   %rcx                            <span class="comment">/* pt_regs-&gt;ip */</span></span></span><br><span class="line"><span class="function">        pushq   %rax                            <span class="comment">/* pt_regs-&gt;orig_ax */</span></span></span><br><span class="line"><span class="function">        pushq   %rdi                            <span class="comment">/* pt_regs-&gt;di */</span></span></span><br><span class="line"><span class="function">        pushq   %rsi                            <span class="comment">/* pt_regs-&gt;si */</span></span></span><br><span class="line"><span class="function">        pushq   %rdx                            <span class="comment">/* pt_regs-&gt;dx */</span></span></span><br><span class="line"><span class="function">        pushq   %rcx                            <span class="comment">/* pt_regs-&gt;cx */</span></span></span><br><span class="line"><span class="function">        pushq   $-ENOSYS                        <span class="comment">/* pt_regs-&gt;ax */</span></span></span><br><span class="line"><span class="function">        pushq   %r8                             <span class="comment">/* pt_regs-&gt;r8 */</span></span></span><br><span class="line"><span class="function">        pushq   %r9                             <span class="comment">/* pt_regs-&gt;r9 */</span></span></span><br><span class="line"><span class="function">        pushq   %r10                            <span class="comment">/* pt_regs-&gt;r10 */</span></span></span><br><span class="line"><span class="function">        pushq   %r11                            <span class="comment">/* pt_regs-&gt;r11 */</span></span></span><br><span class="line"><span class="function">        sub     $<span class="params">(<span class="number">6</span>*<span class="number">8</span>)</span>, %rsp            <span class="comment">/* pt_regs-&gt;bp, bx, r12-15 not saved */</span></span></span><br><span class="line"><span class="function">        movq    <span class="title">PER_CPU_VAR</span><span class="params">(current_task)</span>, %r11</span></span><br><span class="line"><span class="function">        testl   $_TIF_WORK_SYSCALL_ENTRY|_TIF_ALLWORK_MASK, <span class="title">TASK_TI_flags</span><span class="params">(%r11)</span></span></span><br><span class="line"><span class="function">        jnz     entry_SYSCALL64_slow_path</span></span><br><span class="line"><span class="function">......</span></span><br><span class="line"><span class="function">entry_SYSCALL64_slow_path:</span></span><br><span class="line"><span class="function">		<span class="comment">/* IRQs are off. */</span>        </span></span><br><span class="line"><span class="function">		SAVE_EXTRA_REGS        </span></span><br><span class="line"><span class="function">		movq    %rsp, %rdi        </span></span><br><span class="line"><span class="function">		call    do_syscall_64           <span class="comment">/* returns with IRQs disabled */</span></span></span><br><span class="line"><span class="function">return_from_SYSCALL_64:</span></span><br><span class="line"><span class="function">		RESTORE_EXTRA_REGS</span></span><br><span class="line"><span class="function">		TRACE_IRQS_IRETQ</span></span><br><span class="line"><span class="function">		movq <span class="title">RCX</span><span class="params">(%rsp)</span>, %rcx</span></span><br><span class="line"><span class="function">		movq <span class="title">RIP</span><span class="params">(%rsp)</span>, %r11</span></span><br><span class="line"><span class="function">        movq <span class="title">R11</span><span class="params">(%rsp)</span>, %r11</span></span><br><span class="line"><span class="function">......</span></span><br><span class="line"><span class="function">syscall_return_via_sysret:</span></span><br><span class="line"><span class="function">	<span class="comment">/* rcx and r11 are already restored (see code above) */</span></span></span><br><span class="line"><span class="function">	RESTORE_C_REGS_EXCEPT_RCX_R11</span></span><br><span class="line"><span class="function">    movq <span class="title">RSP</span><span class="params">(%rsp)</span>, %rsp</span></span><br><span class="line"><span class="function">    USERGS_SYSRET64</span></span><br><span class="line"><span class="function">    </span></span><br></pre></td></tr></table></figure>
<ul>
<li>这里先保存了很多寄存器到pt_regs结构里面，例如用户态的代码段、数据段、保存参数的寄存器</li>
<li>然后调用<strong>entry_SYSCALL64_slow_pat-&gt;do_syscall_64</strong></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__visible <span class="keyword">void</span> <span class="title">do_syscall_64</span><span class="params">(strcut pt_regs *regs)</span> </span>&#123;</span><br><span class="line">	strcut thread_info *ti = current_thread_info();</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> nr = regs-&gt;orig_ax;</span><br><span class="line">......</span><br><span class="line">	<span class="keyword">if</span>(likely((nr &amp; __SYSCALL_MASK) &lt; NR_syscalls)) &#123;</span><br><span class="line">			regs-&gt;ax = sys_call_table[nr &amp; __SYSCALL_MASK] (</span><br><span class="line">				regs-&gt;di, regs-&gt;si, regs-&gt;dx,</span><br><span class="line">				regs-&gt;r10, regs-&gt;r8, regs-&gt;r9</span><br><span class="line">			);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在do_syscall_64里面，从rax里面拿出系统调用号，然后根据系统调用号，在<strong>系统调用表sys_call_table</strong>中找到相应的函数进行调用，并将寄存器中保存的参数取出来，作为函数参数</p>
<ul>
<li>无论是32位还是64位，都会到系统调用表sys_call_table这里来</li>
<li>系统调用返回时，执行的是USERGS_SYSRET64</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> USERGS_SYSRET64</span></span><br><span class="line">	swapgs;</span><br><span class="line">	sysretq;</span><br></pre></td></tr></table></figure>
<p>返回用户态的指令变成了sysretq</p>
<h4><span id="小结">小结</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/p8fS7nVqpr.png" alt="p8fS7nVqpr" style="zoom:80%;"></p>
<h3><span id="系统调用表">系统调用表</span></h3><p>32位的系统调用表定义在<strong>arch/x86/entry/syscalls/syscall_32.tbl</strong></p>
<p>以open的定义为例</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span> i386 open  sys_open  compat_sys_open</span><br></pre></td></tr></table></figure>
<p>64位的系统调用定义在另一个文件arch/x86/entry/syscalls/syscall_64.tbl里</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span> common open  sys_open</span><br></pre></td></tr></table></figure>
<ul>
<li>第一列数字是系统调用号<ul>
<li>可看出，32位和64位的系统调用号是不一样的</li>
</ul>
</li>
<li>第三列是系统调用的名字</li>
<li>第四列是系统调用在内核的实现函数</li>
</ul>
<p>系统调用在内核中的实现函数要有一个声明，往往在include/linux/syscall.h文件中</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sys_open的声明</span></span><br><span class="line"><span class="function">asmlinkage <span class="keyword">long</span> <span class="title">sys_open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> __user *filename,</span></span></span><br><span class="line"><span class="params"><span class="function">						<span class="keyword">int</span> flag, <span class="keyword">umode_t</span> mode)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>真正实现这个系统调用的一般在一个.c文件里面，例如sys_open的实现在fs/open.c里面</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">SYSCALL_DEFINE3(open, <span class="keyword">const</span> <span class="keyword">char</span> __user *, filename, <span class="keyword">int</span>, flags, <span class="keyword">umode_t</span>, mode)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (force_o_largefile())</span><br><span class="line">		flags |= O_LARGEFILE;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> do_sys_open(AT_FDCWD, filename, flags, mode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>SYSCALL_DEFINE3是一个宏系统调用，最多6个参数，根据参数的数目选择宏，具体定义如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYSCALL_DEFINE1(name, ...) SYSCALL_DEFINEx(1, _##name, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYSCALL_DEFINE2(name, ...) SYSCALL_DEFINEx(2, _##name, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYSCALL_DEFINE3(name, ...) SYSCALL_DEFINEx(3, _##name, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYSCALL_DEFINE4(name, ...) SYSCALL_DEFINEx(4, _##name, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYSCALL_DEFINE5(name, ...) SYSCALL_DEFINEx(5, _##name, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYSCALL_DEFINE6(name, ...) SYSCALL_DEFINEx(6, _##name, __VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYSCALL_DEFINEx(x, sname, ...)                          \        	</span></span><br><span class="line">    SYSCALL_METADATA(sname, x, __VA_ARGS__)                 \        </span><br><span class="line">    __SYSCALL_DEFINEx(x, sname, __VA_ARGS__)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __PROTECT(...) asmlinkage_protect(__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __SYSCALL_DEFINEx(x, name, ...)                                 \  </span></span><br><span class="line">    asmlinkage <span class="keyword">long</span> sys#<span class="meta">#name(__MAP(x,__SC_DECL,__VA_ARGS__))       \</span></span><br><span class="line"><span class="meta">    		__attribute__((alias(__stringify(SyS##name))));         \</span></span><br><span class="line"><span class="meta">    static inline long SYSC##name(__MAP(x,__SC_DECL,__VA_ARGS__));  \</span></span><br><span class="line"><span class="meta">    asmlinkage long SyS##name(__MAP(x,__SC_LONG,__VA_ARGS__));      \</span></span><br><span class="line"><span class="meta">    asmlinkage long SyS##name(__MAP(x,__SC_LONG,__VA_ARGS__))       \</span></span><br><span class="line"><span class="meta">    &#123;                                                               \                	long ret = SYSC##name(__MAP(x,__SC_CAST,__VA_ARGS__));  \</span></span><br><span class="line"><span class="meta">        __MAP(x,__SC_TEST,__VA_ARGS__);                         \</span></span><br><span class="line"><span class="meta">        __PROTECT(x, ret,__MAP(x,__SC_ARGS,__VA_ARGS__));       \</span></span><br><span class="line"><span class="meta">        return ret;                                             \        </span></span><br><span class="line">    &#125;                                                               \</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">long</span> SYSC#<span class="meta">#name(__MAP(x,__SC_DECL,__VA_ARGS_</span></span><br></pre></td></tr></table></figure>
<p>把宏展开之后，实现如下，和声明是一样的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">asmlinkage <span class="keyword">long</span> <span class="title">sys_open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> __user *filename,</span></span></span><br><span class="line"><span class="params"><span class="function">						<span class="keyword">int</span> flags, <span class="keyword">int</span> mode)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">long</span> ret;</span><br><span class="line">	<span class="keyword">if</span>(force_o_largefile())</span><br><span class="line">		flags |= O_LARGEFILE;</span><br><span class="line">	ret = do_sys_open(AT_FDCWD, filename, flags, mode);</span><br><span class="line">	asmlinkage_protect(<span class="number">3</span>, ret, filename, flags, mode);</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;						</span><br></pre></td></tr></table></figure>
<ul>
<li>声明和实现都好了，接下来，在编译过程中，根据syscall_32.tbl和syscall_64.tbl生成自己的unistd_32.h和unistd_64.h。生成方式在arch/x86/entry/syscalls/Makefile中</li>
<li><p>这里面会使用两个脚本</p>
<ul>
<li>第一个脚本arch/x86/entry/syscalls/syscallhdr.sh，会在文件中生成#define __NR_open</li>
<li>第二个脚本arch/x86/entry/syscalls/syscalltbl.sh，会在文件中生成__SYSCALL(__NR_open, sys_open)</li>
<li>这样，unistd_32.h和unistd_64.h是对应的系统调用号和系统调用实现函数之间的对应关系</li>
</ul>
</li>
<li><p>在文件arch/x86/entry/syscall_32.c中，定义了这样一个表，里面include了这个头文件，从而所有的sys_系统调用都在这个表里面了</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__visible <span class="keyword">const</span> <span class="keyword">sys_call_ptr_t</span> ia32_sys_call_table[__NR_syscall_compat_max+<span class="number">1</span>] = &#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Smells like a compiler bug -- it doesn&#x27;t work</span></span><br><span class="line"><span class="comment">	 * when the &amp; below is removed.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	[<span class="number">0</span> ... __NR_syscall_compat_max] = &amp;sys_ni_syscall,</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/syscalls_32.h&gt;</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>同理，在文件arch/x86/entry/syscall_64.c，定义了这样一个表，里面include了这个头文件，这样所有的sys_系统调用都在这个表里面了</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">asmlinkage <span class="keyword">const</span> <span class="keyword">sys_call_ptr_t</span> sys_call_table[__NR_syscall_max+<span class="number">1</span>] = &#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Smells like a compiler bug -- it doesn&#x27;t work</span></span><br><span class="line"><span class="comment">	 * when the &amp; below is removed.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	[<span class="number">0</span> ... __NR_syscall_max] = &amp;sys_ni_syscall,</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/syscalls_64.h&gt;</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4><span id="小结">小结</span></h4><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/Eagle_xkjph5ZaQg.png" alt="Eagle_xkjph5ZaQg" style="zoom:80%;"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux4</title>
    <url>/2023/04/10/Linux4/</url>
    <content><![CDATA[<h2><span id="进程">进程</span></h2><h3><span id="写代码用系统调用创建进程">写代码：用系统调用创建进程</span></h3><p>process.c函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">create_process</span><span class="params">(<span class="keyword">char</span>* program, <span class="keyword">char</span>** arg_list)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">create_process</span><span class="params">(<span class="keyword">char</span>* program, <span class="keyword">char</span>** arg_list)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">pid_t</span> child_pid;</span><br><span class="line">        child_pid = fork();</span><br><span class="line">        <span class="keyword">if</span> (child_pid != <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> child_pid;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">                execvp(program, arg_list);</span><br><span class="line">                <span class="built_in">abort</span>();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>createprocess.c函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// createprocess.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">create_process</span><span class="params">(<span class="keyword">char</span>* program, <span class="keyword">char</span>** arg_list)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>* arg_list[] = &#123;</span><br><span class="line">                <span class="string">&quot;ls&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-l&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/etc/yum.repos.d/&quot;</span>,</span><br><span class="line">                <span class="literal">NULL</span></span><br><span class="line">        &#125;;</span><br><span class="line">        create_process(<span class="string">&quot;ls&quot;</span>, arg_list);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3><span id="进行编译程序的二进制格式">进行编译：程序的二进制格式</span></h3><ul>
<li>Linux下面，二进制的程序有严格的格式，即为<strong>ELF（Executeable and Linkable Format，可执行与可链接格式）</strong></li>
<li>根据编译结果的不同，分为不同的格式</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>ELF格式</th>
<th></th>
<th>文件后缀</th>
</tr>
</thead>
<tbody>
<tr>
<td>可重定位文件</td>
<td>Relocatable File</td>
<td>.o</td>
</tr>
<tr>
<td>可执行文件</td>
<td>Executeable File</td>
<td>无后缀</td>
</tr>
<tr>
<td>共享对象文件</td>
<td>Share Object</td>
<td>.so</td>
</tr>
</tbody>
</table>
</div>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/Eagle_2hEvuGXtsh.png" alt="Eagle_2hEvuGXtsh" style="zoom:50%;"></p>
<p>使用gcc进行编译</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -c -fPIC process.c</span><br><span class="line">gcc -c -fPIC createprocess.c</span><br></pre></td></tr></table></figure>
<ul>
<li>在编译的时候，会先做预处理工作<ul>
<li>如将头文件嵌入到正文中，将定义的宏展开</li>
</ul>
</li>
<li>然后是真正的编译过程</li>
<li>最后编译成为.o文件，这就是ELF的第一种类型，<strong>可重定位文件（Relocatable File）</strong><ul>
<li>这里会生成process.o和createprocess.o两个文件</li>
</ul>
</li>
</ul>
<h3><span id="可重定位文件">可重定位文件</span></h3><p>文件格式如下：</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/Eagle_5jVXbzmkIQ.png" alt="Eagle_5jVXbzmkIQ" style="zoom:67%;"></p>
<p>ELF文件的头是用于描述整个文件的，<strong>文件格式在内核中有定义，分别为strcut elf32_hdr和strcut elf64_hdr</strong>，ELF文件一个一个的<strong>section</strong>，叫做<strong>节</strong></p>
<ul>
<li>.text：放<strong>编译好的二进制可执行文件</strong></li>
<li>.data：已经初始化好的<strong>全局变量</strong></li>
<li>.rodata：<strong>只读数据</strong>，例如字符串常量、const的变量</li>
<li>.bss：<strong>未初始化全局变量</strong>，运行时会置0</li>
<li>.symtab：<strong>符号表</strong>，记录的则是函数和变量</li>
<li>.strtab：<strong>字符串表、字符串常量和变量名</strong></li>
</ul>
<blockquote>
<p>注意点：为什么这里只有全局变量？</p>
<p>局部变量是放在栈里面的，是程序运行过程中随时分配空间，随时释放的，现在讨论的是二进制文件，还没有启动，只需讨论在哪里保存全局变量</p>
</blockquote>
<ul>
<li>这些节的元数据信息需要有一个地方保存，就是最后的<strong>节头部表（Section Header Table）</strong></li>
<li>在表里，每一个section都有一项，在代码里面也有定义的struct elf32_shdr和struct elf64_shdr</li>
<li>在ELF的头里面，有描述这个文件的节头部表的位置，有多少个表项等信息</li>
</ul>
<blockquote>
<p>可重定位的意义</p>
<p>编译好的代码和变量，将来加载到内存里面的时候，都是要加载到一定位置的，但是现在还是一个.o文件，不是一个可直接运行的程序，只是部分代码片段，将来被谁调用，在哪里调用都不清楚，所以.o里面的位置是不确定的，但是必须是可重新定位的，因为它将来是要做函数库的</p>
</blockquote>
<ul>
<li><p>.rel.text和.rel.data与重定位有关</p>
</li>
<li><p>要想让create_process函数作为库文件被重用，不能以.o的形式存在，而是要形成库文件，最简单的类型是<strong>静态链接库.a文件</strong>（Archives），仅仅将一系列对象文件（.o)归档为一个文件，使用命令ar创建</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ar cr libstaticprocess.a process.o</span><br></pre></td></tr></table></figure>
<p><u>这里可以有多个.o</u>，当有程序要使用这个静态链接库的时候，会将.o文件提取出来，链接到程序中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -o staticcreateprocess createprocess.o -L. -lstaticprocess</span><br></pre></td></tr></table></figure>
<ul>
<li>在这个命令中，-L表示在当前目录下找.a文件，-lstaticprocess会自动补全文件名，比如加前缀lib，后缀.a，变成libstaticprocess.a</li>
<li><p>找到这个.a文件后，将里面的process.o取出来，和createprocess.o做一个链接，形成二进制执行文件staticcreateprocess</p>
</li>
<li><p>这个链接的过程，重定位就起作用了，createprocess.o将process.o合并进来，就知道create_process函数的位置了</p>
</li>
</ul>
<h3><span id="可执行文件">可执行文件</span></h3><p>形成的二进制文件叫<strong>可执行文件</strong>，是ELF的第二种格式</p>
<p>文件格式如下：</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/Eagle_U4RyvvQMXV.png" alt="Eagle_U4RyvvQMXV" style="zoom:67%;"></p>
<ul>
<li>与.o文件大致相似，分成一个个的section，并且被节头表描述</li>
<li>这些section是多个.o文件合并过的</li>
<li><p>这个时候，这个文件已经是马上就可以加载到内存里面执行的文件了，因此这些section被分成了几个部分</p>
<ul>
<li>需要加载到内存里面的代码段、数据段</li>
<li>不需要加载到内存里面的部分</li>
</ul>
</li>
<li><p>将小的section合成了大的段segment，并且在最前面加一个段表头(Segment Header Table)</p>
</li>
<li>在代码里面的定义为<strong>struct elf32_phdr和struct elf64_phdr</strong>，这里面除了有对于段的描述之外，最重要的是<strong>p_vaddr</strong>，这个是这段加载到内存的虚拟地址</li>
<li><p>在ELF头里面，有一项e_entry，也是个虚拟地址，是这个程序运行的入口</p>
</li>
<li><p>运行该程序后，会执行ls命令</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ./staticcreateprocess</span><br><span class="line">[root@localhost ~]# total 40</span><br><span class="line">-rw-r--r--. 1 root root 1664 Oct 23  2020 CentOS-Base.repo</span><br><span class="line">-rw-r--r--. 1 root root 1309 Oct 23  2020 CentOS-CR.repo</span><br><span class="line">-rw-r--r--. 1 root root  649 Oct 23  2020 CentOS-Debuginfo.repo</span><br><span class="line">-rw-r--r--. 1 root root  314 Oct 23  2020 CentOS-fasttrack.repo</span><br><span class="line">-rw-r--r--. 1 root root  630 Oct 23  2020 CentOS-Media.repo</span><br><span class="line">-rw-r--r--. 1 root root 1331 Oct 23  2020 CentOS-Sources.repo</span><br><span class="line">-rw-r--r--. 1 root root 8515 Oct 23  2020 CentOS-Vault.repo</span><br><span class="line">-rw-r--r--. 1 root root  616 Oct 23  2020 CentOS-x86_64-kernel.repo</span><br></pre></td></tr></table></figure>
<h3><span id="共享对象文件">共享对象文件</span></h3><ul>
<li><p>静态链接库一旦链接进去，代码和变量的section都合并了，因而程序运行的时候，就不依赖这个库是否存在</p>
<ul>
<li>但有一个缺点，就是相同代码段，被多个程序使用，在内存里面就有多份</li>
<li>而且一旦静态链接库更新，如二进制执行文件不重新编译，也不会随着更新</li>
</ul>
</li>
<li><p>因此，出现了<strong>动态链接库（Shared Lirary）</strong></p>
<ul>
<li>不仅仅是一组对象文件的简单归档，而是多个对象文件的重新组合，可被多个程序共享</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -shared -fPIC -o libdynamicprocesss.so process.o</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意点：</p>
<p>当一个动态链接库被链接到一个程序文件中时，最后的程序文件<strong>并不包括动态链接库中的代码</strong>，而仅仅包括对动态链接库的引用，并且不保存动态链接库的全路径，仅仅保存链接库的名称</p>
</blockquote>
</li>
<li><p>创建可执行文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -o dynamiccreateprocess createprocess.o -L. -ldynamicprocess</span><br></pre></td></tr></table></figure>
</li>
<li><p>当运行这个程序的时候，首先寻找动态链接库，然后加载它</p>
<ul>
<li>默认情况下，系统在<strong>/lib和/usr/lib</strong>文件夹下寻找动态链接库，找不到就会报错</li>
<li>可以设定<strong>LD_LIBRARY_PATH环境变量</strong>，程序运行时会在此环境变量指定的文件夹下寻找动态链接库</li>
</ul>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# export LD_LIBRARY_PATH=.</span><br><span class="line">[root@localhost ~]# ./dynamiccreateprocess</span><br><span class="line">[root@localhost ~]# total 40</span><br><span class="line">-rw-r--r--. 1 root root 1664 Oct 23  2020 CentOS-Base.repo</span><br><span class="line">-rw-r--r--. 1 root root 1309 Oct 23  2020 CentOS-CR.repo</span><br><span class="line">-rw-r--r--. 1 root root  649 Oct 23  2020 CentOS-Debuginfo.repo</span><br><span class="line">-rw-r--r--. 1 root root  314 Oct 23  2020 CentOS-fasttrack.repo</span><br><span class="line">-rw-r--r--. 1 root root  630 Oct 23  2020 CentOS-Media.repo</span><br><span class="line">-rw-r--r--. 1 root root 1331 Oct 23  2020 CentOS-Sources.repo</span><br><span class="line">-rw-r--r--. 1 root root 8515 Oct 23  2020 CentOS-Vault.repo</span><br><span class="line">-rw-r--r--. 1 root root  616 Oct 23  2020 CentOS-x86_64-kernel.repo</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><p>基于动态链接库创建出来的二进制文件格式还是ELF，但是稍有不同</p>
<ul>
<li>首先，多了一个<strong>.interp</strong>的Segment，这里面是Id-linux.so，这是动态链接器，运行时的链接动作都是它做的</li>
<li>另外，ELF文件中还多了两个section<ul>
<li>一个是<strong>.plt，过程链接表（Proced Linkage Table，PLT）</strong></li>
<li>一个是<strong>.got.plt，全局偏移量表（Global Offset Table，GOT）</strong></li>
</ul>
</li>
</ul>
</li>
<li><p>程序运行的时候，它们是如何将so文件动态链接到进程空间的？</p>
<ul>
<li>dynamiccreateprocess这个程序要调用libdynamicprocess.so里的create_process函数</li>
<li>由于是运行时才去找，编译的时候不知道函数在哪里，所以就在<strong>PLT里面建立一项PLT[x]</strong><ul>
<li>这一项是一些代码，有点像一个本地的代理，在二进制程序里面，不直接调用create_process函数，而是调用PTL[x]里面的代理代码，这个代理代码会在运行的时候找真正的create_process函数</li>
</ul>
</li>
<li>会<strong>使用GOT来找代理代码</strong>，这里面也会为create_process函数创建一项GOT[y]<ul>
<li>这一项是运行时create_process函数在内存中真正的地址</li>
<li>如果这个地址在，dynamiccreateprocess调用PLT[x]里面的代理代码，代理代码调用GOT表中对应项GOT[y]，调用的就是加载到内存中的libdynamicprocess.so里面的create_process函数了</li>
</ul>
</li>
<li>对于create_process函数，<strong>GOT一开始就会创建一项GOT[y]</strong>，但是这里面没有真正的地址，因为它也不知道，但它又回调PLT，告诉它，你里面的代码代理来找我要create_process函数的真实地址，但我不知道。</li>
<li><strong>PLT这个时候会转而调用PLT[0]，即第一项，PLT[0]转而调用GOT[2]</strong>，这里面是ld-linux.so的入口函数<ul>
<li>这个函数会找到加载到内存中的libdynamicprocess.so里面的create_process函数的地址，然后把这个地址放在GOT[y]里面</li>
<li>下次，PLT[x]的代理函数就能够直接调用了</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3><span id="运行程序为进程">运行程序为进程</span></h3><p>我们现在知道了ELF这个格式，但这个时候它还是个程序，如何将这个文件加载到内存里面</p>
<ul>
<li>在内核中，有一个数据结构被用来定义加载二进制文件的方法</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">linux_binfmt</span> &#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">lh</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">module</span> *<span class="title">module</span>;</span></span><br><span class="line">	<span class="keyword">int</span> (*load_binary)(struct linux_binprm *);</span><br><span class="line">	<span class="keyword">int</span> (*load_shlib)(struct file *);</span><br><span class="line">	<span class="keyword">int</span> (*core_dump)(struct coredump_params *cprm);</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> min_coredump;		<span class="comment">/* minimal dump size */</span></span><br><span class="line">&#125;__randomize_layout;</span><br></pre></td></tr></table></figure>
<ul>
<li>对于ELF文件格式，有对应的实现</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">linux_binfmt</span> <span class="title">elf_format</span> =</span> &#123;</span><br><span class="line">	.<span class="keyword">module</span> = THIS_MODULE,</span><br><span class="line">	.load_binary = load_elf_binary,</span><br><span class="line">	.load_shlib = load_elf_library,</span><br><span class="line">	.core_dump = elf_core_dump,</span><br><span class="line">	.min_coredump = ELF_EXEC_PAGESIZE,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><p>其中，load_elf_binary我们在加载内核镜像的时候，用的也是这种格式。</p>
</li>
<li><p>当前的具体调用过程为：do_execve -&gt; do_execveat_common -&gt; exec_binprm -&gt; search_binary_hander.</p>
</li>
<li><p>调用do_execve的是SYSCALL_DEFINE3函数，原理是exec这个系统调用最终调用的load_elf_binary</p>
</li>
<li><p>exec比较特殊，它是一组函数：</p>
<ul>
<li>包含p的函数（execvp，execlp）会<strong>在PATH路径下面寻找程序</strong></li>
<li>不包含p的函数<strong>需要输入程序的全路径</strong></li>
<li>包含v的函数（execv，execvp，execve）以<strong>数组的形式接受参数</strong></li>
<li>包含l的函数（execl, execlp, execle）以<strong>列表的形式接受参数</strong></li>
<li>包含e的函数（execve, execle）以<strong>数组的形式接受环境变量</strong></li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/Eagle_evG3SkhucY.png" alt="Eagle_evG3SkhucY"></p>
</blockquote>
<h3><span id="进程树">进程树</span></h3><p>所有的进程都是从父进程fork过来的，总有一个祖宗进程，就是系统启动的init进程</p>
<ul>
<li><p>解析Linux的启动过程中，1号进程是/sbin/init</p>
<ul>
<li>如果在CentOS 7里面，我们ls查看，可以看到，这个进程是被软链接到systemd的</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ls -la  /sbin/init</span><br><span class="line">lrwxrwxrwx. 1 root root 22 Apr 10 03:53 /sbin/init -&gt; ../lib/systemd/systemd</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/Eagle_1hH49oTa2q.png" alt="Eagle_1hH49oTa2q"></p>
<ul>
<li>系统启动之后，init进程会启动很多的daemon进程，为系统运行提供服务，然后启动getty，让用户登录，登录后运行shell，用户启动的进程都是通过shell运行的，从而形成了一棵进程树</li>
<li>通过<strong>ps -ef</strong>命令查看当前系统启动的进程<ul>
<li>PID 1的进程是init进程systemd</li>
<li>PID 2的进程是内核线程kthreadd</li>
<li>用户态的不带中括号，内核态的带中括号</li>
<li>进程号依次增大，但是会看到所有带中括号的内核态的进程，祖先都是2号进程，用户态的进程的祖先都是1号进程</li>
<li>TTY一列，是问号的，说明不是前台启动的，一般都是后台的服务</li>
<li>pts的父进程是sshd，bash的父进程是pts，ps -ef的父进程是bash</li>
</ul>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ps -ef</span><br><span class="line">UID         PID   PPID  C STIME TTY          TIME CMD</span><br><span class="line">root          1      0  0 Apr10 ?        00:00:02 /usr/lib/systemd/systemd --switched-root --system --d</span><br><span class="line">root          2      0  0 Apr10 ?        00:00:00 [kthreadd]</span><br><span class="line">root          4      2  0 Apr10 ?        00:00:00 [kworker/0:0H]</span><br><span class="line">root          6      2  0 Apr10 ?        00:00:00 [ksoftirqd/0]</span><br><span class="line">root          7      2  0 Apr10 ?        00:00:00 [migration/0]</span><br><span class="line">root          8      2  0 Apr10 ?        00:00:00 [rcu_bh]</span><br><span class="line">root          9      2  0 Apr10 ?        00:00:00 [rcu_sched]</span><br><span class="line">root         10      2  0 Apr10 ?        00:00:00 [lru-add-drain]</span><br><span class="line">root         11      2  0 Apr10 ?        00:00:00 [watchdog/0]</span><br><span class="line">root         12      2  0 Apr10 ?        00:00:00 [watchdog/1]</span><br><span class="line">root         13      2  0 Apr10 ?        00:00:00 [migration/1]</span><br><span class="line">root         14      2  0 Apr10 ?        00:00:00 [ksoftirqd/1]</span><br><span class="line">root         16      2  0 Apr10 ?        00:00:00 [kworker/1:0H]</span><br><span class="line">.....</span><br><span class="line">root        922    792  0 Apr10 ?        00:00:00 /sbin/dhclient -d -q -sf /usr/libexec/nm-dhcp-helper</span><br><span class="line">root       1116      1  0 Apr10 ?        00:00:00 /usr/sbin/sshd -D</span><br><span class="line">.....</span><br><span class="line">root       2091   1116  0 Apr10 ?        00:00:00 sshd: root@pts/0</span><br><span class="line">root       2095   1116  0 Apr10 ?        00:00:00 sshd: root@notty</span><br><span class="line">root       2101   2091  0 Apr10 pts/0    00:00:00 -bash</span><br><span class="line">.....</span><br><span class="line">root       5532    712  0 00:03 ?        00:00:00 sleep 60</span><br><span class="line">root       5533   2101  0 00:03 pts/0    00:00:00 ps -ef</span><br></pre></td></tr></table></figure>
<h3><span id="小结">小结</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/Eagle_hCgqpyDwCp.png" alt="Eagle_hCgqpyDwCp" style="zoom: 80%;"></p>
<ul>
<li>首先通过图右边的文件编译过程，生成so文件和可执行文件，放在硬盘上</li>
<li>左边的用户态的进程A执行fork，创建进程B</li>
<li>在进程B的处理逻辑中，执行exec系列的系统调用<ul>
<li>这个系统调用会通过load_elf_binary方法，将刚才生成的可执行文件，加载到进程B的内存中执行</li>
</ul>
</li>
</ul>
<h2><span id="线程">线程</span></h2><h3><span id="为什么需要线程">为什么需要线程</span></h3><ul>
<li>对于任何一个进程，即使我们没有主动去创建线程，进程也是默认有一个主线程的</li>
<li><strong>线程是负责执行二进制指令的</strong></li>
<li>进程要比线程管的多，除了执行指令之外，内存、文件系统等都要它来管</li>
</ul>
<blockquote>
<p>进程相当于一个项目，线程就是为了完成需求，建立的一个个开发任务</p>
</blockquote>
<ul>
<li>使用进程实现并发执行有两个主要问题<ul>
<li>第一，创建进程占用资源太多</li>
<li>第二，进程之间的通信需要数据在不同的内存空间传来传去，无法共享</li>
</ul>
</li>
</ul>
<h3><span id="创建进程">创建进程</span></h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM_OF_TASKS 5</span></span><br><span class="line"><span class="comment">// 线程函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">downloadfile</span><span class="params">(<span class="keyword">void</span> *filename)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;I am downloading the file %s!\n&quot;</span>, (<span class="keyword">char</span> *)filename);</span><br><span class="line">    sleep(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">long</span> downloadtime = rand()%<span class="number">100</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I finish downloading the file within %d minutes!\n&quot;</span>, downloadtime);</span><br><span class="line">    pthread_exit((<span class="keyword">void</span> *)downloadtime);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> files[NUM_OF_TASKS][<span class="number">20</span>] = &#123;<span class="string">&quot;file1.avi&quot;</span>, <span class="string">&quot;file2.rmvb&quot;</span>, <span class="string">&quot;file3.mp4&quot;</span>, <span class="string">&quot;file4.wmv&quot;</span>, <span class="string">&quot;file5.md&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">pthread_t</span> threads[NUM_OF_TASKS];</span><br><span class="line">    <span class="keyword">int</span> rc;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="keyword">int</span> downloadtime;</span><br><span class="line">    <span class="comment">// 声明线程对象，设置线程属性</span></span><br><span class="line">    <span class="keyword">pthread_attr_t</span> thread_attr;</span><br><span class="line">    pthread_attr_init(&amp;thread_attr);</span><br><span class="line">    pthread_attr_setdetachstate(&amp;thread_attr, PTHREAD_CREATE_JOINABLE);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(t = <span class="number">0</span>; t &lt; NUM_OF_TASKS; t++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;createing thread %d, please help me to download %s\n&quot;</span>, t, files[t]);</span><br><span class="line">        <span class="comment">// 创建线程</span></span><br><span class="line">        rc = pthread_create(&amp;threads[t], &amp;thread_attr, downloadfile, (<span class="keyword">void</span> *)files[t]);</span><br><span class="line">        <span class="keyword">if</span>(rc) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;ERROR; return code from pthread_create() is %d\n&quot;</span>, rc);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 销毁线程属性</span></span><br><span class="line">    pthread_attr_destroy(&amp;thread_attr);</span><br><span class="line">    <span class="keyword">for</span>(t = <span class="number">0</span>; t &lt; NUM_OF_TASKS; t++) &#123;</span><br><span class="line">        <span class="comment">// 等待线程结束</span></span><br><span class="line">        pthread_join(threads[t], (<span class="keyword">void</span>**)&amp;downloadtime);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Thread %d downloads the file %s in %d minutes.\n&quot;</span>, t, files[t], downloadtime);</span><br><span class="line">    &#125;</span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>一个运行中的线程可以调用pthread_exit退出线程</p>
<ul>
<li>该函数可以传入一个参数转换为(void *)类型，是线程退出的返回值</li>
</ul>
</li>
<li><p>主线程里</p>
<ul>
<li><p>列了5个文件名，声明了一个数组，里面有5个pthread_t类型的线程对象</p>
</li>
<li><p>声明了一个线程属性pthread_attr_t，通过pthread_attr_init初始化这个属性，并且设置属性PTHTREAD_CREATE_JOINABLE，表示将来主线程等待这个线程的结束，并获取退出时的状态</p>
</li>
<li><p>接下来是一个循环，对于每一个文件和每一个线程，可以调用pthread_create创建线程。</p>
<ul>
<li>一共有4个参数，第一个参数是线程对象，第二个参数是线程的属性，第三个参数是线程运行函数，第四个参数是线程运行函数的参数</li>
<li>主线程就是通过第4个参数，将自己的任务派给子线程</li>
</ul>
</li>
</ul>
</li>
<li><p>任务分配完成后，每个线程下载一个文件，主线程需要做的事情就是等待这些子任务完成</p>
</li>
<li><p>当一个线程退出的时候，就会发送信号给其他所有同进程的线程</p>
</li>
<li>使用pthread_join获取这个线程退出的返回值，线程的返回值通过pthread_join传给主线程，这样子线程就将自己下载文件所消耗的时间，告诉给主线程</li>
</ul>
<blockquote>
<p>多线程程序要依赖于libpthread.so</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gcc download.c -lpthread</span><br></pre></td></tr></table></figure>
<p>编译后执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost thread]# ./a.out</span><br><span class="line">createing thread 0, please help me to download file1.avi</span><br><span class="line">createing thread 1, please help me to download file2.rmvb</span><br><span class="line">I am downloading the file file1.avi!</span><br><span class="line">createing thread 2, please help me to download file3.mp4</span><br><span class="line">createing thread 3, please help me to download file4.wmv</span><br><span class="line">I am downloading the file file2.rmvb!</span><br><span class="line">createing thread 4, please help me to download file5.md</span><br><span class="line">I am downloading the file file3.mp4!</span><br><span class="line">I am downloading the file file4.wmv!</span><br><span class="line">I am downloading the file file5.md!</span><br><span class="line">I finish downloading the file within 83 minutes!</span><br><span class="line">Thread 0 downloads the file file1.avi in 83 minutes.</span><br><span class="line">I finish downloading the file within 86 minutes!</span><br><span class="line">I finish downloading the file within 77 minutes!</span><br><span class="line">I finish downloading the file within 15 minutes!</span><br><span class="line">I finish downloading the file within 93 minutes!</span><br><span class="line">Thread 1 downloads the file file2.rmvb in 15 minutes.</span><br><span class="line">Thread 2 downloads the file file3.mp4 in 77 minutes.</span><br><span class="line">Thread 3 downloads the file file4.wmv in 86 minutes.</span><br><span class="line">Thread 4 downloads the file file5.md in 93 minutes.</span><br></pre></td></tr></table></figure>
<h3><span id="小结">小结</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/Eagle_PSYRytJZwx.png" alt="Eagle_PSYRytJZwx" style="zoom:80%;"></p>
<h3><span id="线程的数据">线程的数据</span></h3><ul>
<li><p>线程访问的数据细分为3类</p>
<ul>
<li><p><strong>线程栈上的本地数据</strong>，如函数执行过程中的局部变量</p>
<ul>
<li>栈的大小可以通过命令ulimit -a查看，默认情况下线程栈大小为8192（8MB）<ul>
<li>可通过命令ulimit -s修改</li>
</ul>
</li>
<li>对于线程栈，可通过函数pthread_attr_setstacksize，来修改线程栈的大小</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_attr_setstacksize</span><span class="params">(<span class="keyword">pthread_attr_t</span> *attr, <span class="keyword">size_t</span> stacksize)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>主线程在内存中有一个栈空间，其他线程栈也拥有独立的栈空间</li>
<li>为避免线程之间的栈空间踩踏，线程栈之间还会有小块区域用来隔离保护各自的栈空间，一旦另一个线程踏入隔离区，会引发段错误</li>
</ul>
</li>
<li><p><strong>在整个进程里共享的全局数据</strong>，如全局变量</p>
<ul>
<li>如果同一个全局变量，两个线程一起修改，肯定会有问题，需要有一种机制保护他们</li>
</ul>
</li>
<li><p><strong>线程私有数据（Thread Specific Data）</strong></p>
<ul>
<li>可通过以下函数创建</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_key_create</span><span class="params">(<span class="keyword">pthread_key_t</span> *key, <span class="keyword">void</span> (*destructor)(<span class="keyword">void</span>*))</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>创建一个key，伴随着一个析构函数</li>
<li><p>一旦key被创建，所有线程都可访问它，但各线程可根据自身需要往key中填入不同的值，相当于提供了一个同名而不同值的全局变量</p>
</li>
<li><p>可通过下面的函数设置key对应的value</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_setspecific</span><span class="params">(<span class="keyword">pthread_key_t</span> key, <span class="keyword">const</span> <span class="keyword">void</span> *value)</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>获取key对应的value</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">pthread_getspecific</span><span class="params">(<span class="keyword">pthread_key_t</span> key)</span></span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3><span id="数据保护">数据保护</span></h3><h4><span id="互斥mutexmutual-exclusion">互斥（Mutex，Mutual Exclusion）</span></h4><ul>
<li>在共享数据访问的时候，申请加把锁，谁拿到锁，谁就有访问权限，遵循谁先拿到谁访问</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM_OF_TASKS 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> money_of_tom = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> money_of_jerry = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pthread_mutex_t</span> g_money_lock;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">transfer</span><span class="params">(<span class="keyword">void</span> *notused)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> tid = pthread_self();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Thread %u is transfering money!\n&quot;</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)tid);</span><br><span class="line">    </span><br><span class="line">    pthread_mutex_lock(&amp;g_money_lock);</span><br><span class="line">    </span><br><span class="line">    sleep(rand()%<span class="number">10</span>);</span><br><span class="line">    money_of_tom += <span class="number">10</span>;</span><br><span class="line">    sleep(rand()%<span class="number">10</span>);</span><br><span class="line">    money_of_jerry -= <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    pthread_mutex_unlock(&amp;g_money_lock);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Thread %u finish transfering money!\n&quot;</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)tid);</span><br><span class="line">    pthread_exit((<span class="keyword">void</span> *)<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> threads[NUM_OF_TASKS];</span><br><span class="line">    <span class="keyword">int</span> rc;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    </span><br><span class="line">    pthread_mutex_init(&amp;g_money_lock, <span class="literal">NULL</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(t = <span class="number">0</span>; t &lt; NUM_OF_TASKS; t++) &#123;</span><br><span class="line">        rc = pthread_create(&amp;threads[t], <span class="literal">NULL</span>, transfer, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span>(rc) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;ERROR; return code from pthred_create() is %d\n&quot;</span>, rc);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(t = <span class="number">0</span>; t &lt; <span class="number">100</span>; t++) &#123;</span><br><span class="line">        pthread_mutex_lock(&amp;g_money_lock);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;money_of_tom + money_of_jerry = %d\n&quot;</span>, money_of_tom+money_of_jerry);</span><br><span class="line">        pthread_mutex_unlock(&amp;g_money_lock);</span><br><span class="line">    &#125;</span><br><span class="line">    pthread_mutex_destroy(&amp;g_money_lock);</span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>如果没有加上mutex，那么中间的状态会很不正确，会出现超过200的情况</li>
<li><p>加上mutex后，可以保证两者之和永远都是200</p>
</li>
<li><p>使用Mutex，首先要使用pthread_mutex_init函数初始化这个mutex，初始化后，用它保护共享变量</p>
</li>
<li>pthread_mutex_lock()是抢那个锁的函数，抢到了，可以执行下一行程序，对共享变量进行访问；没抢到，被阻塞在那里瞪大</li>
<li>如不想被阻塞，可以使用pthread_mutex_trylock去抢锁</li>
<li>共享数据访问结束后，使用pthread_mutex_unlock释放锁，让给其他人使用</li>
<li>最后调用pthread_mutex_destroy销毁锁</li>
</ul>
<h3><span id="小结">小结</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/Eagle_4u0EZ1Cs28.png" alt="Eagle_4u0EZ1Cs28" style="zoom:80%;"></p>
<ul>
<li>如果使用pthread_mutex_lock()，需要一直在那里等待</li>
<li>如果是pthread_mutex_trylock()，就不用等待，可以去干点别的<ul>
<li>需要条件变量来进行通知，条件变量和互斥锁是配合使用的</li>
</ul>
</li>
</ul>
<h3><span id="条件变量">条件变量</span></h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM_OF_TASKS 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_TASK_QUEUE 11</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> tasklist[MAX_TASK_QUEUE] = <span class="string">&quot;ABCDEFGHIJ&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> head = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> tail = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> quit = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pthread_mutex_t</span> g_task_lock;</span><br><span class="line"><span class="keyword">pthread_cond_t</span> g_task_cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">coder</span><span class="params">(<span class="keyword">void</span> *notused)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">pthread_t</span> tid = pthread_self();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(!quit) &#123;</span><br><span class="line">		pthread_mutex_lock(&amp;g_task_lock);</span><br><span class="line">		<span class="comment">// 当前没有任务可以做了</span></span><br><span class="line">		<span class="keyword">while</span>(tail == head) &#123;</span><br><span class="line">			<span class="keyword">if</span>(quit) &#123;</span><br><span class="line">				pthread_mutex_unlock(&amp;g_task_lock);</span><br><span class="line">				pthread_exit((<span class="keyword">void</span> *)<span class="number">0</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;No task now! Thread %u is waiting!\n&quot;</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)tid);</span><br><span class="line">            <span class="comment">// 这里会解锁，然后等待条件变量</span></span><br><span class="line">			pthread_cond_wait(&amp;g_task_cv, &amp;g_task_lock);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Have task now! Thread %u is grabing the task!\n&quot;</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)tid);</span><br><span class="line">		&#125;  </span><br><span class="line">		<span class="keyword">char</span> task = tasklist[head++];</span><br><span class="line">		pthread_mutex_unlock(&amp;g_task_lock);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Thread %u has a task %c now!\n&quot;</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)tid, task);</span><br><span class="line">		sleep(<span class="number">5</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Thread %u finish the task %c!\n&quot;</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)tid, task);</span><br><span class="line">	&#125;</span><br><span class="line">	pthread_exit((<span class="keyword">void</span> *)<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">	<span class="keyword">pthread_t</span> threads[NUM_OF_TASKS];</span><br><span class="line">	<span class="keyword">int</span> rc;</span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	<span class="comment">// 初始化</span></span><br><span class="line">	pthread_mutex_init(&amp;g_task_lock, <span class="literal">NULL</span>);</span><br><span class="line">	pthread_cond_init(&amp;g_task_cv, <span class="literal">NULL</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(t = <span class="number">0</span>; t &lt; NUM_OF_TASKS; t++) &#123;</span><br><span class="line">        <span class="comment">// 创建线程</span></span><br><span class="line">		rc = pthread_create(&amp;threads[t], <span class="literal">NULL</span>, coder, <span class="literal">NULL</span>);</span><br><span class="line">		<span class="keyword">if</span>(rc) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;ERROR; return code from pthred_create() is %d\n&quot;</span>, rc);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(t = <span class="number">1</span>; t &lt;= <span class="number">4</span>; t++) &#123;</span><br><span class="line">        pthread_mutex_lock(&amp;g_task_lock);</span><br><span class="line">        <span class="comment">// 分配任务</span></span><br><span class="line">        tail += t;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;I am Boss, I assigned %d tasks, I notify all coder!\n&quot;</span>, t);</span><br><span class="line">        <span class="comment">// 操作了共享变量后，通知所有线程</span></span><br><span class="line">        pthread_cond_broadcast(&amp;g_task_cv);</span><br><span class="line">        pthread_mutex_unlock(&amp;g_task_lock);</span><br><span class="line">        sleep(<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    pthread_mutex_lock(&amp;g_task_lock);</span><br><span class="line">    quit = <span class="number">1</span>;</span><br><span class="line">    pthread_cond_broadcast(&amp;g_task_cv);</span><br><span class="line">    pthread_mutex_lock(&amp;g_task_lock);</span><br><span class="line">    </span><br><span class="line">    pthread_mutex_destroy(&amp;g_task_lock);</span><br><span class="line">    pthread_cond_destroy(&amp;g_task_cv);</span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>有10个任务，每个任务一个字符</li>
<li>有两个变量head和tail，表示当前分配的工作从哪里开始，到哪里结束<ul>
<li>如果head等于tail，则当前的工作分配完毕</li>
<li>如果tail加N，就是新分配了N个工作</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/Eagle_arcLTUhV44.png" alt="Eagle_arcLTUhV44" style="zoom:80%;"></p>
<h3><span id="总结">总结</span></h3><p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/Eagle_K3NMoooTyb.png" alt="Eagle_K3NMoooTyb" style="zoom:80%;"></p>
<h3><span id="进程数据结构">进程数据结构</span></h3><blockquote>
<p>有的线程只有一个线程，有的进程有多个线程，它们都需要由内核分配CPU来干活。但是CPU总共就那么几个，应该怎么管理，怎么进行调度呢</p>
</blockquote>
<ul>
<li>在Linux里面，无论是进程，还是线程，到了内核里面，我们统一都叫<strong>任务（Task）</strong>，由一个统一的结构<strong>task_struct</strong>进行管理</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/Eagle_Hlo0uYbBS3.png" alt="Eagle_Hlo0uYbBS3" style="zoom:67%;"></p>
<ul>
<li>首先，Linux内核应该先弄一个<strong>链表</strong>，将所有的task_struct串起来</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">tasks</span></span></span><br></pre></td></tr></table></figure>
<h3><span id="任务">任务</span></h3><h4><span id="任务id">任务ID</span></h4><ul>
<li><p>每一个任务都应该有一个ID，作为任务的唯一标识</p>
</li>
<li><p>task_struct里面涉及任务ID的，有以下几个</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pid_t</span> pid;</span><br><span class="line"><span class="keyword">pid_t</span> tgid;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">group_leader</span>;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>为什么会有多个标识呢？是因为上面的进程和线程到了内核这里，统一变成了任务，带来了两个问题</p>
<ul>
<li>任务展示<ul>
<li>如ps命令可以展出所有的进程，到了内核，按照任务列表展出的话，所有的线程也会平摊开来</li>
</ul>
</li>
<li>给任务下发指令<ul>
<li>如kill命令可以给进程发信号，通知进程退出。如果只发给了其中一个线程，我们就不能只退出这个线程，而是应该退出整个进程，当然有时候，希望只给某个线程发信号</li>
</ul>
</li>
</ul>
<p>所以，在内核中，进程和线程虽然都是任务，但是应加以区分。</p>
<p>其中，pid是process id，tgid是thread group ID</p>
</blockquote>
<ul>
<li>任何一个进程，如果只有主线程，那<strong>pid是自己，tgid是自己</strong>，<strong>group_leader指向的还是自己</strong></li>
<li>如果一个进程创建了其他线程，那么，<strong>线程有自己的pid</strong>，<strong>tgid就是进程的主线程的pid</strong>，<strong>group_leader指向的就是进程的主线程</strong></li>
</ul>
<h4><span id="信号处理">信号处理</span></h4><p>task_struct里面关于信号处理的字段</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">signal_struct</span>    *<span class="title">signal</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sighand_struct</span>   *<span class="title">sighand</span>;</span></span><br><span class="line"><span class="keyword">sigset_t</span>				blocked;</span><br><span class="line"><span class="keyword">sigset_t</span>				real_blocked;</span><br><span class="line"><span class="keyword">sigset_t</span>				saved_sigmask;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigpending</span>		<span class="title">pending</span>;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>			sas_ss_sp;</span><br><span class="line"><span class="keyword">size_t</span>					sas_ss_size;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>			sas__ss_flags;</span><br></pre></td></tr></table></figure>
<ul>
<li>定义了哪些信号<strong>被阻塞暂不处理（blocked）</strong>，哪些信号尚<strong>等待处理（pending）</strong>，哪些信号正在<strong>通过信号处理函数进行处理（sighand）</strong><ul>
<li>处理结果可以是忽略，可以使结束进程等等</li>
</ul>
</li>
<li>信号处理函数默认使用用户态的函数栈，也可以开辟新的栈专门用于信号处理，这就是sas_ss_xxx这三个变量的作用</li>
<li>我们有一个struct sigpending pending，进入struct signal_struct *signal里面看的话，还有一个struct sigpending shared _pending，它们一个是本任务的，一个是线程组共享的</li>
</ul>
<h4><span id="任务状态">任务状态</span></h4><p>在task_struct里面，涉及任务状态的是下面几个变量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="keyword">long</span> state;</span><br><span class="line"><span class="keyword">int</span> exit_state;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> flags;</span><br></pre></td></tr></table></figure>
<p><strong>state</strong>(状态)可以取的值定义在include/linux/sched.h头文件中</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Used in tsk-&gt;state: */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TASK_RUNNING			0x00000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TASK_INTERRUPTIBLE		0x00000001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TASK_UNINTERRUPTIBLE		0x00000002</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __TASK_STOPPED			0x00000004</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __TASK_TRACED			0x00000008</span></span><br><span class="line"><span class="comment">/* Used in tsk-&gt;exit_state: */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXIT_DEAD			0x00000010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXIT_ZOMBIE			0x00000020</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXIT_TRACE			(EXIT_ZOMBIE | EXIT_DEAD)</span></span><br><span class="line"><span class="comment">/* Used in tsk-&gt;state again: */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TASK_PARKED			0x00000040</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TASK_DEAD			0x00000080</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TASK_WAKEKILL			0x00000100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TASK_WAKING			0x00000200</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TASK_NOLOAD			0x00000400</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TASK_NEW			0x00000800</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TASK_RTLOCK_WAIT		0x00001000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TASK_FREEZABLE			0x00002000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __TASK_FREEZABLE_UNSAFE	       (0x00004000 * IS_ENABLED(CONFIG_LOCKDEP))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TASK_FROZEN			0x00008000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TASK_STATE_MAX			0x00010000</span></span><br></pre></td></tr></table></figure>
<p>从定义的数值很容易看出，flags是通过bitset的方式设置的，也就是说，当前时什么状态，哪一位就至1（二进制）</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/Eagle_UvsUwHtWtG.png" alt="Eagle_UvsUwHtWtG"></p>
<ul>
<li>TASK_RUNNING并不是说进程正在运行，而是表示进程在时刻准备运行的状态<ul>
<li>当处于这个状态的进程获得时间片的时候，就是在运行中</li>
<li>如果没有获得时间片，就说明它被其他进程抢占了，在等待再次分配时间片</li>
</ul>
</li>
<li>在运行的过程，一旦要进行一些I/O操作，需要等待I/O完毕，这个时候会释放CPU，进入睡眠状态<ul>
<li>Linux中有两种睡眠状态<ul>
<li>一种是 <strong>TASK_INTERRUPTIBLE</strong>，可中断的睡眠状态。是一种浅睡眠的状态，也就是说，虽然在睡眠，等待I/O完成，但是这个时候一个信号来的时候，进程还是要被唤醒<ul>
<li>但是唤醒后，不是继续刚才的操作，而是进行信号处理</li>
<li>当然，程序员可以根据自己的意愿，来写信号处理函数，例如收到某些信号，就放弃等待这个I/O操作完成，直接退出；也可收到某些信息，继续等待</li>
</ul>
</li>
<li>另一种是 <strong>TASK_UNINTERRUPTIBLE</strong>，不可中断的睡眠状态。是一种深度睡眠状态，不可被信号唤醒，只能死等I/O操作完成。一旦I/O操作因为特殊原因不能完成，谁也叫不醒这个进程了。<ul>
<li>kill本身也是一个信号，kill信号也会被忽略，除非重启电脑</li>
</ul>
</li>
</ul>
</li>
<li>有了一种新的进程睡眠状态，<strong>TASK_KILLABEL，可以终止的新睡眠状态</strong>，进程处于这种状态中，运行原理类型与不可中断的睡眠状态，只不过可以响应致命信号<br>-</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>64位系统--GNU_C</title>
    <url>/2023/04/13/64%E4%BD%8D%E7%B3%BB%E7%BB%9F--GNU_C/</url>
    <content><![CDATA[<h2><span id="gnu-c内嵌汇编语言">GNU C内嵌汇编语言</span></h2><ul>
<li><p>GNU C语言提供了关键字asm来声明代码是内嵌的汇编语句</p>
<ul>
<li><p>如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> nop() __asm__ __volatile__ (<span class="meta-string">&quot;nop       \n\t&quot;</span>)</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>C语言使用关键字<strong>__asm__和__volatile__</strong>对汇编语句进行修饰，这两个关键字在C语言内嵌汇编语句时经常使用</p>
<ul>
<li>__asm__：用于声明这行代码是一个内嵌汇编表达式</li>
<li>__volatile__：其作用是告诉编译器此行代码不能被编译器优化</li>
</ul>
</li>
<li><p>GNU C语言有着极其复杂的书写格式，将分为3个部分学习</p>
<ul>
<li><p>内嵌汇编表达式</p>
</li>
<li><p>操作约束和修饰符</p>
</li>
<li><p>序号占位符</p>
</li>
</ul>
</li>
</ul>
<h3><span id="内嵌汇编表达式">内嵌汇编表达式</span></h3><ul>
<li>GNU C语言的内嵌汇编表达式由4部分构成，它们之间使用“:”号分割，其完整格式为<ul>
<li><strong>指令部分 : 输出部分 :  输入部分  : 损坏部分</strong></li>
</ul>
</li>
<li>如果将内嵌汇编表达式当作函数，指令部分是函数中的代码，输入部分用于向函数传入参数，输出部分可理解为函数的返回值。</li>
</ul>
<p>4个部分的详细解释：</p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/UPDF_XXa6EI7era.png" alt="UPDF_XXa6EI7era"><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/UPDF_qffnicKDRO.png" alt="UPDF_qffnicKDRO"></p>
<p>损坏部分的3种通知：</p>
<ul>
<li>寄存器修改通知</li>
<li>内存修改通知</li>
<li>标志寄存器修改通知</li>
</ul>
<h3><span id="操作约束和修饰符">操作约束和修饰符</span></h3><p>每个输入\输出表达式都必须指定自身的操作约束，可细分为：</p>
<ul>
<li>寄存器约束</li>
<li>内存约束</li>
<li>立即数约束</li>
</ul>
<p>在输出表达式中，还有限定寄存器操作的修饰符</p>
<ul>
<li>详细解释：</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/UPDF_63gTf7C2SB.png" alt="UPDF_63gTf7C2SB"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/UPDF_LkUcSvAEmK.png" alt="UPDF_LkUcSvAEmK"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/UPDF_uzWdMwgNtu.png" alt="UPDF_uzWdMwgNtu"></p>
<ul>
<li>修饰符<ul>
<li>+</li>
<li>-</li>
<li>&amp;</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/UPDF_VwyjKhDXsU.png" alt="UPDF_VwyjKhDXsU"></p>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/UPDF_nH4COEln73.png" alt="UPDF_nH4COEln73"></p>
<h3><span id="序号占位符">序号占位符</span></h3><ul>
<li>定义：是输入/输出操作约束的数值映射</li>
<li>每个内嵌汇编表达式最多只有10条输入/输出约束，这些约束按照书写顺序依次被映射为序号0~9</li>
<li>如果指令部分想引用序号占位符，必须使用百分号%前缀加以修饰<ul>
<li>如%0表示第一个操作约束</li>
</ul>
</li>
<li>为了区分序号占位符和寄存器，特别使用两个百分号（%%）来对寄存器加以修饰</li>
<li>在%与序号占位符之间插入字母b表示操作最低字节，或插入字母h表示操作次低字节</li>
</ul>
<h2><span id="gnu-c语言对标准c语言的扩展">GNU C语言对标准C语言的扩展</span></h2><p>GNU C语言在标准C语言的基础上引入了诸多人性化的扩展</p>
<ul>
<li><p>柔性数组成员（或称零长数组、变长数组 ）</p>
<ul>
<li>GNU C语言<strong>允许使用长度为0的数组来增强结构体的灵活性</strong>，其在动态创建结构体时有着非常明显的优势</li>
</ul>
</li>
<li><p>case关键字支持范围匹配</p>
<ul>
<li><p>GNU C语言允许case关键字匹配一个数值范围，由此可以取代多级的if条件检测语句</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>..<span class="number">.&#x27;</span>z<span class="number">&#x27;</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>typeof关键字获取变量类型</p>
<ul>
<li>借助关键字typeof(x)可以取得变量x的数据类型</li>
</ul>
</li>
<li><p>可变参数宏</p>
<ul>
<li>在GNU C语言中宏函数允许使用可变参数类型</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/UPDF_IY1svAuoYq.png" alt="UPDF_IY1svAuoYq"></p>
</li>
<li><p>元素编号</p>
<ul>
<li>标准C语言规定数组和结构体必须按照固定顺序对成员（或元素）进行初始化赋值</li>
<li>GNU C语言为使数组和结构体初始化更加自由，特意放宽该限制<ul>
<li>数组可以在初始化期间借助下标对某些元素进行赋值，并在结构体初始化过程中使用成员名直接对成员进行赋值</li>
<li>允许数组和结构体按照任意顺序对成员（或元素）进行初始化赋值</li>
</ul>
</li>
</ul>
</li>
<li><p>当前函数名</p>
<ul>
<li>为当前函数的名字准备了两个标识符<ul>
<li><strong>__PRETTY__FUNCTION__</strong>：保存着带有语言特色的名字</li>
<li><strong>__FUNCTION__</strong>：保存着函数在源码中的名字</li>
</ul>
</li>
<li>在C函数中，这两个标识符代表的函数名字相同</li>
</ul>
</li>
<li><p>特殊属性声明</p>
<ul>
<li>允许使用特殊属性对函数、变量和类型加以修饰，以便对它们进行手工代码优化和定制</li>
<li>在声明处加上关键字<strong>__attribute__((ATTRIBUTE))</strong>即可指定特殊属性<ul>
<li>关键字中的ATTRIBUTE是属性说明</li>
<li>如有多个属性，必须用逗号隔开</li>
</ul>
</li>
<li>目前支持的属性说明有</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/UPDF_VFGxy8rawi.png" alt="UPDF_VFGxy8rawi"></p>
<ul>
<li>noreturn属性用来修饰函数，表示该函数从不返回，会使编译器在优化代码时剔除不必要的警告信息</li>
<li>packed属性作用是取消结构在编译时的对齐优化，使其按照实际占用字节数对齐</li>
<li>regparm(n)属性用于以指定寄存器传递参数的个数，该属性只能用在函数定义和声明里<ul>
<li>寄存器参数的上限值为3（使用顺序为EAX、EDX、ECX），若超过3，剩余参数将使用内存传递方式</li>
<li>该属性只在x86处理器体系结构下有效</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>64位系统--BootLoader</title>
    <url>/2023/04/13/64%E4%BD%8D%E7%B3%BB%E7%BB%9F--bootloader/</url>
    <content><![CDATA[<blockquote>
<p>BootLoader引导启动程序原本由Boot引导程序和Loader引导加载程序两部分构成。</p>
<ul>
<li>Boot引导程序主要负责开机启动和加载Loader程序</li>
<li>Loader引导加载程序则用于完成配置硬件工作环境、引导加载内核等任务</li>
</ul>
</blockquote>
<h2><span id="boot引导程序">Boot引导程序</span></h2><ul>
<li>计算机上电启动后，首先会经过BIOS上电自检，这个过程BIOS会<strong>检测硬件设备是否存在问题</strong><ul>
<li>如检测无误，将根据BIOS的启动项配置选择引导设备<ul>
<li>目前BIOS支持的设备启动项有软盘启动、U盘启动、硬盘启动以及网络启动</li>
<li>默认选择硬盘启动</li>
<li>从简单和易实现等角度看，我们选择最为简单的软盘行动</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3><span id="bios引导原理">BIOS引导原理</span></h3><blockquote>
<p>为什么所有操作系统都从Boot引导程序开始？</p>
</blockquote>
<ul>
<li>当BIOS自检设备结束后，会根据启动选项设置（此处指软驱启动）去选择启动设备<ul>
<li>即检查软盘的第0磁头第0磁道第1扇区，是否以数值0x55和0xaa两字节作为结尾</li>
<li>如果是，那么BIOS认为这个扇区是一个Boot Sector（引导扇区），进而把此扇区的数据复制到物理内存地址0x7c00处，随后将处理器的执行权移交给这段程序，即跳转至0x7c00地址处执行</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>统计学习方法L1</title>
    <url>/2023/04/11/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95L1/</url>
    <content><![CDATA[<blockquote>
<p>第一章的主要内容</p>
<ol>
<li>叙述统计学习的定义、研究对象和方法</li>
<li>叙述监督学习（本书的主要内容）</li>
<li>提出统计学习方法的三要素：模型、策略和算法</li>
<li>介绍模型选择，包括正则化、交叉验证与学习的泛化能力</li>
<li>介绍生成模型与判别模型</li>
<li>介绍监督学习方法的应用：分类问题、标注问题与回归问题</li>
</ol>
</blockquote>
<h2><span id="11-统计学习">1.1 统计学习</span></h2><h3><span id="统计学习的特点">统计学习的特点</span></h3><ul>
<li>定义：<strong>统计学习（statistical learning）</strong>是关于计算机<strong>基于数据构建概率统计模型</strong>并<strong>运</strong><br><strong>用模型对数据进行预测与分析</strong>的一门学科．统计学习也称为<strong>统计机器学习</strong><br>(statistical machine learning）</li>
<li>主要特点：<ul>
<li>统计学习<strong>以计算机及网络为平台</strong>，是建立在计算机及网络之上的</li>
<li>统计学习<strong>以数据为研究对象</strong>，是数据驱动的学科</li>
<li>统计学习的目的是<strong>对数据进行预测与分析</strong></li>
<li>统计学习<strong>以方法为中心</strong>，统计学习方法<strong>构建模型并应用模型进行预测与分析</strong></li>
<li>统计学习是概率论、统计学、信息论、计算理论、最优化理论及计算机科学等多个领域的交叉学科，并且在发展中逐步形成独自的理论体系与方法论．</li>
</ul>
</li>
</ul>
<blockquote>
<p>统计学习就是计算机系统通过运用数据及统计方法提高系统性能的机器学习. </p>
<p>现在，当人们提及机器学习时，往往是指统计机器学习． </p>
</blockquote>
<h3><span id="统计学习的对象">统计学习的对象</span></h3><ul>
<li>很明显是<u>数据</u>，<strong>从数据出发，提取数据的特征，抽象出数据的模型，发现数据中的知识，又回到对数据的分析与预测中去</strong></li>
<li>数据是<strong>多样的</strong>，包括存在于计算机及网络上的各种数字、文字、图像、视频、音频数据以及它们的组合．</li>
<li><strong>统计学习的前提</strong>：同类数据具有一定的统计规律性，这里的同类数据是指具有某种共同性质的数据<ul>
<li>由于具有统计规律性，所以可以用概率统计方法来加以处理。</li>
<li>比如，可以用随机变量描述数据中的特征，用概率分布描述数据的统计规律。</li>
</ul>
</li>
</ul>
<h3><span id="统计学习的目的">统计学习的目的</span></h3><ul>
<li>目的：用于对数据进行预测与分析，特别是对未知的新数据进行预测与分析</li>
<li>对数据的预测与分析是通过构建概率统计模型实现的</li>
<li>总的目标：考虑学习什么样的模型和如何学习模型，以使模型能对数据进行准确的预测与分析，同时也要考虑尽可能地提高学习效率</li>
</ul>
<h3><span id="统计学习的方法">统计学习的方法</span></h3><ul>
<li>基于数据构建统计模型从而对数据进行预测与分析。</li>
<li>组成<ul>
<li>监督学习（supervised learning）</li>
<li>非监督学习（unsupervised learning）</li>
<li>半监督学习（semi-supervised learning）</li>
<li>强化学习（reinforcement learning）</li>
</ul>
</li>
<li>主要讨论监督学习，这种情况下的统计学习的方法概括如下：<ul>
<li>从给定的、有限的、用于学习的<strong>训练数据（training data）</strong>集合出发，假设数据是独立同分布产生的</li>
<li>并且假设要学习的模型属于某个函数的集合，称为<strong>假设空间（hypothesis space）</strong></li>
<li>应用某个<strong>评价准则（evaluation criterion）</strong>，从假设空间中选取一个最优的模型，使它对已知训练数据及未知测试数据<strong>（test data）</strong>在给定的评价准则下有最优的预测</li>
<li>最优模型的选取由算法实现</li>
</ul>
</li>
<li>统计学习方法包括<strong>模型的假设空间、模型选择的准则以及模型学习的算法</strong></li>
<li><p>这个过程概括为三要素</p>
<ul>
<li>模型（model）</li>
<li>策略（strategy）</li>
<li>算法（algorithm）</li>
</ul>
</li>
<li><p>实现统计学习方法的步骤如下： </p>
<p>（1）得到一个有限的训练数据集合； </p>
<p>（2）确定包含所有可能的模型的假设空间，即学习模型的集合； </p>
<p>（3）确定模型选择的准则，即学习的策略； </p>
<p>（4）实现求解最优模型的算法，即学习的算法； </p>
<p>（5）通过学习方法选择最优模型； </p>
<p>（6）利用学习的最优模型对新数据进行预测或分析</p>
</li>
</ul>
<h3><span id="统计学习的研究">统计学习的研究</span></h3><ul>
<li>包括三个方面<ul>
<li>统计学习方法（statistical learning method）<ul>
<li>旨在开发新的学习方法</li>
</ul>
</li>
<li>统计学习理论（statistical learning theory）<ul>
<li>研究在于探求统计学习方法的有效性与效率，以及统计学习的基本理论问题</li>
</ul>
</li>
<li>统计学习应用（application of statistical learning）<ul>
<li>主要考虑将统计学习方法应用到时机问题中取，解决实际问题</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2><span id="12-监督学习">1.2 监督学习</span></h2><p>监督学习的任务：学习一个模型，使模型能够对任意给定的输入，对其相应的输出做出一个好的预测</p>
<h3><span id="基本概念">基本概念</span></h3><h4><span id="输入空间-特征空间与输出空间">输入空间、特征空间与输出空间</span></h4><ul>
<li><p>将输入与输出所有可能取值的集合分别称为<strong>输入空间（input space）与输出空间（output space）</strong></p>
<ul>
<li>输入与输出空间可以是有限元素的集合，也可以是整个欧氏空间</li>
<li>输入空间与输出空间可以是同一个空间，也可以是不同的空间；</li>
<li>但通常输出空间远远小于输入空间．</li>
</ul>
</li>
<li><p>每个具体的输入是一个<strong>实例（instance）</strong>，通常由<strong>特征向量（feature vector）</strong>表示</p>
</li>
<li><p>所有特征向量存在的空间称为<strong>特征空间（feature space）</strong>，特征空间的每一维对应于一个特征</p>
<ul>
<li>有时假设输入空间与特征空间为相同的空间，对它们不予区分</li>
<li>有时假设输入空间与特征空间为不同的空间，将实例从输入空间映射到特征空间</li>
<li>模型实际上都是定义在特征空间上的</li>
</ul>
</li>
<li><p>在监督学习过程中，将输入与输出看做是<strong>定义在输入（特征）空间与输出空间上的随机变量的取值</strong></p>
<ul>
<li>监督学习从<strong>训练数据（training data）</strong>集合中学习模型，对<strong>测试数据（test data）</strong>进行预测</li>
<li>训练数据由输入（或特征向量）与输出对组成，通常表示为</li>
</ul>
<script type="math/tex; mode=display">
T = \{(x_1, y_1), (x_2, y_2), \dots , (x_N, y_N)\}</script><ul>
<li>测试数据由相应的输入与输出对组成。</li>
<li>输入与输出对又称为<strong>样本（sample）</strong>或样本点</li>
</ul>
</li>
<li><p>输入变量X和输出变量Y有不同的类型，可以是连续的，也可以是离散的</p>
<ul>
<li>输入变量与输出变量均为连续变量的预测问题称为<strong>回归问题</strong></li>
<li>输出变量为有限个离散变量的预测问题称为<strong>分类问题</strong></li>
<li>输入变量与输出变量序列的预测问题称为<strong>标注问题</strong></li>
</ul>
</li>
</ul>
<h4><span id="联合概率分布">联合概率分布</span></h4><ul>
<li><p>监督学习假设输入与输出的随机变量<em>X</em>和<em>Y</em>遵循联合概率分布<em>P(X, Y)</em></p>
<ul>
<li>$P(X, \ Y)$表示分布函数，或者分布密度函数</li>
</ul>
<blockquote>
<p>注意：在学习过程中，假定这一联合概率分布存在，训练数据与测试数据被看作是依联合概率分布$P(X, \ Y)$独立同分布产生的。</p>
</blockquote>
</li>
<li><p>统计学习假设数据存在一定的统计规律，X 和Y 具有联合概率分布的假设就是监督学习关于<br>数据的基本假设． </p>
</li>
</ul>
<h4><span id="假设空间">假设空间</span></h4><ul>
<li>监督学习目的在于学习<strong>一个由输入到输出的映射</strong>，这一映射由<strong>模型</strong>来表示</li>
<li>模型属于由输入空间到输出空间的映射的集合，该集合就是<strong>假设空间（hypothesis space）</strong><ul>
<li>假设空间的确定意味着学习范围的确定</li>
</ul>
</li>
<li>监督学习的模型可以是概率模型或非概率模型，由条件概率分布$P(Y|X)$或决策函数（decision function）$Y = f(X)$表示，随具体学习方法而定。<ul>
<li>对具体的输入进行相应的输出预测时，写作$P(y|x)$或$y = f(x)$</li>
</ul>
</li>
</ul>
<h3><span id="问题的形式化">问题的形式化</span></h3><ul>
<li>监督学习利用训练数据集学习一个模型，再用模型对测试样本集进行<strong>预测（prediction）</strong></li>
<li>这个过程中需要训练数据集，而训练数据集往往是人工给出的，称为监督学习<ul>
<li>监督学习分为学习和预测两个阶段，由学习系统与预测系统完成</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/UPDF_Uxe1lm0AqM.png" alt="UPDF_Uxe1lm0AqM"></p>
<p>如果这个模型有很好的预测能力，训练样本输出$y_i$和模型输出$f(x_i)$之间的差就应该足够小．学习系统通过不断的尝试，选取最好的模型，以便对训练数据集有足够好的预测，同时对未知的测试数据集的预测也有尽可能好的推广． </p>
<h2><span id="13-统计学习三要素">1.3 统计学习三要素</span></h2><blockquote>
<p>方法 = 模型 + 策略 + 算法</p>
</blockquote>
<h3><span id="模型">模型</span></h3><ul>
<li><p>在监督学习过程中，模型就是所要学习的条件概率分布或决策函数</p>
</li>
<li><p>模型的<strong>假设空间（hypothesis space）</strong>包含所有可能的条件概率分布或决策函数</p>
<ul>
<li>例如，假设决策函数是输入变量的线性函数，那么模型的假设空间就是所有这些线性函数构成的函数集合</li>
</ul>
</li>
</ul>
<hr>
<p>假设空间用$F$表示，假设空间可以定义为<strong>决策函数的集合</strong></p>
<script type="math/tex; mode=display">
F = \{f \ | \ Y \ = \ f(X) \}</script><p>其中，$X$和$Y$是定义在输入空间和输出空间上的变量</p>
<ul>
<li>这时$F$通常是由一个参数向量决定的函数族</li>
</ul>
<script type="math/tex; mode=display">
F = \{f \ | \ Y \ = \ f_{\theta}(X), \ \theta \ \in \ R^n \}</script><p>参数向量$\theta$取值于$n$维欧式空间$R^n$，称为<strong>参数空间（parameter space）</strong></p>
<hr>
<p>假设空间也可以定义为<strong>条件概率的集合</strong></p>
<script type="math/tex; mode=display">
F = \{ P \ | \ P(Y | X) \}</script><p>其中，$X$和$Y$是定义在输入空间和输出空间上的随机变量</p>
<ul>
<li>这时$F$通常是由一个参数向量决定的条件概率分布族</li>
</ul>
<script type="math/tex; mode=display">
F = \{P \ | \ P_{\theta}(Y |X), \theta \in R^n \}</script><p>参数向量$\theta$取值于$n$维欧式空间$R^n$，称为参数空间（parameter space）</p>
<blockquote>
<p>本书称由决策函数表示的模型为非概率模型，由条件概率表示的模型为概率模型</p>
</blockquote>
<h3><span id="策略">策略</span></h3><p>有了模型的假设空间，统计学习接着要考虑的是按照什么样的准则学习或选择最优的模型</p>
<ul>
<li>统计学习的目标在于从假设空间中选取最优模型</li>
</ul>
<h4><span id="损失函数和风险函数">损失函数和风险函数</span></h4><ul>
<li>损失函数度量<strong>模型一次预测的好坏</strong></li>
<li>风险函数度量<strong>平均意义下模型预测的好坏</strong></li>
</ul>
<p><strong>损失函数</strong>是$f(X)$和$Y$的非负实值函数，记作$L(Y, \ f(X))$</p>
<ul>
<li><p>常用的损失函数</p>
<ul>
<li>0-1损失函数（0-1 loss function）</li>
</ul>
<script type="math/tex; mode=display">
\begin{align*}
\begin{split}
L(Y, f(X))= \left \{
\begin{array}{ll}
    1, & Y \ne \ f(X)         \\
    0, & Y = f(X)             \\ 
\end{array}
\right.
\end{split}
\end{align*}</script><ul>
<li>平方损失函数（quadratic loss function）</li>
</ul>
<script type="math/tex; mode=display">
L(Y, f(X)) = (Y\ - \ f(X))^2</script><ul>
<li>绝对损失函数（absolute loss function）</li>
</ul>
<script type="math/tex; mode=display">
L(Y, f(X)) = |Y \ - \ f(X)|</script><ul>
<li>对数损失函数（logarithmic loss function）或对数似然损失函数（loglikelihood loss function）</li>
</ul>
<script type="math/tex; mode=display">
L(Y, P(Y|X)) = -logP(Y|X)</script></li>
<li><p>损失函数值越小，模型就越好</p>
</li>
<li><p>由于模型的输入、输出$（X,Y）$是随机变量，遵循联合分布$P(X, Y)$，所以损失函数的期望是</p>
</li>
</ul>
<script type="math/tex; mode=display">
R_{exp}(f) = E_p[L(Y, f(X))] = \int_{X \times Y}L(y, f(x))P(x, y)dxdy</script><p>这是理论上模型$f(X)$关于联合分布$P(X,Y)$的平均意义下的损失，成为<strong>风险函数（risk function）或期望损失（expected loss）</strong></p>
<ul>
<li>学习的目标就是选择期望风险最小的模型<ul>
<li>由于联合分布$P(X,Y)$是未知的，$R_{exp}(f)$不能直接计算</li>
<li>这样一来，一方面根据期望风险最小学习模型要用到联合分布，另一方面联合分布又是未知的，所以监督学习就成为一个<strong>病态问题（ill-formed problem）</strong></li>
</ul>
</li>
<li>给定一个训练数据集</li>
</ul>
<script type="math/tex; mode=display">
T = \{(x_1, y_1), (x_2, y_2), \dots , (x_N, y_N)\}</script><p>模型$f(X)$关于训练数据集的平均损失称为<strong>经验风险（empirical risk）</strong>或<strong>经验损失(empirical loss)</strong>，记作$R_{emp}$</p>
<script type="math/tex; mode=display">
R_{emp}(f) = \frac{1}{N} \sum_{i=1} ^NL(y_i,f(x_i))</script><blockquote>
<p>期望风险和经验风险的区别</p>
<ul>
<li>期望风险$R_{exp}(f)$是模型关于联合分布的期望损失</li>
<li>经验风险$R_{emp}(f)$是模型关于训练样本集的平均损失</li>
</ul>
</blockquote>
<ul>
<li>根据大数定律，当样本容量$N$趋于无穷时，经验风险$R_{emp}(f)$趋于期望风险$R_{exp}(f)$，所以很自然地想到用经验风险估计期望风险。</li>
<li>但是现实中训练样本数目有限，甚至很小，所以这么做往往并不理想</li>
<li>要对经验风险进行一定的矫正，这就关系到监督学习的两个基本策略：经验风险最小化和结构风险最小化</li>
</ul>
<h4><span id="经验风险最小化与结构风险最小化">经验风险最小化与结构风险最小化</span></h4><p>在假设空间、损失函数以及训练数据集确定的情况下，经验风险函数式就可以确定</p>
<h4><span id="经验风险最小化empirical-risk-minimizationerm">经验风险最小化（empirical risk minimization，ERM）</span></h4><ul>
<li>该策略认为，经验风险最小的模型就是最优的模型</li>
<li>根据该策略，按照经验风险最小化来求最优模型就是求解最优化问题</li>
</ul>
<script type="math/tex; mode=display">
\min_{f \in F} \frac{1}{N}\sum^N_{i=1}L(y_i, f(x_i))</script><p>其中，$F$是假设空间</p>
<ul>
<li>当样本容量足够大时，经验风险最小化能保证有很好的学习效果，在现实中被广泛采用<ul>
<li>如，<strong>极大似然估计（maximum likelihood estimation）</strong>就是经验风险最小化的一个例子，当模型是条件概率分布，损失函数是对数损失函数时，经验风险最小化就等价于极大似然估计</li>
<li>但是，当样本容量很小，经验风险最小化学习的效果未必很好，会产生“过拟合”现象</li>
</ul>
</li>
</ul>
<h4><span id="结构风险最小化structural-risk-minimizationsrm">结构风险最小化（structural risk minimization，SRM）</span></h4><ul>
<li>为了防止过拟合而提出来的策略</li>
<li>结构风险最小化等价于<strong>正则化（rugularization）</strong></li>
<li>结构风险在经验风险上加上表示<strong>模型复杂度</strong>的<strong>正则化项（regularizer）或罚项（penalty term）</strong></li>
</ul>
<script type="math/tex; mode=display">
R_{srm}(f) = \frac{1}{N}\sum^N_{i=1}L(y_i,f(x_i)) + \lambda J(f)</script><p>其中$J(f)$为模型的复杂度，是定义在假设空间$F$上的泛函</p>
<ul>
<li>模型$f$越复杂，复杂度$J(f)$就越大，反之则相反<ul>
<li>也就是说，复杂度表示了对复杂模型的惩罚</li>
</ul>
</li>
<li>$\lambda \ge 0$是系数，用来权衡经验风险和模型复杂度</li>
<li>结构风险小需要经验风险与模型复杂度同时小<ul>
<li>比如，贝叶斯估计中的最大后验概率估计（maximum posterior probability estimation, MAP）就是一个结构风险最小化的一个例子。</li>
<li>当模型是条件概率分布、损失函数是对数损失函数、模型复杂度由模型的先验概率表示时，结构风险最小化就等价于最大后验概率估计． </li>
</ul>
</li>
<li>结构风险最小化的策略认为结构风险最小的模型是最优的模型，求最优模型就是求解最优化问题</li>
</ul>
<script type="math/tex; mode=display">
\min_{f \in F} \frac{1}{N}\sum_{i=1}^NL(y_i,f(x_i)) + \lambda J(f)</script><p>监督学习问题就变成了经验风险或结构风险函数的最优化问题．这时经验或结构风险函数是最优化的目标函数</p>
<h3><span id="算法">算法</span></h3><blockquote>
<p>算法是指学习模型的具体计算方法</p>
</blockquote>
<ul>
<li>统计学习基于训练数据集，根据学习策略，从假设空间中选择最优模型，最后需要考虑用什么样的计算方法求解最优模型</li>
<li>统计学习方法就归结为最优化问题，统计学习的算法成为求解最优化问题的算法<ul>
<li>如果最优化问题有显式的解析解，最优化问题就很简单，但通常解析解不存在</li>
<li>这就需要数值计算的方法求解，如何保证找到全局最优解，并使求解的过程非常高效，成为一个重要问题</li>
</ul>
</li>
<li>统计学习可利用已有的最优化算法，有时也需要开发独立的最优化算法</li>
</ul>
<p>统计学习方法之间的不同，主要来自其模型、策略、算法的不同．确定了模型、策略、算法，统计学习的方法也就确定了．这也就是将其称为统计学习三要素的原因．</p>
<h2><span id="14-模型评估与模型选择">1.4 模型评估与模型选择</span></h2><h3><span id="训练误差与测试误差">训练误差与测试误差</span></h3><ul>
<li>当损失函数给定时，基于损失函数的模型的<strong>训练误差（training error）</strong>和模型的<strong>测试误差（test error）</strong>就自然成为学习方法评估的标准．</li>
</ul>
<blockquote>
<p>注意，统计学习方法具体采用的损失函数未必是评估时使用的损失函数．</p>
<p>当然，让两者一致是比较理想的</p>
</blockquote>
<ul>
<li>假设学习到的模型是$Y = \hat{f}(X)$，训练误差是模型关于训练数据集的平均损失</li>
</ul>
<script type="math/tex; mode=display">
R_{emp}(\hat{f}) = \frac{1}{N}\sum^N_{i=1}L(y_i, \hat{f}(x_i))</script><p>其中，$N$是训练样本容量</p>
<ul>
<li>测试误差是模型关于测试数据集的平均损失</li>
</ul>
<script type="math/tex; mode=display">
e_{test} = \frac{1}{N} \sum^{N^{`}}_{i=1}L(y_i, \hat{f}(x_i))</script><p>其中，$N^`$是测试样本容量</p>
<ul>
<li>当损失函数是0-1损失时，测试误差就变成了常见的测试数据集上的误差率(error rate)了</li>
<li>训练误差的大小，对判断给定问题是不是一个容易学习的问题是有意义的，但本质上不重要</li>
<li>测试误差反映了学习方法对未知的测试数据集的预测能力，是学习中的重要概念<ul>
<li>通常将学习方法对未知数据的预测能力称为<strong>泛化能力（generalization ability）</strong></li>
</ul>
</li>
</ul>
<h3><span id="过拟合与模型选择">过拟合与模型选择</span></h3><ul>
<li>当假设空间含有不同复杂度（例如，不同的参数个数）的模型时，就要面临<strong>模型选择（model selection）</strong>的问题</li>
<li>如果在假设空间中存在“真”模型，那么所选择的模型应该逼近真模型<ul>
<li>具体地，所选择的模型要与真模型的参数个数相同，参数向量与真模型的参数向量相近</li>
</ul>
</li>
<li>但是，如果</li>
<li>一味追求提高对训练数据的预测能力，所选模型的复杂度则往往会比真模型更高，这种现象成为<strong>过拟合（over-fitting）</strong><ul>
<li>过拟合是指学习时选择的模型所包含的参数过多，以致于出现这一模型对已知数据预测得很好，但对未知数据预测得很差的现象．</li>
</ul>
</li>
<li>模型选择旨在避免过拟合并提高模型的预测能力</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/UPDF_KCLFSY29rZ.png" alt="UPDF_KCLFSY29rZ" style="zoom:67%;"></p>
<h2><span id="15-正则化与交叉验证">1.5 正则化与交叉验证</span></h2><h3><span id="正则化regularization">正则化（regularization）</span></h3><ul>
<li>正则化是结构风险最小化策略的实现，是在经验风险上加一个<strong>正则化项（regularizer）或罚项（penalty term）</strong></li>
<li>正则化项一般是模型复杂度的单调递增函数，模型越复杂，正则化值就越大<ul>
<li>比如，正则化项可以是模型参数向量的范数</li>
</ul>
</li>
<li>正则化一般具有如下形式</li>
</ul>
<script type="math/tex; mode=display">
\min_{f \in F} \frac{1}{N}\sum_{i=1}^N L(y_i, f(x_i)) +\lambda J(f)</script><p>其中，第1项是经验风险，第2项是正则化项，$\lambda \ge 0$为调整两者之间关系的系数</p>
<ul>
<li><p>正则化项可以取不同的形式</p>
</li>
<li><p>例如，回归问题，损失函数为平方损失，正则化项可以是参数向量的$L^2$范数</p>
</li>
</ul>
<script type="math/tex; mode=display">
L(w) = \frac{1}{N}\sum_{i=1}^N(f(x_i;w)-y_i)^2 + \frac{\lambda}{2} ||w||^2</script><p>也可以是参数向量的$L_1$范数</p>
<script type="math/tex; mode=display">
L(w) = \frac{1}{N}\sum_{i=1}^N(f(x_i;w)-y_i)^2 + \lambda ||w||_1</script><ul>
<li>正则化符合<strong>奥卡姆剃刀(Occam’s razor)原理</strong>．奥卡姆剃刀原理应用于模型选择时变为以下想法：在所有可能选择的模型中，能够很好地解释已知数据并且十分简单才是最好的模型，也就是应该选择的模型</li>
<li>从<strong>贝叶斯估计</strong>的角度来看，正则化项对应于模型的先验概率．可以假设复杂的模型有较小的先验概率，简单的模型有较大的先验概率． </li>
</ul>
<h3><span id="交叉验证cross-validation">交叉验证（cross validation）</span></h3><ul>
<li><p>给定的样本数据充足，可随机地将数据集切分成三部分，分别为训练集（training set）、验证集（validation set）和测试集（test set）</p>
<ul>
<li>训练集（training set）：用来训练模型</li>
<li>验证集（validation set）：用于模型的选择</li>
<li>测试集（test set）：用于最终对学习方法的评估</li>
</ul>
</li>
<li><p>在学习到的不同复杂度的模型中，选择对验证集有最小预测误差的模型</p>
</li>
<li>由于验证集有足够多的数据，用它对模型进行选择也是有效的</li>
</ul>
<h4><span id="简单交叉验证">简单交叉验证</span></h4><ul>
<li><p>随机地将已给数据分成两部分</p>
<ul>
<li><p>一部分作为训练集</p>
</li>
<li><p>另一部分作为测试集</p>
</li>
<li><p>（例如，70%的数据为训练集，30%的数据为测试集）</p>
</li>
</ul>
</li>
<li><p>用训练集在各种条件下（例如，不同的参数个数）训练模型</p>
</li>
<li>在测试集上评价各个模型的测试误差，选出测试误差最小的模型</li>
</ul>
<h4><span id="s折交叉验证s-fold-cross-validation">S折交叉验证（S-fold cross validation）</span></h4><ul>
<li>首先随机地将已给数据切分为$S$个互不相交的大小相同的子集</li>
<li>然后利用$S-1$个子集的数据训练模型，利用余下的子集测试模型</li>
<li>将这一过程对可能的$S$种选择重复进行</li>
<li>最后选出$S$次评测中平均测试误差最小的模型</li>
</ul>
<h4><span id="留一交叉验证">留一交叉验证</span></h4><ul>
<li>$S$折交叉验证的特殊情形是$S = N$，称为<strong>留一交叉验证（leave-one-out cross validation）</strong></li>
<li>往往在数据缺乏的情况下使用</li>
</ul>
<h2><span id="16-泛化能力">1.6 泛化能力</span></h2><h3><span id="泛化误差">泛化误差</span></h3><blockquote>
<p>学习方法的<strong>泛化能力（generalization ability）</strong>是指由该方法学习到的模型对未知数据的预测能力，是学习方法本质上重要的性质</p>
</blockquote>
<ul>
<li>现实中采用最多的办法是通过<strong>测试误差</strong>来评价学习方法的泛化能力<ul>
<li>这种评价依赖于测试数据集，而测试数据集是有限的，很有可能由此得到的评价结果是不可靠的</li>
<li>统计学习理论试图从理论上对学习方法的泛化能力进行分析</li>
</ul>
</li>
<li>定义：如果学到的模型是$\hat{f}$，那么用这个模型对未知数据预测的误差即为<strong>泛化误差（generalization error）</strong></li>
</ul>
<script type="math/tex; mode=display">
R_{exp}(\hat{f}) = E_p[L(Y,\hat{f}(X))] = \int_{X \times Y}L(y,\hat{f}(x))P(x,y)dxdy</script><ul>
<li>泛化误差反映了学习方法的泛化能力，如果一种方法学习到的模型比另一种方法学习的模型具有更小的泛化误差，则该方法更有效<ul>
<li>事实上，泛化误差就是所学习到的模型的期望风险</li>
</ul>
</li>
</ul>
<h3><span id="泛化误差上界">泛化误差上界</span></h3><blockquote>
<p>学习方法的泛化能力分析往往是通过研究泛化误差的概率上界进行的，简称为<strong>泛化误差上界（generalization error bound）</strong></p>
</blockquote>
<ul>
<li><p>具体来说，就是通过比较两种学习方法的泛化误差上界的大小来比较它们的优劣</p>
</li>
<li><p>有以下性质</p>
<ul>
<li>是样本容量的函数，当样本容量增加时，泛化上界趋于0</li>
<li>是假设空间容量的函数，假设空间容量越大，模型就越难学，泛化误差上界就越大</li>
</ul>
</li>
</ul>
<h2><span id="17-生成模型与判别模型">1.7 生成模型与判别模型</span></h2><p>监督学习方法可以分为<strong>生成方法（generative approach）和判别方法（discriminative approach）</strong>，所学到的模型分别成为<strong>生成模型（generative model）和判别模型（discriminative model）</strong></p>
<h3><span id="生成模型">生成模型</span></h3><ul>
<li>生成方法由数据学习联合概率分布$P(X,Y)$，然后求出条件概率分布$P(Y|X)$作为预测的模型，即生成模型</li>
</ul>
<script type="math/tex; mode=display">
P(Y|X)  = \frac{P(X, Y)}{P(X)}</script><p>之所以被称为生成方法，是因为模型表示了给定输入$X$产生输出$Y$的生成关系</p>
<ul>
<li>典型的生成模型：朴素贝叶斯法和隐马尔科夫模型</li>
</ul>
<h3><span id="判别模型">判别模型</span></h3><ul>
<li><p>判别方法由数据直接学习决策函数$f(X)$或者条件概率分布$P(Y|X)$作为预测的模型，即判别模型</p>
</li>
<li><p>判别方法关心的是对给定的输入$X$，应该预测什么样的输出$Y$</p>
</li>
<li>典型的判别模型：k近邻法、感知机、决策树、逻辑斯蒂回归模型、最大熵模型、支持向量机、提升方法和条件随机场</li>
</ul>
<h3><span id="比较">比较</span></h3><ul>
<li>生成方法和判别方法各有优缺点，适用于不同条件下的学习方法</li>
<li>生成方法的特点：<ul>
<li>生成方法可以<strong>还原出联合概率分布</strong>$P(X,Y)$，而判别方法不能</li>
<li>生成方法的<strong>学习收敛速度更快</strong>，即当样本容量增加的时候，学到的模型可以更快地收敛于真实模型</li>
<li>存在隐变量时，仍可以用生成方法学习</li>
</ul>
</li>
<li>判别方法的特点：<ul>
<li>判别方法<strong>直接学习的是条件概率$P(Y|X)$或决策函数$f(X)$</strong>，直接进行预测，往往学习的准确率更高</li>
<li>由于直接学习$P(Y|X)$或$f(X)$，可以<strong>对数据进行各种程度上的抽象、定义特征并使用特征</strong>，可以简化学习问题</li>
</ul>
</li>
</ul>
<h2><span id="18-分类问题">1.8 分类问题</span></h2><blockquote>
<p>分类是监督学习的一个核心问题</p>
</blockquote>
<ul>
<li>当<strong>输出变量$Y$取有限个离散值</strong>时，预测问题便成为分类问题</li>
<li><strong>输入变量$X$可以是离散的，也可以是连续的</strong></li>
<li>监督学习从数据中学习一个分类模型或分类决策函数，称为<strong>分类器（classifier）</strong></li>
<li><p>分类器对新的输入进行输出的<strong>预测（prediction）</strong>，称为<strong>分类（classfication）</strong></p>
<ul>
<li>可能的输出称为<strong>类（class）</strong></li>
<li>分类的类别为多个时，称为多类分类问题</li>
</ul>
</li>
<li><p>分类问题包括学习和分类两个过程</p>
<ul>
<li>学习过程中，根据已知的训练数据集利用有效的学习方法学习一个分类器</li>
<li>分类过程中，利用学习的分类器对新的输入实例进行分类</li>
</ul>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/UPDF_rukv9K8KNy.png" alt="UPDF_rukv9K8KNy"></p>
<ul>
<li><p>评价分类器性能的指标一般是 <strong>分类准确率（accuracy）</strong></p>
<ul>
<li>定义：对于给定的测试数据集，分类器正确分类的样本数与总样本数之比</li>
</ul>
</li>
<li><p>对于二类分类问题常用的评价指标是<strong>精确率（precision）与召回率（recall）</strong></p>
<ul>
<li><p>通常以关注的类为正类，其他类为负类，分布器在测试数据集上的预测或正确或不正确</p>
</li>
<li><p>4种情况：</p>
<ul>
<li>TP：将正类预测为正类数</li>
<li>FN：将正类预测为负类数</li>
<li>FP：将负类预测为正类数</li>
<li>TN：将负类预测为负类数</li>
</ul>
</li>
<li><p>精确率：</p>
<script type="math/tex; mode=display">
P = \frac{TP}{TP+FP}</script></li>
</ul>
</li>
</ul>
<ul>
<li><p>召回率：</p>
<script type="math/tex; mode=display">
R = \frac{TP}{TP+FN}</script></li>
<li><p>$F_1$值：是精确率和召回率的调和均值</p>
<script type="math/tex; mode=display">
\frac{2}{F_1} = \frac{1}{P} + \frac{1}{R}</script><p>精确率和召回率都高时，$F_1$值也会高</p>
</li>
</ul>
<h2><span id="19-标注问题">1.9 标注问题</span></h2><blockquote>
<p>标注（tagging）是一个监督学习问题，可认为是分类问题的一个推广，它又是更复杂的结构预测（structure prediction）问题的简单形式</p>
</blockquote>
<ul>
<li>标注问题的输入是一个观测序列，输出是一个标记序列或状态序列</li>
<li>目标：学习一个模型，使它能够对观测序列给出标记序列作为预测<ul>
<li>可能的标记个数是有限的，但其组合所成的标记序列的个数是依序列长度呈指数级增长的</li>
</ul>
</li>
<li>标注问题分为学习和标注两个过程、</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Ye2222/blogImage@main/images2/UPDF_JeKDbiQYxI.png" alt="UPDF_JeKDbiQYxI" style="zoom:80%;"></p>
<ul>
<li>给定训练数据集：$T  = \{(x_1, y_1),(x_2,y_2),\dots,(x_N, y_N)\}$</li>
</ul>
<p>这里，$x_i = (x_{i}^{(1)}, \dots, x_i^{(n)})$，$i=1,2,\dots,N$，是输入观测序列，</p>
<p>$y_i$是相应的输出标记序列</p>
]]></content>
      <categories>
        <category>机器学习</category>
        <category>统计学习方法</category>
      </categories>
  </entry>
</search>
